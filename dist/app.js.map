{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Session } from \"./components/session\";\r\nimport { initCheckStruct } from \"./connector/protocol\";\r\nimport { getCpuUsage } from \"./cpuUsage\";\r\nimport DataBase from \"./database/DataBase\";\r\nimport { errLog, logProto } from \"./LogTS\";\r\nimport { connector, createApp } from \"./mydog\";\r\nimport { ServerName } from \"./serverConfig/route\";\r\nexport let app = createApp();\r\n\r\nexport const isDebug = true;\r\n\r\n\r\nlet connectorType = connector.Tcp;\r\nif (app.serverInfo.serverType == ServerName.background) {\r\n    connectorType = connector.Ws;\r\n} \r\n\r\napp.setConfig(\"connector\", { \"connector\": connectorType, \"clientOnCb\": clientOnCallback, \"heartbeat\": 20, \"clientOffCb\": clientOffCallback, \"interval\": 50 });\r\n\r\n// app.setConfig(\"encodeDecode\", getEncodeDecodeFunc());\r\napp.setConfig(\"logger\", (type: number, level: string, msg: string) => {\r\n    if (level === \"warn\" || level === \"error\") {\r\n        errLog(msg);\r\n    }\r\n});\r\napp.setConfig(\"rpc\", { \"interval\": 33, \"heartbeat\": 20 });\r\napp.setConfig(\"mydogList\", () => {\r\n    return [{ \"title\": \"cpu\", \"value\": getCpuUsage() }]\r\n})\r\n\r\napp.configure(ServerName.gate, () => {\r\n    // 当客户端给后端服务器发消息时，需要提供路由函数以决定该消息发到哪个服务器\r\n    app.route(ServerName.logic, (session: Session) => {\r\n        //理论上应该调用此路由之前，设置玩家的session 的 serverId\r\n        //此处实际上是分配对应类型的服务器其中一个分配给玩家\r\n        return ServerName.logic + \"-\" + session.get(\"serverId\");\r\n    });\r\n\r\n    app.route(ServerName.fight, (session: Session) => {\r\n        //理论上应该调用此路由之前，设置玩家的session 的 serverId\r\n        //此处实际上是分配对应类型的服务器其中一个分配给玩家\r\n        return ServerName.fight + \"-\" + session.get(\"serverId\");\r\n    });\r\n\r\n\r\n    app.route(ServerName.scenarios, (session: Session) => {\r\n        //理论上应该调用此路由之前，设置玩家的session 的 serverId\r\n        //此处实际上是分配对应类型的服务器其中一个分配给玩家\r\n        return ServerName.scenarios + \"-\" + session.get(\"serverId\");\r\n    });\r\n\r\n\r\n\r\n});\r\n\r\napp.configure(ServerName.chat, () => {\r\n    app.route(ServerName.chat, (session: Session) => {\r\n        return ServerName.chat + \"-\" + session.get(\"serverId\");\r\n    });\r\n});\r\n\r\ninit();\r\n\r\n\r\nasync function init() {\r\n    // await ConfigMgr.init();\r\n    await DataBase.Instance.init();\r\n\r\n    switch (app.serverType) {\r\n        case ServerName.gate:\r\n            break;\r\n        case ServerName.logic:\r\n            break;\r\n        case ServerName.chat:\r\n            break;\r\n        case ServerName.background:\r\n            break;\r\n        case ServerName.master:\r\n            break;\r\n    }\r\n\r\n    initCheckStruct();\r\n\r\n    app.start();\r\n}\r\n\r\n// servers 目录为通信消息入口。\r\n// 如 chat 表示聊天类型服务器，handler目录下接收客户端消息，remote目录下接收服务器之间的rpc调用消息。\r\n// 客户端发送chat.main.chat消息，服务器将会在servers/chat/handler/main.ts文件中的chat方法处收到消息，\r\n// 收到消息后调用next()即可发送数据给客户端。开发者调用 app.rpc(\"chat-server-1\").chat.main.offline()，将会在servers/chat/remote/main.ts文件中的offline方法处收到消息。\r\n// app.ts为程序入口文件\r\n\r\nprocess.on(\"uncaughtException\", function (err: any) {\r\n    errLog( \"uncaughtException\", err)\r\n});\r\nprocess.on(\"unhandledRejection\", function (err: any) {\r\n    errLog( \"unhandledRejection\", err)\r\n});\r\n\r\n\r\n\r\n\r\nfunction clientOnCallback(session: Session) {\r\n    logProto(\"one client on\", session.uid, app.serverInfo);\r\n}\r\n\r\nfunction clientOffCallback(session: Session) {\r\n    logProto(\"one client off\", session.uid, app.serverInfo);\r\n}"]}
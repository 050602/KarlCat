{"version":3,"file":"ObjectPool.js","sourceRoot":"","sources":["../../src/core/ObjectPool.ts"],"names":[],"mappings":";;;AAEA;;;;GAIG;AACH,MAAa,UAAU;IAGnB,wEAAwE;IAExE;;;OAGG;IACI,MAAM,CAAC,GAAG,CAAwB,IAAmB,EAAE,oBAA6B,KAAK;QAC5F,uCAAuC;QACvC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;YACpC,OAAO,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;SAChD;QACD,OAAO,KAAK,CAAC,GAAG,EAAO,CAAC;IAC5B,CAAC;IAED,MAAM;IACN,mBAAmB;IACnB,oBAAoB;IACpB,MAAM;IACN,kDAAkD;IAClD,8CAA8C;IAC9C,gDAAgD;IAChD,6BAA6B;IAC7B,QAAQ;IACR,0BAA0B;IAC1B,IAAI;IAEJ;;;OAGG;IACI,MAAM,CAAC,OAAO,CAAC,MAAmB;QACrC,IAAI,CAAC,MAAM;YACP,OAAO;QACX,aAAa;QACb,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC;QAClD,MAAM,CAAC,UAAU,EAAE,CAAC;QACpB,IAAI,KAAK,GAAkB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACrD,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,KAAK,GAAG,EAAE,CAAC;YACX,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;SACpC;QACD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEnB,2CAA2C;IAC/C,CAAC;IAED,MAAM;IACN,cAAc;IACd,sBAAsB;IACtB,MAAM;IACN,wCAAwC;IACxC,oBAAoB;IACpB,yDAAyD;IACzD,4DAA4D;IAC5D,2BAA2B;IAC3B,sBAAsB;IACtB,4CAA4C;IAC5C,QAAQ;IACR,0BAA0B;IAC1B,EAAE;IACF,kDAAkD;IAClD,IAAI;IAEG,MAAM,CAAC,KAAK;QACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;;AArEL,gCAsEC;AArEkB,gBAAK,GAA+B,IAAI,GAAG,EAAyB,CAAC","sourcesContent":["import {IObjectPool} from \"./IObjectPool\";\r\n\r\n/**\r\n * @Doc 对象池\r\n * @Author kL\r\n * @Date 2022/5/20 13:45\r\n */\r\nexport class ObjectPool {\r\n    private static _pool: Map<string, IObjectPool[]> = new Map<string, IObjectPool[]>();\r\n\r\n    // private static _pool2: Map<string, any[]> = new Map<string, any[]>();\r\n\r\n    /**\r\n     * 从对象池中取出\r\n     * @param type 类型\r\n     */\r\n    public static get<T extends IObjectPool>(type: (new () => T), ifEmptyReturnNull: boolean = false): T {\r\n        // console.log(\"对象池 get()\", type.name);\r\n        let array = this._pool.get(type.name);\r\n        if (array == null || array.length == 0) {\r\n            return ifEmptyReturnNull ? null : new type();\r\n        }\r\n        return array.pop() as T;\r\n    }\r\n\r\n    // /**\r\n    //  * 从对象池中取出（Any用）\r\n    //  * @param type 类型\r\n    //  */\r\n    // public static get2<T>(type: (new () => T)): T {\r\n    //     let array = this._pool2.get(type.name);\r\n    //     if (array == null || array.length == 0) {\r\n    //         return new type();\r\n    //     }\r\n    //     return array.pop();\r\n    // }\r\n\r\n    /**\r\n     * 回收\r\n     * @param object 对象\r\n     */\r\n    public static recycle(object: IObjectPool) {\r\n        if (!object)\r\n            return;\r\n        // @ts-ignore\r\n        let className = object.__proto__.constructor.name;\r\n        object.onRecycled();\r\n        let array: IObjectPool[] = this._pool.get(className);\r\n        if (array == null) {\r\n            array = [];\r\n            this._pool.set(className, array);\r\n        }\r\n        array.push(object);\r\n\r\n        // console.log(\"对象池 recycle()\", className);\r\n    }\r\n\r\n    // /**\r\n    //  * 回收（Any用）\r\n    //  * @param object 对象\r\n    //  */\r\n    // public static recycle2(object: any) {\r\n    //     // @ts-ignore\r\n    //     let className = object.__proto__.constructor.name;\r\n    //     let array: IObjectPool[] = this._pool.get(className);\r\n    //     if (array == null) {\r\n    //         array = [];\r\n    //         this._pool.set(className, array);\r\n    //     }\r\n    //     array.push(object);\r\n    //\r\n    //     // console.log(\"对象池 recycle()\", className);\r\n    // }\r\n\r\n    public static clear() {\r\n        this._pool.clear();\r\n    }\r\n}"]}
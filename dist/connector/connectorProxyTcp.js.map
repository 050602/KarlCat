{"version":3,"file":"connectorProxyTcp.js","sourceRoot":"","sources":["../../src/connector/connectorProxyTcp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAGjC,wEAAgD;AAChD,sDAAmD;AACnD,oCAA+C;AAC/C,qDAAwD;AACxD,uDAAyC;AAGzC,IAAI,MAAM,GAAG,CAAC,CAAC;AACf;;GAEG;AACH,MAAa,YAAY;IAarB,YAAY,IAA0G;QAX/G,kBAAa,GAAoB,IAAW,CAAC;QAC7C,iBAAY,GAAW,IAAW,CAAC,CAAQ,mBAAmB;QAC9D,oBAAe,GAAW,IAAW,CAAC,CAAQ,uBAAuB;QAErE,kBAAa,GAAW,CAAC,CAAC,CAAG,iBAAiB;QAC7C,qBAAgB,GAAW,MAAM,CAAC,iBAAiB,CAAC;QACrD,qBAAgB,GAAW,CAAC,CAAC;QAC7B,cAAS,GAAG,KAAK,CAAC;QAClB,aAAQ,GAAW,CAAC,CAAC;QACrB,QAAG,GAAG,EAAE,CAAC,CAAI,kBAAkB;QAGlC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAExC,IAAI,eAAe,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QACxC,MAAM,GAAG,eAAe,CAAC,MAAM,IAAI,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC;QACzE,IAAI,OAAO,GAAG,eAAe,CAAC,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAC/D,IAAI,CAAC,aAAa,GAAG,CAAC,eAAe,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;QAC7D,IAAI,eAAe,CAAC,gBAAgB,IAAI,IAAI,EAAE;YAC1C,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC,gBAAgB,CAAC;SAC5D;QACD,IAAI,QAAQ,GAAG,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,QAAQ,IAAI,EAAE,EAAE;YAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;QAED,IAAA,mBAAS,EAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAG9F,mBAAmB;QACnB,IAAI,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;QACrC,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,uBAAa,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEtE,IAAI,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,aAAa,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;QACzG,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACtD,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,YAAY,CAAC,UAAU,4CAAoC,CAAC,CAAC,CAAC;QACnE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAEpC,IAAI,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE,WAAW,EAAE,IAAI,CAAC,aAAa,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;QACzH,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5D,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,eAAe,CAAC,UAAU,4CAAoC,CAAC,CAAC,CAAC;QACtE,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAE1C,4BAA4B;QAC5B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,IAAI,CAAC,YAAY,CAAC,UAAU,oDAA4C,CAAC,CAAC,CAAC;IAC/E,CAAC;IAEO,WAAW,CAAC,MAAmB;QACnC,IAAI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,EAAE;YAC/C,IAAI,CAAC,yBAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAE;gBACxC,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;gBAC7D,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACjB,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,OAAO;aACV;YACD,IAAI,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;SACtD;aAAM;YACH,IAAA,kBAAU,EAAC,uDAAuD,CAAC,CAAC;YACpE,MAAM,CAAC,KAAK,EAAE,CAAC;SAClB;IACL,CAAC;CACJ;AArED,oCAqEC;AAED,MAAM,YAAY;IAad,YAAY,SAAuB,EAAE,aAA8B,EAAE,MAAmB;QAZxF,YAAO,GAAY,IAAW,CAAC,CAAyB,UAAU;QAClE,kBAAa,GAAW,EAAE,CAAC;QAInB,kBAAa,GAAiB,IAAW,CAAC,CAAM,0BAA0B;QAC1E,mBAAc,GAAiB,IAAW,CAAC,CAAK,0BAA0B;QAC1E,cAAS,GAAG,KAAK,CAAC;QAClB,aAAQ,GAAW,CAAC,CAAC;QACrB,cAAS,GAAiB,IAAW,CAAC;QACtC,YAAO,GAAa,EAAE,CAAC;QAG3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;QACnC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,CAAG,4CAA4C;QACvE,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC,EAAE,KAAK,CAAC,CAAC;IACd,CAAC;IAEO,UAAU,CAAC,IAAY;QAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,IAAI,8CAAsC,EAAE,EAAS,cAAc;YACnE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACxB;aAAM;YACH,IAAI,CAAC,KAAK,EAAE,CAAC;SAChB;IACL,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,IAAY;QACvB,2BAA2B;QAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,IAAI,wCAAgC,EAAE,EAAgB,0BAA0B;YAChF,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC5C;aAAM,IAAI,IAAI,8CAAsC,EAAE,EAAS,YAAY;YACxE,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC5B;aAAM;YACH,IAAI,CAAC,KAAK,EAAE,CAAC;SAChB;IACL,CAAC;IAED;;OAEG;IACK,OAAO;QACX,IAAA,eAAO,EAAC,kBAAkB,CAAC,CAAC;QAC5B,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;QAClC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACjC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAClC,IAAI,CAAC,cAAc,GAAG,IAAW,CAAC;QAClC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED;;OAEG;IACK,SAAS,CAAC,IAAY;QAC1B,IAAI,GAAG,GAAsB,IAAW,CAAC;QACzC,IAAI;YACA,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACjD;QAAC,OAAO,CAAC,EAAE;SACX;QACD,IAAI,CAAC,GAAG,EAAE;YACN,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,OAAO;SACV;QACD,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;SAC1C;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;SAC7C;QAED,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACjC,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC7E;QACD,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IACK,SAAS;QACb,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,KAAK,CAAC,EAAE;YACpC,OAAO;SACV;QAED,wBAAwB;QACxB,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;SACjC;aAAM;YACH,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,GAAG,EAAE;gBAClC,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,iCAAiC;YACrC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;SACxC;IACL,CAAC;IAED;;OAEG;IACK,iBAAiB;QACrB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,GAAW;QACZ,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC1B;aAAM;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACzB;IACL,CAAC;IAEO,YAAY;QAChB,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;SAC3B;IACL,CAAC;IAED;;OAEG;IACH,KAAK;QACD,IAAI,CAAC,YAAY,EAAE,CAAA;QACnB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;CACJ","sourcesContent":["import * as crypto from \"crypto\";\r\nimport { Application } from \"../application\";\r\nimport { Session } from \"../components/session\";\r\nimport tcpServer from \"../components/tcpServer\";\r\nimport { SocketState } from \"../const/SocketState\";\r\nimport { logInfo, warningLog } from \"../LogTS\";\r\nimport { serversConfig } from \"../serverConfig/servers\";\r\nimport * as define from \"../util/define\";\r\nimport { I_clientManager, I_clientSocket, I_connectorConfig, SocketProxy } from \"../util/interfaceDefine\";\r\n\r\nlet maxLen = 0;\r\n/**\r\n * connector  tcp\r\n */\r\nexport class ConnectorTcp {\r\n    public app: Application;\r\n    public clientManager: I_clientManager = null as any;\r\n    public handshakeBuf: Buffer = null as any;        // Handshake buffer\r\n    public handshakeBufAll: Buffer = null as any;        // Handshake buffer all\r\n    public heartbeatBuf: Buffer;        // Heartbeat response buffer\r\n    public heartbeatTime: number = 0;   // Heartbeat time\r\n    private maxConnectionNum: number = Number.POSITIVE_INFINITY;\r\n    public nowConnectionNum: number = 0;\r\n    public sendCache = false;\r\n    public interval: number = 0;\r\n    public md5 = \"\";    // route array md5\r\n\r\n    constructor(info: { app: Application, clientManager: I_clientManager, config: I_connectorConfig, startCb: () => void }) {\r\n        this.app = info.app;\r\n        this.clientManager = info.clientManager;\r\n\r\n        let connectorConfig = info.config || {};\r\n        maxLen = connectorConfig.maxLen || define.some_config.SocketBufferMaxLen;\r\n        let noDelay = connectorConfig.noDelay === false ? false : true;\r\n        this.heartbeatTime = (connectorConfig.heartbeat || 0) * 1000;\r\n        if (connectorConfig.maxConnectionNum != null) {\r\n            this.maxConnectionNum = connectorConfig.maxConnectionNum;\r\n        }\r\n        let interval = Number(connectorConfig.interval) || 0;\r\n        if (interval >= 10) {\r\n            this.sendCache = true;\r\n            this.interval = interval;\r\n        }\r\n\r\n        tcpServer(info.app.serverInfo.clientPort, noDelay, info.startCb, this.newClientCb.bind(this));\r\n\r\n\r\n        // Handshake buffer\r\n        let cipher = crypto.createHash(\"md5\")\r\n        this.md5 = cipher.update(JSON.stringify(serversConfig)).digest(\"hex\");\r\n\r\n        let routeBuf = Buffer.from(JSON.stringify({ \"md5\": this.md5, \"heartbeat\": this.heartbeatTime * 0.001 }));\r\n        this.handshakeBuf = Buffer.alloc(routeBuf.length + 5);\r\n        this.handshakeBuf.writeUInt32BE(routeBuf.length + 1, 0);\r\n        this.handshakeBuf.writeUInt8(define.Server_To_Client.handshake, 4);\r\n        routeBuf.copy(this.handshakeBuf, 5);\r\n\r\n        let routeBufAll = Buffer.from(JSON.stringify({ \"md5\": this.md5, \"route\": \"\", \"heartbeat\": this.heartbeatTime * 0.001 }));\r\n        this.handshakeBufAll = Buffer.alloc(routeBufAll.length + 5);\r\n        this.handshakeBufAll.writeUInt32BE(routeBufAll.length + 1, 0);\r\n        this.handshakeBufAll.writeUInt8(define.Server_To_Client.handshake, 4);\r\n        routeBufAll.copy(this.handshakeBufAll, 5);\r\n\r\n        // Heartbeat response buffer\r\n        this.heartbeatBuf = Buffer.alloc(5);\r\n        this.heartbeatBuf.writeUInt32BE(1, 0);\r\n        this.heartbeatBuf.writeUInt8(define.Server_To_Client.heartbeatResponse, 4);\r\n    }\r\n\r\n    private newClientCb(socket: SocketProxy) {\r\n        if (this.nowConnectionNum < this.maxConnectionNum) {\r\n            if (!SocketState.Instance.openClientSocket) {\r\n                let buf = this.app.protoEncode(1008, 1, { num: 207 }, false);\r\n                socket.send(buf);\r\n                socket.close();\r\n                return;\r\n            }\r\n            new ClientSocket(this, this.clientManager, socket);\r\n        } else {\r\n            warningLog(\"socket num has reached the maxConnectionNum, close it\");\r\n            socket.close();\r\n        }\r\n    }\r\n}\r\n\r\nclass ClientSocket implements I_clientSocket {\r\n    session: Session = null as any;                         // Session\r\n    remoteAddress: string = \"\";\r\n    private connector: ConnectorTcp;\r\n    private clientManager: I_clientManager;\r\n    private socket: SocketProxy;                            // socket\r\n    private registerTimer: NodeJS.Timer = null as any;      // Handshake timeout timer\r\n    private heartbeatTimer: NodeJS.Timer = null as any;     // Heartbeat timeout timer\r\n    private sendCache = false;\r\n    private interval: number = 0;\r\n    private sendTimer: NodeJS.Timer = null as any;\r\n    private sendArr: Buffer[] = [];\r\n\r\n    constructor(connector: ConnectorTcp, clientManager: I_clientManager, socket: SocketProxy) {\r\n        this.connector = connector;\r\n        this.connector.nowConnectionNum++;\r\n        this.sendCache = connector.sendCache;\r\n        this.interval = connector.interval;\r\n        this.clientManager = clientManager;\r\n        this.socket = socket;\r\n        this.remoteAddress = socket.remoteAddress;\r\n        this.socket.maxLen = 50;   // Up to 50 byte of data when not registered\r\n        socket.once('data', this.onRegister.bind(this));\r\n        socket.on('close', this.onClose.bind(this));\r\n        this.registerTimer = setTimeout(() => {\r\n            this.close();\r\n        }, 10000);\r\n    }\r\n\r\n    private onRegister(data: Buffer) {\r\n        let type = data.readUInt8(0);\r\n        if (type === define.Client_To_Server.handshake) {        // shake hands\r\n            this.handshake(data);\r\n        } else {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Received data\r\n     */\r\n    private onData(data: Buffer) {\r\n        // logInfo(\"ondata\", data);\r\n        let type = data.readUInt8(0);\r\n        if (type === define.Client_To_Server.msg) {               // Ordinary custom message\r\n            this.clientManager.handleMsg(this, data);\r\n        } else if (type === define.Client_To_Server.heartbeat) {        // Heartbeat\r\n            this.heartbeat();\r\n            this.heartbeatResponse();\r\n        } else {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closed\r\n     */\r\n    private onClose() {\r\n        logInfo(\"OnSocker OnClose\");\r\n        this.connector.nowConnectionNum--;\r\n        clearTimeout(this.registerTimer);\r\n        clearTimeout(this.heartbeatTimer);\r\n        this.heartbeatTimer = null as any;\r\n        clearInterval(this.sendTimer);\r\n        this.sendArr = [];\r\n        this.clientManager.removeClient(this);\r\n    }\r\n\r\n    /**\r\n     * shake hands\r\n     */\r\n    private handshake(data: Buffer) {\r\n        let msg: { \"md5\": string } = null as any;\r\n        try {\r\n            msg = JSON.parse(data.subarray(1).toString());\r\n        } catch (e) {\r\n        }\r\n        if (!msg) {\r\n            this.close();\r\n            return;\r\n        }\r\n        if (msg.md5 === this.connector.md5) {\r\n            this.send(this.connector.handshakeBuf);\r\n        } else {\r\n            this.send(this.connector.handshakeBufAll);\r\n        }\r\n\r\n        clearTimeout(this.registerTimer);\r\n        this.heartbeat();\r\n        this.clientManager.addClient(this);\r\n        if (this.sendCache) {\r\n            this.sendTimer = setInterval(this.sendInterval.bind(this), this.interval);\r\n        }\r\n        this.socket.maxLen = maxLen;\r\n        this.socket.on('data', this.onData.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Heartbeat\r\n     */\r\n    private heartbeat() {\r\n        if (this.connector.heartbeatTime === 0) {\r\n            return;\r\n        }\r\n\r\n        // logInfo(\"heartbeat\");\r\n        if (this.heartbeatTimer) {\r\n            this.heartbeatTimer.refresh();\r\n        } else {\r\n            this.heartbeatTimer = setTimeout(() => {\r\n                this.close();\r\n                // logInfo(\"heartbeat Time out\");\r\n            }, this.connector.heartbeatTime * 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Heartbeat response\r\n     */\r\n    private heartbeatResponse() {\r\n        this.send(this.connector.heartbeatBuf);\r\n    }\r\n\r\n    /**\r\n     * send data\r\n     */\r\n    send(msg: Buffer) {\r\n        if (this.sendCache) {\r\n            this.sendArr.push(msg);\r\n        } else {\r\n            this.socket.send(msg);\r\n        }\r\n    }\r\n\r\n    private sendInterval() {\r\n        if (this.sendArr.length > 0) {\r\n            this.socket.send(Buffer.concat(this.sendArr));\r\n            this.sendArr.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * close\r\n     */\r\n    close() {\r\n        this.sendInterval()\r\n        this.socket.close();\r\n    }\r\n}\r\n"]}
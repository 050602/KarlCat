{"version":3,"file":"connectorKcp.js","sourceRoot":"","sources":["../../src/connector/connectorKcp.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport dgram from 'dgram';\r\nvar kcp = require('node-kcp');\r\nimport { Client_To_Server, ConnectorLockStep, SocketProxy } from \"./connectorLockStep\";\r\nimport { EventEmitter } from \"events\";\r\nimport { I_clientManager, I_clientSocket, I_connectorConfig } from '../util/interfaceDefine';\r\nimport { Session } from '../components/session';\r\nimport { errLog, logTest } from '../LogTS';\r\n\r\n\r\nlet udpClients: { [key: string]: ClientSocket } = {};\r\nlet closedClients: { [key: string]: { \"time\": number, \"kcpobj\": any } } = {};   // 被关闭了的连接。（kcp被关闭时，向客户端发送关闭消息，需要update驱动一会儿）\r\n\r\nexport function kcpServer(port: number, config: I_connectorConfig, connector: ConnectorLockStep, startCb: () => void) {\r\n    let svr = dgram.createSocket(\"udp4\");\r\n    let interval = connector.interval || 40;\r\n\r\n    function outputFunc(data: Buffer, size: number, context: I_kcpContext) {\r\n        svr.send(data, 0, size, context.port, context.address);\r\n    };\r\n\r\n    svr.on(\"message\", (msg, rinfo) => {\r\n        // console.log(\"on message\", msg, rinfo);\r\n        let client = udpClients[rinfo.address + rinfo.port];\r\n        if (!client) {\r\n            if (closedClients[rinfo.address + rinfo.port]) {    // 正在关闭中\r\n                return;\r\n            }\r\n\r\n            let context: I_kcpContext = {\r\n                address: rinfo.address,\r\n                port: rinfo.port\r\n            };\r\n            let kcpobj = new kcp.KCP(rinfo.port, context);//来自同一个连接的两个端点的` conv `必须相等。\r\n            kcpobj.nodelay(1, interval, 2, 1);\r\n            kcpobj.wndsize(256, 256);\r\n            kcpobj.output(outputFunc);\r\n\r\n            let socket = new UdpSocket(kcpobj, rinfo);\r\n            client = new ClientSocket(connector, connector.clientManager, socket);\r\n            udpClients[rinfo.address + rinfo.port] = client;\r\n\r\n            if (connector.nowConnectionNum >= connector.maxConnectionNum) {\r\n                console.warn(\"socket num has reached the maxConnectionNum, close it\");\r\n                client.close();\r\n                return;\r\n            }\r\n        }\r\n\r\n        client.socket.kcpobj.input(msg);\r\n    });\r\n\r\n    svr.on(\"error\", (e) => {\r\n        errLog(\"kcpSvr error\", e);\r\n        process.exit();\r\n    });\r\n    svr.on(\"close\", () => { });\r\n    svr.bind(port, () => {\r\n        startCb();\r\n        setInterval(updateFunc, interval);\r\n    });\r\n\r\n}\r\n\r\n/** kcp update 和 接收数据检测 */\r\nfunction updateFunc() {\r\n    let now = Date.now();\r\n    for (let x in udpClients) {\r\n        let client = udpClients[x];\r\n        client.socket.kcpobj.update(now);\r\n\r\n        let recv: Buffer = client.socket.kcpobj.recv();\r\n        if (recv) {\r\n            client.socket.emit(\"data\", recv);\r\n        }\r\n    }\r\n\r\n    for (let x in closedClients) {\r\n        let client = closedClients[x];\r\n        if (now > client.time) {\r\n            delete closedClients[x];\r\n            continue;\r\n        }\r\n        client.kcpobj.update(now);\r\n    }\r\n}\r\n\r\n\r\nexport class UdpSocket extends EventEmitter implements SocketProxy {\r\n    die: boolean = false;\r\n    remoteAddress: string = \"\";\r\n    len: number = 0;\r\n    maxLen: number = 0;\r\n    buffer: Buffer = Buffer.allocUnsafe(0);\r\n    socket: any = null;\r\n    kcpobj: any;\r\n    rinfo: dgram.RemoteInfo;\r\n\r\n    headLen = 0;\r\n    headBuf = null as any;\r\n\r\n    constructor(kcpobj: any, rinfo: dgram.RemoteInfo) {\r\n        super();\r\n        this.kcpobj = kcpobj;\r\n        this.rinfo = rinfo;\r\n        this.remoteAddress = rinfo.address + \"/\" + rinfo.port;\r\n    }\r\n\r\n    send(data: Buffer) {\r\n        // logTest(\"send Msg\", data);\r\n        // console.log(\"send Msg\", data);\r\n        this.kcpobj.send(data);\r\n    }\r\n\r\n    close() {\r\n        if (this.die) {\r\n            return;\r\n        }\r\n        this.die = true;\r\n\r\n        let rinfo = this.rinfo.address + this.rinfo.port;\r\n        delete udpClients[rinfo];\r\n        closedClients[rinfo] = { \"time\": Date.now() + 1000, \"kcpobj\": this.kcpobj };\r\n\r\n        this.emit(\"close\");\r\n    }\r\n}\r\n\r\n\r\nexport class ClientSocket implements I_clientSocket {\r\n    session: Session = null as any;                         // Session\r\n    remoteAddress: string = \"\";\r\n    private connector: ConnectorLockStep;\r\n    private clientManager: I_clientManager;\r\n    public socket: UdpSocket;                            // socket\r\n    private registerTimer: NodeJS.Timer = null as any;      // Handshake timeout timer\r\n    private heartbeatTimer: NodeJS.Timer = null as any;     // Heartbeat timeout timer\r\n    private sendCache = false;\r\n    private interval: number = 0;\r\n    private sendTimer: NodeJS.Timer = null as any;\r\n    private sendArr: Buffer[] = [];\r\n    private onDataFunc: (...args: any[]) => void;\r\n\r\n    constructor(connector: ConnectorLockStep, clientManager: I_clientManager, socket: UdpSocket) {\r\n        this.connector = connector;\r\n        this.connector.nowConnectionNum++;\r\n        // this.sendCache = connector.sendCache;\r\n        // this.interval = connector.interval;\r\n        this.clientManager = clientManager;\r\n        this.socket = socket;\r\n        this.remoteAddress = socket.remoteAddress;\r\n        socket.once('data', this.onRegister.bind(this));\r\n        socket.on('close', this.onClose.bind(this));\r\n\r\n        this.onDataFunc = this.onData.bind(this);\r\n\r\n        this.registerTimer = setTimeout(() => {\r\n            this.close();\r\n        }, 5000);\r\n    }\r\n\r\n    private onRegister(data: Buffer) {\r\n        // console.log(\"onRegister\", data);\r\n        let type = data.readUInt8(0);\r\n        if (type === Client_To_Server.handshake) {        // shake hands\r\n            this.handshake(data);\r\n        } else {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Received data\r\n     */\r\n    private onData(data: Buffer) {\r\n        // console.log(\"onData\", data);\r\n        let type = data.readUInt8(0);\r\n        if (type === Client_To_Server.msg) {               // Ordinary custom message\r\n            this.clientManager.handleMsg(this, data);\r\n        } else if (type === Client_To_Server.heartbeat) {        // Heartbeat\r\n            this.heartbeat();\r\n            this.heartbeatResponse();\r\n        } else if (type === Client_To_Server.close) {        // client close\r\n            this.close();\r\n        } else {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closed\r\n     */\r\n    private onClose() {\r\n        this.connector.nowConnectionNum--;\r\n        clearTimeout(this.registerTimer);\r\n        clearTimeout(this.heartbeatTimer);\r\n        this.heartbeatTimer = null as any;\r\n        clearInterval(this.sendTimer);\r\n        this.sendArr = [];\r\n        this.socket.off(\"data\", this.onDataFunc);\r\n        this.clientManager.removeClient(this);\r\n    }\r\n\r\n    /**\r\n     * shake hands\r\n     */\r\n    private handshake(data: Buffer) {\r\n        let msg: { \"md5\": string } = null as any;\r\n        try {\r\n            msg = JSON.parse(data.subarray(1).toString());\r\n        } catch (e) {\r\n            console.log(\"error:\", e);\r\n        }\r\n        if (!msg) {\r\n            this.close();\r\n            return;\r\n        }\r\n        if (msg.md5 === this.connector.md5) {\r\n            this.send(this.connector.handshakeBuf);\r\n        } else {\r\n            this.send(this.connector.handshakeBufAll);\r\n        }\r\n\r\n        clearTimeout(this.registerTimer);\r\n        this.heartbeat();\r\n        this.clientManager.addClient(this);\r\n        // if (this.sendCache) {\r\n        // this.sendTimer = setInterval(this.sendInterval.bind(this), this.interval);\r\n        // }\r\n        this.socket.on('data', this.onDataFunc);\r\n    }\r\n\r\n    /**\r\n     * Heartbeat\r\n     */\r\n    private heartbeat() {\r\n        if (this.connector.heartbeatTime === 0) {\r\n            return;\r\n        }\r\n        if (this.heartbeatTimer) {\r\n            this.heartbeatTimer.refresh();\r\n        } else {\r\n            this.heartbeatTimer = setTimeout(() => {\r\n                this.close();\r\n            }, this.connector.heartbeatTime * 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Heartbeat response\r\n     */\r\n    private heartbeatResponse() {\r\n        this.send(this.connector.heartbeatBuf);\r\n    }\r\n\r\n    /**\r\n     * send data\r\n     */\r\n    send(msg: Buffer) {\r\n        this.socket.send(msg);\r\n    }\r\n\r\n    private sendInterval() {\r\n        if (this.sendArr.length > 0) {\r\n            this.socket.send(Buffer.concat(this.sendArr));\r\n            this.sendArr.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * close\r\n     */\r\n    close() {\r\n        this.send(this.connector.beClosedBuf);\r\n        this.sendInterval();\r\n        this.socket.close();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface I_kcpContext {\r\n    \"port\": number,\r\n    \"address\": string\r\n}"]}
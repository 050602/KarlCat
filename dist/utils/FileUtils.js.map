{"version":3,"file":"FileUtils.js","sourceRoot":"","sources":["../../src/utils/FileUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,2CAA6B;AAC7B,oCAAgC;AAEnB,QAAA,WAAW,GAAG,SAAS,CAAC;AACxB,QAAA,gBAAgB,GAAG,sBAAsB,CAAC;AAC1C,QAAA,QAAQ,GAAG,MAAM,CAAC;AAClB,QAAA,UAAU,GAAG,QAAQ,CAAC;AACtB,QAAA,UAAU,GAAG,MAAM,CAAC;AACpB,QAAA,WAAW,GAAG,OAAO,CAAC;AACtB,QAAA,UAAU,GAAG,MAAM,CAAC;AAEjC,MAAa,SAAS;IAElB;;;;OAIG;IACI,MAAM,CAAC,OAAO,CAAC,GAAW;QAC7B,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YACpB,OAAO,IAAI,CAAC;SACf;aAAM;YACH,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE;gBACjC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBAClB,OAAO,IAAI,CAAC;aACf;SACJ;IACL,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,mBAAmB,CAAC,IAAY;QAC1C,IAAI;YACA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACpB,OAAO,IAAI,CAAC;SACf;QAAC,OAAO,CAAC,EAAE;YACR,QAAQ;YACR,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,SAAS,CAAC,SAAiB,EAAE,OAAe;QACtD,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,OAAO,CAAC,KAAK,CAAC,wBAAwB,SAAS,EAAE,CAAC,CAAC;SAC7D;QACD,IAAI;YACA,EAAE,CAAC,aAAa,CACZ,SAAS,EACT,OAAO,EACP;gBACI,QAAQ,EAAE,OAAO;aACpB,CACJ,CAAC;SACL;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACxB;IACL,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAY;QACrC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,GAAG,EAAE,IAAI;gBACzC,IAAI,GAAG,EAAE;oBACL,aAAa;oBACb,IAAA,cAAM,EAAC,SAAS,EAAE,IAAI,CAAC,CAAC;oBACxB,OAAO,CAAC,IAAI,CAAC,CAAC;oBACd,OAAO;iBACV;gBACD,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CAGJ;AAtED,8BAsEC","sourcesContent":["import * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport {errLog} from \"../LogTS\";\r\n\r\nexport const CONFIG_PATH = \"config/\";\r\nexport const CONFIG_JSON_PATH = \"config/TSConfig.json\";\r\nexport const MAP_PATH = \"Map/\";\r\nexport const SKILL_PATH = \"Skill/\";\r\nexport const PNG_SUFFIX = \".png\";\r\nexport const JSON_SUFFIX = \".json\";\r\nexport const TXT_SUFFIX = \".txt\";\r\n\r\nexport class FileUtils {\r\n\r\n    /**\r\n     * 创建路径\r\n     * 使用示例：utility.makeDir(path.join(__dirname, './mkdir/demo/test/'));\r\n     * @param {string} dir 路径\r\n     */\r\n    public static makeDir(dir: string) {\r\n        if (fs.existsSync(dir)) {\r\n            return true;\r\n        } else {\r\n            if (this.makeDir(path.dirname(dir))) {\r\n                fs.mkdirSync(dir);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 判断文件（夹）是否存在\r\n     * @param path\r\n     */\r\n    public static fileOrFolderIsExsit(path: string) {\r\n        try {\r\n            fs.accessSync(path);\r\n            return true;\r\n        } catch (e) {\r\n            // 文件不存在\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 写入文件\r\n     * @param {string} writePath 写入路径\r\n     * @param {*} content 内容\r\n     * @returns\r\n     */\r\n    public static writeFile(writePath: string, content: string) {\r\n        if (!content) {\r\n            return console.error(`Cannot write null. ->${writePath}`);\r\n        }\r\n        try {\r\n            fs.writeFileSync(\r\n                writePath,\r\n                content,\r\n                {\r\n                    encoding: \"utf-8\"\r\n                }\r\n            );\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    public static async readFile(path: string): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            fs.readFile(path, 'utf8', function (err, data) {\r\n                if (err) {\r\n                    // throw err;\r\n                    errLog(\"找不到指定文件\", path);\r\n                    resolve(null);\r\n                    return;\r\n                }\r\n                resolve(data);\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n}\r\n"]}
{"version":3,"file":"TickTask.js","sourceRoot":"","sources":["../../src/utils/TickTask.ts"],"names":[],"mappings":"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","sourcesContent":["import { Sigleton } from \"../core/Sigleton\";\r\nimport { errLog, logServer, warningLog } from \"../LogTS\";\r\n\r\n/**\r\n* 定时任务队列\r\n* @author An\r\n*/\r\nexport class TickTask extends Sigleton {\r\n\r\n    private TaskDic: Map<number, any[][]> = new Map();\r\n    private queueArr: Array<number> = [];\r\n\r\n\r\n\r\n    private _pause = false;\r\n    private isRuning = false;\r\n\r\n    public static get Instance(): TickTask {\r\n        return super.getInstance(TickTask);\r\n    }\r\n\r\n    private _time: NodeJS.Timer;\r\n    /**\r\n     * 定时队列\r\n     * 队列里执行方法的对象,理论上不应被销毁\r\n     */\r\n    public initInstance() {\r\n        //设置时间为从服务器获取的时间\r\n        // this._time = setInterval(() => {\r\n        //     TickTask.Instance.update();\r\n        // }, 333);\r\n        // this.isRuning = true;\r\n    };\r\n\r\n    public pauseSchedule() {\r\n        this._pause = true;\r\n    }\r\n\r\n    public resumeSchedule() {\r\n        this._pause = false;\r\n    }\r\n\r\n    public destoryInstance() {\r\n        this.isRuning = false;\r\n        this.TaskDic.clear();\r\n        this.queueArr = [];\r\n        // TimerTS.Instance.clear(this, this.update);\r\n        if (this._time) {\r\n            clearInterval(this._time);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 增加新的定时任务到队列\r\n     * @param timestamp 需要执行的具体时间戳，单位毫秒\r\n     * @param func 回调执行的方法\r\n     * @param data 回调参数\r\n     */\r\n    public pushTask(thisObj: any, callback: Function, timestamp: number, ...data: any[]) {\r\n        if (thisObj == null || callback == null) {\r\n            // console.log(\"定时执行的方法不能为空\");\r\n            errLog(\"定时执行的对象/方法不能为空\");\r\n            return false;\r\n        }\r\n\r\n        //任务已过期\r\n        if (isNaN(timestamp) || timestamp < Date.now()) {\r\n            warningLog(\"时间戳非法/该任务已过期\", timestamp,Date.now());\r\n            return false;\r\n        }\r\n\r\n        let newarr = [];\r\n        newarr.push(thisObj);\r\n        newarr.push(callback);\r\n        newarr.push(data);\r\n\r\n        logServer(\"pushTask\", newarr);\r\n\r\n        let arr = this.TaskDic.get(timestamp);\r\n        if (!arr) {\r\n            arr = [];\r\n            this.queueArr.push(timestamp);\r\n            this.arrDichotomy(this.queueArr);\r\n            this.TaskDic.set(timestamp, arr);\r\n        }\r\n\r\n        arr.push(newarr);\r\n\r\n        if (!this.isRuning) {\r\n            this._time = setInterval(() => {\r\n                TickTask.Instance.update();\r\n            }, 1000);\r\n            this.isRuning = true;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * 移除指定任务\r\n     * @param timestamp \r\n     * @param func\r\n     */\r\n    public removeTask(thisObj: any, func: Function, timestamp: number) {\r\n        let arr: Array<any> = this.TaskDic.get(timestamp);\r\n        if (arr) {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let obj = arr[i][0];\r\n                let func2 = arr[i][1];\r\n                // let cont2 = dic[i][2];\r\n\r\n                if (thisObj == obj && func2 == func) {\r\n                    arr.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if (arr.length == 0) {\r\n                this.TaskDic.delete(timestamp);\r\n                let index = this.queueArr.indexOf(timestamp);\r\n                this.queueArr.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private update() {\r\n        // LOG(\"UpdateNow\");\r\n        /**暂停 */\r\n        if (this._pause) {\r\n            return;\r\n        }\r\n\r\n        /**servertime == 0 */\r\n        // if (this._timestamp == 0) {\r\n        //     // console.log(\"未设置时间戳，时间戳非法，请重新设置服务器时间再pushTask\");\r\n        //     return;\r\n        // }\r\n\r\n        this.checkTask();\r\n    }\r\n\r\n    private checkTask() {\r\n        // LOG(\"checkTask\", this.queueArr);\r\n        if (this.queueArr.length > 0) {\r\n            let curServerTime = Date.now();\r\n            let second = this.queueArr[0];\r\n            // if (second != 84600000000)\r\n            // logTest(\"checkTask2\", curServerTime, second);\r\n            if (curServerTime >= second) {\r\n                let arr = this.TaskDic.get(this.queueArr[0]);\r\n                if (arr) {\r\n                    for (let key in arr) {\r\n                        let element = arr[key];\r\n                        let thisObj: Function = element[0];\r\n                        let func: Function = element[1];\r\n                        let data = element[2];\r\n                        if (func) {\r\n                            try {\r\n                                if (data) {\r\n                                    func.apply(thisObj, data);\r\n                                } else {\r\n                                    func.apply(thisObj);\r\n                                }\r\n                            } catch (error) {\r\n                                errLog(\"致命错误,TickTask执行的方法里存在错误\", second, \"\\n\", error);\r\n                            }\r\n                        }\r\n                    }\r\n                    arr = null;\r\n                }\r\n                this.TaskDic.delete(this.queueArr[0]);\r\n                this.queueArr.splice(0, 1);\r\n                this.checkTask();\r\n            }\r\n        } else {\r\n            //当发现无可执行任务时，自行销毁\r\n            clearInterval(this._time);\r\n            this.isRuning = false;\r\n        }\r\n    }\r\n\r\n\r\n    //二分法排序\r\n    public arrDichotomy(array: any[]) {\r\n        for (let i = 0; i < array.length; i++) {\r\n            let temp = array[i];//待插入到前面有序序列的值\r\n            let left = 0;//有序序列的左侧\r\n            let right = i - 1;//有序序列的右侧\r\n            let middle = 0;//有序序列的中间\r\n            while (left <= right) {\r\n                middle = Math.floor((left + right) / 2);//赋值\r\n                middle = (left + right) >> 1;//赋值\r\n                if (temp < array[middle]) {\r\n                    right = middle - 1;\r\n                } else {\r\n                    left = middle + 1;\r\n                }\r\n            }\r\n            for (let j = i - 1; j >= left; j--) {\r\n                //从i-1到left依次向后移动一位,等待temp值插入\r\n                array[j + 1] = array[j];\r\n            }\r\n            if (left != i) {\r\n                array[left] = temp;\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n}"]}
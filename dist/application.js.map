{"version":3,"file":"application.js","sourceRoot":"","sources":["../src/application.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * app class\r\n */\r\n\r\n\r\nimport { EventEmitter } from \"events\";\r\nimport * as path from \"path\";\r\nimport { BackendServer } from \"./components/backendServer\";\r\nimport { FrontendServer } from \"./components/frontendServer\";\r\nimport { RpcSocketPool } from \"./components/rpcSocketPool\";\r\nimport { Session } from \"./components/session\";\r\nimport { RpcEvent } from \"./event/RpcEvent\";\r\nimport { errLog } from \"./LogTS\";\r\nimport * as appUtil from \"./util/appUtil\";\r\nimport { I_clientSocket, I_encodeDecodeConfig, I_someConfig, loggerLevel, loggerType, ServerInfo } from \"./util/interfaceDefine\";\r\n\r\nexport class Application extends EventEmitter {\r\n    appName: string = \"hello world\";                                                         // App name\r\n    hasStarted: boolean = false;                                                             // Whether has started\r\n    main: string = \"\";                                                                       // Startup file\r\n    base: string = path.dirname((require.main as any).filename);                             // Root path\r\n\r\n    // routeConfig: string[] = [];                                                              // route.ts\r\n    masterConfig: ServerInfo = {} as ServerInfo;                                             // master.ts\r\n    serversConfig: { [serverType: string]: ServerInfo[] } = {};                              // servers.ts\r\n    // routeConfig2: string[][] = [];                                                           // route.ts  (split)\r\n\r\n    // * (只有前端服可调用)\r\n    clientNum: number = 0;                                                                   // Number of all socket connections\r\n    clients: { [uid: number]: I_clientSocket } = {};                                         // Sockets that have been binded\r\n    settings: { [key: string]: any } = {};                                                   // User set，get  \r\n\r\n    servers: { [serverType: string]: ServerInfo[] } = {};                                    // All user servers that are running\r\n    serversNameMap: { [serverName: string]: ServerInfo } = {};                               // All user servers that are running (Dictionary format)\r\n\r\n    serverInfo: ServerInfo = {} as ServerInfo;                                               // The configuration of this server\r\n    isDaemon: boolean = false;                                                               // Whether to run in the background\r\n    env: string = \"\";                                                                        // environment\r\n    serverName: string = \"\";                                                                   // Server name id, the unique identifier of the server\r\n    serverType: string = \"\";                                                                 // Server type\r\n    frontend: boolean = false;                                                               // Is it a front-end server\r\n    startMode: \"all\" | \"alone\" = \"all\";                                                      // Start Mode:  all / alone\r\n    startTime: number = 0;                                                                   // Start time\r\n\r\n    router: { [serverType: string]: (session: Session) => string } = {};                     // Pre-selection when routing messages to the backend\r\n    /**\r\n     * @param serverName 要发往的服务器的名称\r\n     * @param type 如果ServerId === * 时，会把RPC发送给该类型的服务器\r\n     * @param eventName RpcEvent\r\n     * @param args 参数们，此处的参数理应要能被JSON转为字符串\r\n     */\r\n    rpc: (serverName: string, type: string, eventName: RpcEvent, ...args: any[]) => void;// => Rpc = null as any;           \r\n    /**\r\n     * 请注意，要使用该方法，必须使用bindAwait\r\n   * @param serverName 要发往的服务器的名称\r\n   * @param type 如果ServerId === * 时，会报错，await不支持发往多个服务器\r\n   * @param eventName RpcEvent\r\n   * @param args 参数们，此处的参数理应要能被JSON转为字符串\r\n   * @return Promise<any>  \r\n   */                                 // Rpc packaging\r\n    rpcAwait: (serverName: string, eventName: RpcEvent, ...args: any[]) => Promise<any>;// Rpc await packaging\r\n    rpcDB: (serverName: string, eventName: string, ...args: any[]) => Promise<any>;// Rpc await DB\r\n    rpcPool: RpcSocketPool = new RpcSocketPool();                                            // Rpc socket pool\r\n\r\n    logger: (type: loggerType, level: loggerLevel, msg: string) => void = function () { };                      // Internal msg log output\r\n\r\n    msgEncode: Required<I_encodeDecodeConfig>[\"msgEncode\"] = null as any;\r\n    msgDecode: Required<I_encodeDecodeConfig>[\"msgDecode\"] = null as any;\r\n    protoEncode: Required<I_encodeDecodeConfig>[\"protoEncode\"] = null as any;\r\n    protoDecode: Required<I_encodeDecodeConfig>[\"protoDecode\"] = null as any;\r\n\r\n    someconfig: I_someConfig = {} as any;                                                    // Partially open configuration\r\n    noRpcMatrix: { [svrT_svrT: string]: boolean } = {};                                      // The configuration of not establishing a socket connection between servers\r\n    frontendServer: FrontendServer = null as any;\r\n    backendServer: BackendServer = null as any;\r\n\r\n    InstanceMap = new Map();\r\n\r\n    constructor() {\r\n        super();\r\n        appUtil.defaultConfiguration(this);\r\n    }\r\n\r\n    /**\r\n     * Start up\r\n     */\r\n    start() {\r\n        if (this.hasStarted) {\r\n            errLog(\"the app has already started\");\r\n            return;\r\n        }\r\n        this.hasStarted = true;\r\n        this.startTime = new Date().getTime();\r\n        appUtil.startServer(this);\r\n    }\r\n\r\n\r\n    setConfig(key: keyof I_someConfig, value: any): void {\r\n        this.someconfig[key] = value;\r\n        if (key === \"logger\") {\r\n            this.logger = value;\r\n        } else if (key === \"rpc\") {\r\n            let noRpcMatrix = value[\"noRpcMatrix\"] || {};\r\n            for (let svrT1 in noRpcMatrix) {\r\n                let arr = noRpcMatrix[svrT1];\r\n                for (let svrT2 of arr) {\r\n                    this.noRpcMatrix[appUtil.getNoRpcKey(svrT1, svrT2)] = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set key-value pairs\r\n     */\r\n    set(key: string | number, value: any) {\r\n        this.settings[key] = value;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Get the value corresponding to the key\r\n     */\r\n    get(key: string | number) {\r\n        return this.settings[key];\r\n    }\r\n\r\n    /**\r\n     * Delete a key-value pair\r\n     */\r\n    delete(key: string | number) {\r\n        delete this.settings[key];\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the server array according to the server type\r\n     */\r\n    getServersByType(serverType: string) {\r\n        return this.servers[serverType] || [];\r\n    }\r\n\r\n    /**\r\n     * Get a server configuration\r\n     */\r\n    getServerById(serverId: string) {\r\n        return this.serversNameMap[serverId];\r\n    }\r\n\r\n    /**\r\n     * * (只有前端服可调用)\r\n     * Routing configuration (deciding which backend to call)\r\n     * @param serverType Back-end server type\r\n     * @param routeFunc Configuration function\r\n     */\r\n    route(serverType: string, routeFunc: (session: Session) => string) {\r\n        this.router[serverType] = routeFunc;\r\n    }\r\n\r\n    /**\r\n     * (只有前端服可调用)\r\n     * get session by uid\r\n     */\r\n    getSession(uid: number) {\r\n        let client = this.clients[uid];\r\n        if (client) {\r\n            return client.session;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * * (只有前端服可调用)\r\n     * get all clients\r\n     */\r\n    getAllClients() {\r\n        return this.clients;\r\n    }\r\n\r\n    /**\r\n     * * (只有前端服可调用)\r\n     * 断开所有链接\r\n     */\r\n    public killAllClients() {\r\n        for (let uid in this.clients) {\r\n            //PS:这里是我项目用到，尝试发送一下被干掉\r\n            // let msgBuf = this.protoEncode(100, 9, { code: 4}, false);\r\n            // this.clients[uid].send(msgBuf);\r\n            this.clients[uid].close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 只有前端服可以使用\r\n     * Send a message to the client\r\n     * @param cmd   cmd\r\n     * @param msg   message\r\n     * @param uids  uid array [1,2]\r\n     */\r\n    sendMsgByUid(mainKey: number, sonKey: number, msg: any, uids: number[]) {\r\n        if (msg === undefined) {\r\n            msg = null;\r\n        }\r\n\r\n        let msgBuf = this.protoEncode(mainKey, sonKey, msg, false);\r\n        let client: I_clientSocket;\r\n        let i: number;\r\n        for (i = 0; i < uids.length; i++) {\r\n            if (uids[i] == null) {\r\n                continue;\r\n            }\r\n\r\n            client = this.clients[uids[i]];\r\n            if (client) {\r\n                client.send(msgBuf);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * * (只有前端服可调用)\r\n     * Send messages to all clients\r\n     * @param cmd cmd\r\n     * @param msg message\r\n     */\r\n    sendAll(mainKey: number, sonKey: number, msg: any) {\r\n        if (msg === undefined) {\r\n            msg = null;\r\n        }\r\n        // logInfo(\"app sendAll\", mainKey, sonKey, this.clients);\r\n        let data = this.protoEncode(mainKey, sonKey, msg, false);\r\n        let uid: string;\r\n        for (uid in this.clients) {\r\n            this.clients[uid].send(data)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 只有后端服可调用\r\n     * Send a message to the client\r\n     * @param cmd   cmd\r\n     * @param msg   message\r\n     * @param uidsid  uidsid array\r\n     */\r\n    sendMsgByUidSid(mainKey: number, sonKey: number, msg: any, uidsid: { \"uid\": number, \"sid\": string }[]) {\r\n        if (msg === undefined) {\r\n            msg = null;\r\n        }\r\n\r\n        this.backendServer.sendMsgByUidSid(mainKey, sonKey, msg, uidsid);\r\n    }\r\n\r\n    /**\r\n     * 只有后端服可调用 发送的消息都是TO C\r\n     * Send a message to the client\r\n     * @param cmd   cmd\r\n     * @param msg   message\r\n     * @param group   { sid : uid[] }\r\n     */\r\n    sendMsgByGroup(mainKey: number, sonKey: number, msg: any, group: { [sid: string]: number[] }) {\r\n        if (msg === undefined) {\r\n            msg = null;\r\n        }\r\n        this.backendServer.sendMsgByGroup(mainKey, sonKey, msg, group);\r\n    }\r\n\r\n    /**\r\n     * Configure server execution function\r\n     * @param type  Server type:  \"all\" or \"gate|connector\" like\r\n     * @param cb    Execution function\r\n     */\r\n    configure(type: string, cb: Function) {\r\n        if (type === \"all\") {\r\n            cb.call(this);\r\n            return;\r\n        }\r\n        let ts = type.split(\"|\");\r\n        for (let i = 0; i < ts.length; i++) {\r\n            if (this.serverType === ts[i].trim()) {\r\n                cb.call(this);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"]}
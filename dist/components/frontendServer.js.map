{"version":3,"file":"frontendServer.js","sourceRoot":"","sources":["../../src/components/frontendServer.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Application } from \"../application\";\r\nimport * as protocol from \"../connector/protocol\";\r\nimport { RegisterSigleton } from \"../register/RegisterSigleton\";\r\nimport { getNameByMainKey, isFrontend, ServerName } from \"../serverConfig/route\";\r\nimport { I_clientManager, I_clientSocket, I_connectorConstructor, I_encodeDecodeConfig, loggerLevel, loggerType, sessionCopyJson } from \"../util/interfaceDefine\";\r\nimport { KalrEvent } from \"../event/KalrEvent\";\r\nimport { TSEventCenter } from \"../utils/TSEventCenter\";\r\nimport { initSessionApp, Session } from \"./session\";\r\nimport define = require(\"../util/define\");\r\nimport { logInfo, logProto, warningLog } from \"../LogTS\";\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\n\r\nexport class FrontendServer {\r\n    private app: Application;\r\n    private clientManager: ClientManager;\r\n    constructor(app: Application) {\r\n        this.app = app;\r\n        initSessionApp(this.app);\r\n\r\n        let defaultEncodeDecode: Required<I_encodeDecodeConfig> = protocol.default_encodeDecode;\r\n\r\n        protocol.init(this.app);\r\n        defaultEncodeDecode = protocol.default_encodeDecode;\r\n\r\n        let encodeDecodeConfig = this.app.someconfig.encodeDecode || {};\r\n        this.app.protoEncode = encodeDecodeConfig.protoEncode || defaultEncodeDecode.protoEncode;\r\n        this.app.msgEncode = encodeDecodeConfig.msgEncode || defaultEncodeDecode.msgEncode;\r\n        this.app.protoDecode = encodeDecodeConfig.protoDecode || defaultEncodeDecode.protoDecode;\r\n        this.app.msgDecode = encodeDecodeConfig.msgDecode || defaultEncodeDecode.msgDecode;\r\n\r\n        this.clientManager = new ClientManager(app);\r\n    }\r\n\r\n    start(cb: Function) {\r\n\r\n        let self = this;\r\n        let startCb = function () {\r\n            let str = `listening at [${self.app.serverInfo.host}:${self.app.serverInfo.clientPort}]  ${self.app.serverName} (clientPort)`;\r\n            logInfo(str);\r\n            self.app.logger(loggerType.frame, loggerLevel.info, str);\r\n            cb && cb();\r\n        };\r\n\r\n\r\n        let mydog = require(\"../mydog\");\r\n        let connectorConfig = this.app.someconfig.connector || {};\r\n        let connectorConstructor: I_connectorConstructor = connectorConfig.connector || mydog.connector.Tcp;\r\n        // new connectorConstructor({\r\n        //     \"app\": this.app as any,\r\n        //     \"clientManager\": new ClientManager(this.app),\r\n        //     \"config\": this.app.someconfig.connector,\r\n        //     \"startCb\": startCb\r\n        // });\r\n        new connectorConstructor({\r\n            \"app\": this.app,\r\n            \"clientManager\": this.clientManager,\r\n            \"config\": this.app.someconfig.connector,\r\n            \"startCb\": startCb\r\n        });\r\n    }\r\n\r\n    // start(cb: Function) {\r\n    //     initSessionApp(this.app);\r\n\r\n    //     let self = this;\r\n    //     let startCb = function () {\r\n    //         let str = `listening at [${self.app.serverInfo.host}:${self.app.serverInfo.clientPort}]  ${self.app.serverId} (clientPort)`;\r\n    //         logInfo(str);\r\n    //         self.app.logger(loggerType.frame, loggerLevel.info, str);\r\n    //         cb && cb();\r\n    //     };\r\n    //     let defaultEncodeDecode: Required<I_encodeDecodeConfig>;\r\n\r\n    //     if (this.app.serverType == ServerName.background) {\r\n    //         protocolBG.init(this.app);\r\n    //         defaultEncodeDecode = protocolBG.bg_encodeDecode;\r\n    //     } else {\r\n    //         protocol.init(this.app);\r\n    //         defaultEncodeDecode = protocol.default_encodeDecode;\r\n    //     }\r\n\r\n\r\n    //     let mydog = require(\"../mydog\");\r\n    //     let connectorConfig = this.app.someconfig.connector || {};\r\n    //     let connectorConstructor: I_connectorConstructor = connectorConfig.connector as any || mydog.connector.Tcp;\r\n\r\n    //     let encodeDecodeConfig = this.app.someconfig.encodeDecode || {};\r\n    //     this.app.protoEncode = encodeDecodeConfig.protoEncode || defaultEncodeDecode.protoEncode;\r\n    //     this.app.msgEncode = encodeDecodeConfig.msgEncode || defaultEncodeDecode.msgEncode;\r\n    //     this.app.protoDecode = encodeDecodeConfig.protoDecode || defaultEncodeDecode.protoDecode;\r\n    //     this.app.msgDecode = encodeDecodeConfig.msgDecode || defaultEncodeDecode.msgDecode;\r\n\r\n    //     new connectorConstructor({\r\n    //         \"app\": this.app as any,\r\n    //         \"clientManager\": new ClientManager(this.app),\r\n    //         \"config\": this.app.someconfig.connector,\r\n    //         \"startCb\": startCb\r\n    //     });\r\n    // }\r\n\r\n    /**\r\n     * Sync session\r\n     */\r\n    applySession(data: Buffer) {\r\n        let session = BSON.deserialize(data.subarray(1)) as sessionCopyJson;\r\n        let client = this.app.clients[session.uid];\r\n        if (client) {\r\n            client.session.applySession(session.settings);\r\n        }\r\n    }\r\n    /**\r\n     * The front-end server forwards the message of the back-end server to the client\r\n     */\r\n    sendMsgByUids(data: Buffer) {\r\n        let uidsLen = data.readUInt16BE(1);\r\n        let msgBuf = data.subarray(3 + uidsLen * 4);\r\n        let clients = this.app.clients;\r\n        let client: I_clientSocket;\r\n        let i: number;\r\n\r\n\r\n        // console.log(\"sendMsgByUids\", uidsLen, this.app.serverId);\r\n        for (i = 0; i < uidsLen; i++) {\r\n            let idddd = data.readUInt32BE(3 + i * 4);\r\n\r\n            client = clients[idddd];\r\n\r\n            if (client) {\r\n                client.send(msgBuf);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction clientOnOffCb() {\r\n\r\n}\r\n\r\nclass ClientManager implements I_clientManager {\r\n    private app: Application;\r\n    private serverType: string = \"\";\r\n    private router: { [serverType: string]: (session: Session) => string };\r\n    private clientOnCb: (session: Session) => void = null as any;\r\n    private clientOffCb: (session: Session) => void = null as any;\r\n    private cmdFilter: (session: Session, mainKey: number, sonKey: number) => boolean = null as any;\r\n    private proto100Time: Map<string, number>;//key roleUid  value上一个10秒的时间戳\r\n    private proto100Count: Map<string, number>;//key roleUid  value上一个10秒的时间戳\r\n    private protoTime: Map<number, number>;//key roleUid  value上一个10秒的时间戳\r\n    private protoCount: Map<number, number>;//key roleUid  最近10秒的执行次数  按每秒6条，理论上最多60条\r\n    constructor(app: Application) {\r\n        this.app = app;\r\n        this.serverType = app.serverType; 1\r\n        this.router = this.app.router;\r\n        this.protoTime = new Map();\r\n        this.protoCount = new Map();\r\n        this.proto100Time = new Map();\r\n        this.proto100Count = new Map();\r\n        let connectorConfig = this.app.someconfig.connector || {};\r\n        this.clientOnCb = connectorConfig.clientOnCb || clientOnOffCb;\r\n        this.clientOffCb = connectorConfig.clientOffCb || clientOnOffCb;\r\n        this.cmdFilter = connectorConfig.cmdFilter as any || null;\r\n        this.loadHandler();\r\n    }\r\n\r\n    /**\r\n     * Front-end server load routing processing\r\n     */\r\n    private loadHandler() {\r\n        RegisterSigleton.initForntend(this);\r\n    }\r\n\r\n    public initMsgHandler(sigleton: any) {\r\n        sigleton[\"ServerType\"] = this.serverType;\r\n    }\r\n\r\n\r\n    addClient(client: I_clientSocket) {\r\n        if (client.session) {\r\n            this.app.logger(loggerType.frame, loggerLevel.warn, \"frontendServer -> the I_client has already been added, close it\");\r\n            client.close();\r\n            return;\r\n        }\r\n        this.app.clientNum++;\r\n\r\n        let session = new Session(this.app.serverName);\r\n        session.socket = client;\r\n        client.session = session;\r\n        this.clientOnCb(session as any);\r\n    }\r\n\r\n    removeClient(client: I_clientSocket) {\r\n        let session = client.session;\r\n        if (!session) {\r\n            return;\r\n        }\r\n\r\n        delete this.app.clients[session.uid];\r\n        this.app.clientNum--;\r\n\r\n        client.session = null as any;\r\n        session.socket = null as any;\r\n        this.clearQueue(session.uid);\r\n        this.clientOffCb(session as any);\r\n    }\r\n\r\n\r\n    public protoQueue: Map<number, any[][]> = new Map();\r\n    handleMsg(client: I_clientSocket, msgBuf: Buffer) {\r\n        try {\r\n            if (!client.session) {\r\n                this.app.logger(loggerType.frame, loggerLevel.warn, \"frontendServer -> cannot handle msg before added, close it\");\r\n                client.close();\r\n                return;\r\n            }\r\n\r\n            let data = this.app.protoDecode(msgBuf);\r\n            // logProto(\">>>>>>>>>>>>>>>\" + this.app.serverId + \" 收到消息\", data.mainKey + \"-\" + data.sonKey);\r\n            //目前没有在使用过滤，因此直接屏蔽相关代码\r\n            // if (this.cmdFilter && this.cmdFilter(client.session, data.mainKey, data.sonKey)) {\r\n            //     return;\r\n            // }\r\n            //  如果该协议是发给前端服的，就前端自己处理\r\n\r\n\r\n            //TODO 校验token合法性\r\n            if (isFrontend(data.mainKey)) {\r\n                //此处返回的是Protobuf的结构体，而不是Buffer\r\n                //同IP防DDOS\r\n                let ip = client.session.getIp();\r\n                let time = this.proto100Time.get(ip);\r\n                let time2 = Date.now();\r\n                if (time) {\r\n                    let cha = time2 - time;\r\n                    if (cha > 10000) {\r\n                        this.proto100Time.set(ip, time2);\r\n                        this.proto100Count.set(ip, 1);\r\n                    } else {\r\n                        let count = this.proto100Count.get(ip);\r\n                        if (count > 15) {\r\n                            warningLog(\"理论上十秒内，不应该超过请求15次协议 ip:\", ip, data.mainKey, data.sonKey);\r\n                            return;\r\n                        }\r\n                        this.proto100Count.set(ip, count + 1)\r\n                    }\r\n                } else {\r\n                    this.proto100Time.set(ip, time2);\r\n                    this.proto100Count.set(ip, 1);\r\n                }\r\n                \r\n                let msg = this.app.msgDecode(data.mainKey, data.sonKey, data.msg, true);\r\n                logProto(\">>>>>>>>>>>>>>>\" + this.app.serverName + \" 收到消息\", data.mainKey + \"-\" + data.sonKey, client.session.uid, msg);\r\n                if (client.session.uid) {\r\n                    let queue = this.protoQueue.get(client.session.uid);\r\n                    if (!queue) {\r\n                        queue = [];\r\n                        this.protoQueue.set(client.session.uid, queue);\r\n                    }\r\n                    queue.push([data.mainKey, data.sonKey, msg, client]);\r\n                    if (queue.length == 1) {\r\n                        this.doQueue(client.session.uid);\r\n                    }\r\n                } else {\r\n                    TSEventCenter.Instance.event(KalrEvent.FrontendServerDoFuntion + data.mainKey + \"_\" + data.sonKey, msg, client.session, this.callBack(client, data.mainKey, data.sonKey), this.otherCallBack(client));\r\n                }\r\n                // TSEventCenter.Instance.event(KalrEvent.FrontendServerDoFuntion + data.mainKey + \"_\" + data.sonKey, msg, client.session, this.callBack(client, data.mainKey, data.sonKey), this.otherCallBack(client));\r\n            } else {\r\n                let uid = client.session.uid;\r\n                let time = this.protoTime.get(uid);\r\n                let time2 = Date.now();\r\n                if (time) {\r\n                    let cha = time2 - time;\r\n                    if (cha > 10000) {\r\n                        this.protoTime.set(uid, time2);\r\n                        this.protoCount.set(uid, 1);\r\n                    } else {\r\n                        let count = this.protoCount.get(uid);\r\n                        if (count > 100) {\r\n                            warningLog(\"理论上十秒内，不应该超过请求100次协议 Uid,ip\", uid, client.session.getIp(), data.mainKey, data.sonKey);\r\n                            return;\r\n                        }\r\n                        this.protoCount.set(uid, count + 1)\r\n                    }\r\n                } else {\r\n                    this.protoTime.set(uid, time2);\r\n                    this.protoCount.set(uid, 1);\r\n                }\r\n\r\n\r\n                //  如果该协议是发给后端服的，就抛出到对应路由 如下面注释，当协议不属于前端服时，消息会根据route函数，转发给对应的服务器\r\n                this.doRemote(data, client.session);\r\n\r\n                let msg = this.app.msgDecode(data.mainKey, data.sonKey, data.msg, true);\r\n                logProto(\">>>>>>>>>>>>>>>\" + this.app.serverName + \" 收到消息\", data.mainKey + \"-\" + data.sonKey, client.session.uid, msg);\r\n\r\n                // 当客户端给后端服务器发消息时，需要提供路由函数以决定该消息发到哪个服务器\r\n                // app.route(ServerName.connector, (session: Session) => {\r\n                // return ServerName.connector + \"-\" + session.get(\"serverId\");\r\n                // });\r\n            }\r\n        } catch (e: any) {\r\n            this.app.logger(loggerType.msg, loggerLevel.error, e.stack);\r\n        }\r\n    }\r\n\r\n    public clearQueue(uid: number) {\r\n        let queue = this.protoQueue.get(uid);\r\n        if (queue) {\r\n            queue = [];\r\n            this.protoQueue.delete(uid);\r\n        }\r\n    }\r\n\r\n    private async doQueue(uid: number) {\r\n        let queue = this.protoQueue.get(uid);\r\n        let count = 0;\r\n        while (queue.length > 0) {\r\n            count++;\r\n            if (count > 30) {\r\n                warningLog(\"执行消息队列超过了30次尚未跳出\");\r\n                break;\r\n            }\r\n            let arr = queue.shift();\r\n            await TSEventCenter.Instance.eventAsync(KalrEvent.FrontendServerDoFuntion + arr[0] + \"_\" + arr[1], arr[2], arr[3].session, this.callBack(arr[3], arr[0], arr[1]), this.otherCallBack(arr[3]));\r\n            // await TSEventCenter.Instance.eventAsync(KalrEvent.BackendServerDoFuntion + arr[0] + \"_\" + arr[1], arr[2], arr[3], this.callBack(arr[4], arr[0], arr[1], uid));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback  \r\n     */\r\n    private callBack(client: I_clientSocket, mainKey: number, sonKey: number) {\r\n        let self = this;\r\n        return function (msg: any) {\r\n            // logInfo(\"frone  callback\", mainKey, sonKey, msg);\r\n            if (msg === undefined) {\r\n                msg = null;\r\n            }\r\n            //callback都是给前端的，因此直接TOS = False\r\n            logProto(\"<<<<<<<<<<<<<<< 发送消息\", mainKey + \"-\" + sonKey, client.session && client.session.uid, msg);\r\n            let buf = self.app.protoEncode(mainKey, sonKey, msg, false);\r\n            client.send(buf);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * otherCallBack  类似next的用法，实现了 sendMsgByUidSid\r\n    */\r\n    private otherCallBack(client: I_clientSocket) {\r\n        let self = this;\r\n        return function (msg: any, mainKey: number, sonKey: number) {\r\n            // logInfo(\"frone  callback\", mainKey, sonKey, msg);\r\n            if (msg === undefined) {\r\n                msg = null;\r\n            }\r\n            //callback都是给前端的，因此直接TOS = False\r\n            logProto(\"<<<<<<<<<<<<<<< 发送消息\", mainKey + \"-\" + sonKey, msg);\r\n            let buf = self.app.protoEncode(mainKey, sonKey, msg, false);\r\n            client.send(buf);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理Gate转发到后端服逻辑\r\n     * Forward client messages to the backend server\r\n     */\r\n    private doRemote(msg: { mainKey: number, sonKey: number, \"msg\": Buffer }, session: Session) {\r\n        let name = getNameByMainKey(msg.mainKey);\r\n        // logInfo(\"doRemote\", msg.mainKey, name, this.router);\r\n        let id = this.router[name](session);\r\n        let socket = this.app.rpcPool.getSocket(id);\r\n\r\n        logInfo(\"客户端发送协议从前端服转发到后端服\", msg.mainKey, name, id, socket == null);\r\n        if (!socket) {\r\n            return;\r\n        }\r\n        let svr = this.app.serversNameMap[id];\r\n        if (svr.serverType !== name || svr.frontend) {\r\n            this.app.logger(loggerType.msg, loggerLevel.warn, \"frontendServer -> illegal remote\");\r\n            return;\r\n        }\r\n        let sessionBuf = session.sessionBuf;\r\n        let buf = Buffer.allocUnsafe(11 + sessionBuf.length + msg.msg.length);\r\n        buf.writeUInt32BE(7 + sessionBuf.length + msg.msg.length, 0);//消息总长度\r\n        buf.writeUInt8(define.Rpc_Msg.clientMsgIn, 4);\r\n        buf.writeUInt16BE(sessionBuf.length, 5);\r\n\r\n        sessionBuf.copy(buf, 7);\r\n        buf.writeUInt16BE(msg.mainKey, 7 + sessionBuf.length);//38+7 =  45\r\n        buf.writeUInt16BE(msg.sonKey, 9 + sessionBuf.length);//38+9 = 47\r\n        msg.msg.copy(buf, 11 + sessionBuf.length); //38+11 = 49 从49位开始复制\r\n        socket.send(buf);\r\n    }\r\n}"]}
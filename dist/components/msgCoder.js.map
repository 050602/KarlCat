{"version":3,"file":"msgCoder.js","sourceRoot":"","sources":["../../src/components/msgCoder.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\nimport { Application } from \"../application\";\r\nimport define = require(\"../util/define\");\r\nimport { loggerLevel, loggerType, SocketProxy } from \"../util/interfaceDefine\";\r\n\r\nlet app: Application = null as any;\r\nexport function msgCoderSetApp(_app: Application) {\r\n    app = _app;\r\n}\r\n\r\n/**\r\n * Unpack\r\n */\r\nexport function decode(socket: SocketProxy, msg: Buffer) {\r\n    let readLen = 0;\r\n    while (readLen < msg.length) {\r\n        if (socket.len === 0) // data length is unknown\r\n        {\r\n            socket.headBuf[socket.headLen] = msg[readLen];\r\n            socket.headLen++;\r\n            readLen++;\r\n            if (socket.headLen === 4) {\r\n                socket.len = socket.headBuf.readUInt32BE(0);\r\n                if (socket.len > socket.maxLen || socket.len === 0) {\r\n                    app.logger(loggerType.frame, loggerLevel.error, \"socket data length is longer then \" + socket.maxLen + \" , nowlen : \" + socket.len + \", close it, \" + socket.remoteAddress);\r\n                    socket.close();\r\n                    return;\r\n                }\r\n                if (msg.length - readLen >= socket.len) { // data coming all\r\n                    socket.emit(\"data\", msg.subarray(readLen, readLen + socket.len));\r\n                    readLen += socket.len;\r\n                    socket.len = 0;\r\n                    socket.headLen = 0;\r\n                } else {\r\n                    socket.buffer = Buffer.allocUnsafe(socket.len);\r\n                }\r\n            }\r\n        }\r\n        else if (msg.length - readLen < socket.len)\t// data not coming all\r\n        {\r\n            msg.copy(socket.buffer, socket.buffer.length - socket.len, readLen);\r\n            socket.len -= (msg.length - readLen);\r\n            readLen = msg.length;\r\n        }\r\n        else { // data coming all\r\n            msg.copy(socket.buffer, socket.buffer.length - socket.len, readLen, readLen + socket.len);\r\n            socket.emit(\"data\", socket.buffer);\r\n            readLen += socket.len;\r\n            socket.len = 0;\r\n            socket.headLen = 0;\r\n            socket.buffer = null as any;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Part of the internal communication message format\r\n */\r\nexport function encodeInnerData(data: any) {\r\n    // console.log(\"encodeInnerData data\", data);\r\n    let dataBuf: Buffer = BSON.serialize(data);\r\n    // console.log(\"encoode\", dataBuf);\r\n    let data2 = BSON.deserialize(dataBuf);\r\n    // console.log(\"decoode\", data2);\r\n    let buffer = Buffer.allocUnsafe(dataBuf.length + 4);\r\n    buffer.writeUInt32BE(dataBuf.length, 0);\r\n    dataBuf.copy(buffer, 4);\r\n    return buffer;\r\n};\r\n\r\n\r\n/**\r\n *  Back-end server, the message format sent to the front-end server\r\n *\r\n *     [4]        [1]      [2]       [...]    [...]\r\n *  allMsgLen   msgType  uidBufLen   uids   clientMsgBuf\r\n *\r\n *  The clientMsgBuf is sent directly to the client by the front-end server\r\n */\r\n\r\nexport function encodeRemoteData(uids: number[], dataBuf: Buffer) {\r\n    // console.log(\"encode远程消息\", uids, dataBuf.length);\r\n    let uidsLen = uids.length * 4;\r\n    let buf = Buffer.allocUnsafe(7 + uidsLen + dataBuf.length);\r\n    buf.writeUInt32BE(3 + uidsLen + dataBuf.length, 0);\r\n    buf.writeUInt8(define.Rpc_Msg.clientMsgOut, 4);\r\n    buf.writeUInt16BE(uids.length, 5);\r\n    for (let i = 0; i < uids.length; i++) {\r\n        buf.writeUInt32BE(uids[i], 7 + i * 4);\r\n    }\r\n    dataBuf.copy(buf, 7 + uidsLen);\r\n    return buf;\r\n}"]}
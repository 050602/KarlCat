{"version":3,"file":"rpcService.js","sourceRoot":"","sources":["../../src/components/rpcService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * rpc connection management, sending rpc messages\r\n */\r\n\r\n\r\nimport { Application } from \"../application\";\r\nimport { RpcEvent } from \"../event/RpcEvent\";\r\nimport { errLog, logInfo, logRPC } from \"../LogTS\";\r\nimport { I_rpcMsg, I_rpcTimeout, rpcErr } from \"../util/interfaceDefine\";\r\nimport { TSEventCenter } from \"../utils/TSEventCenter\";\r\nimport define = require(\"../util/define\");\r\n// import BSON from \"bson\";\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\n\r\nlet app: Application;\r\n// let msgHandler: { [filename: string]: any } = {};\r\nlet rpcId = 1;  // Must start from 1, not 0\r\nlet rpcRequest: { [id: number]: I_rpcTimeout } = {};\r\nlet rpcTimeMax: number = 10 * 1000; //overtime time\r\nlet outTime = 0;    // Current time + timeout\r\nlet msgQueueDic: { [serverId: string]: { \"rpcTimeout\": I_rpcTimeout | null, \"buf\": Buffer, \"time\": number }[] } = {};\r\nlet msgCacheLength = 5000;\r\nlet rpc: rpc_create;\r\n\r\n/**\r\n * init\r\n * @param _app \r\n */\r\nexport function init(_app: Application) {\r\n    app = _app;\r\n    let rpcConfig = app.someconfig.rpc || {};\r\n    let cacheLen = parseInt(rpcConfig.msgCacheLength as any);\r\n    if (cacheLen >= 0) {\r\n        msgCacheLength = cacheLen;\r\n    }\r\n\r\n    let timeout = Number(rpcConfig.timeout) || 0;\r\n    if (timeout >= 5) {\r\n        rpcTimeMax = timeout * 1000;\r\n    }\r\n\r\n\r\n    outTime = Date.now() + rpcTimeMax;\r\n    setInterval(() => {\r\n        outTime = Date.now() + rpcTimeMax;\r\n    }, 100);\r\n    setInterval(checkTimeout, 2000);\r\n\r\n    rpc = new rpc_create();\r\n}\r\n\r\nexport function rpcOnNewSocket(sid: string) {\r\n    let queue = msgQueueDic[sid];\r\n    if (!queue) {\r\n        return;\r\n    }\r\n    for (let one of queue) {\r\n        sendTo(sid, one.rpcTimeout, one.buf);\r\n    }\r\n    queue.length = 0;\r\n}\r\n\r\n\r\n/**\r\n * Process rpc messages\r\n * \r\n *     [1]         [1]      [...]    [...]      [...]\r\n *   msgType    rpcBufLen   rpcBuf   msgBuf    bufLast\r\n */\r\nexport function handleMsg(sid: string, bufAll: Buffer) {\r\n    let rpcBufLen = bufAll.readUInt8(1);\r\n    // logInfo(\"RPC handleMsg>>>>>\", app.serverId, bufAll.slice(2, 2 + rpcBufLen).toString(), \"<<<<< End\");\r\n    let rpcMsg: I_rpcMsg = BSON.deserialize(bufAll.subarray(2, 2 + rpcBufLen)) as I_rpcMsg;\r\n    let msg: any[];\r\n    // console.log(\"收到RPC\", sid, rpcMsg);\r\n    if (rpcMsg.len === undefined) {\r\n        msg = BSON.deserialize(bufAll.subarray(2 + rpcBufLen)) as any;\r\n        msg = Object.values(msg);\r\n    } else {\r\n        msg = BSON.deserialize(bufAll.subarray(2 + rpcBufLen, bufAll.length - rpcMsg.len)) as any;\r\n        msg = Object.values(msg);\r\n        msg.push(bufAll.subarray(bufAll.length - rpcMsg.len));\r\n    }\r\n\r\n    if (!rpcMsg.cmd) {\r\n        let timeout = rpcRequest[rpcMsg.id as number];\r\n        if (timeout) {\r\n            delete rpcRequest[rpcMsg.id as number];\r\n            timeout.cb(...msg);\r\n        }\r\n    } else {\r\n        logRPC(\"收到RPC\", app.serverName, sid, rpcMsg.cmd);\r\n        let cmd = rpcMsg.cmd;\r\n        if (rpcMsg.id) {\r\n            msg.push(getCallBackFunc(sid, rpcMsg.id));\r\n        }\r\n        // msgHandler[cmd[0]][cmd[1]](...msg);\r\n        TSEventCenter.Instance.event(cmd, ...msg);\r\n    }\r\n}\r\n\r\nexport async function handleMsgAwait(sid: string, bufAll: Buffer) {\r\n    let rpcBufLen = bufAll.readUInt8(1);\r\n    let rpcMsg: I_rpcMsg = BSON.deserialize(bufAll.subarray(2, 2 + rpcBufLen)) as I_rpcMsg;\r\n    let msg: any[];\r\n    if (rpcMsg.len === undefined) {\r\n        msg = BSON.deserialize(bufAll.subarray(2 + rpcBufLen));\r\n        msg = Object.values(msg);\r\n    }\r\n    else {\r\n        msg = BSON.deserialize(bufAll.subarray(2 + rpcBufLen, bufAll.length - rpcMsg.len));\r\n        msg = Object.values(msg);\r\n        msg.push(bufAll.subarray(bufAll.length - rpcMsg.len));\r\n    }\r\n\r\n    if (!rpcMsg.cmd) {\r\n        let timeout = rpcRequest[rpcMsg.id as number];\r\n        if (timeout) {\r\n            delete rpcRequest[rpcMsg.id as number];\r\n            timeout.cb(msg);\r\n        }\r\n    } else {\r\n        let data = await TSEventCenter.Instance.eventAsync(rpcMsg.cmd, ...msg);\r\n        let socket = app.rpcPool.getSocket(sid);\r\n        if (!socket) {\r\n            return;\r\n        }\r\n        if (data === undefined) {\r\n            data = null;\r\n        }\r\n\r\n\r\n        if (data === undefined) {\r\n            data = null;\r\n        }\r\n        // let bufEnd: Buffer;\r\n        // if (data instanceof Buffer) {\r\n        //     bufEnd = getRpcMsg({ \"id\": rpcMsg.id }, Buffer.allocUnsafe(0), data, define.Rpc_Msg.rpcMsgAwait);\r\n        // } else if (data instanceof Array && data[data.length - 1] instanceof Buffer) {\r\n        //     let tmpRes = [...data];\r\n        //     let buf: Buffer = tmpRes.pop();\r\n        //     bufEnd = getRpcMsg({ \"id\": rpcMsg.id }, Buffer.from(JSON.stringify(tmpRes)), buf, define.Rpc_Msg.rpcMsgAwait);\r\n        // } else {\r\n        //     bufEnd = getRpcMsg({ \"id\": rpcMsg.id }, Buffer.from(JSON.stringify(data)), null as any, define.Rpc_Msg.rpcMsgAwait);\r\n        // }\r\n        // sendTo(sid, null, bufEnd);\r\n\r\n        // if (data instanceof Buffer) {\r\n        //     socket.send(getRpcMsg({ \"id\": rpcMsg.id }, Buffer.allocUnsafe(0), data, define.Rpc_Msg.rpcMsgAwait));\r\n        // } else if (data instanceof Array && data[data.length - 1] instanceof Buffer) {\r\n        //     let tmpRes = [...data];\r\n        //     let buf: Buffer = tmpRes.pop();\r\n        //     socket.send(getRpcMsg({ \"id\": rpcMsg.id }, Buffer.from(BSON.serialize(tmpRes)), buf, define.Rpc_Msg.rpcMsgAwait));\r\n        // } else {\r\n        //以上两种情况，目前皆无可能\r\n        let bufEnd = getRpcMsg({ \"id\": rpcMsg.id }, Buffer.from(BSON.serialize(data)),/* null as any,*/ define.Rpc_Msg.rpcMsgAwait);\r\n        sendTo(sid, null, bufEnd);\r\n        // }\r\n    }\r\n}\r\n\r\n/**\r\n * rpc structure\r\n */\r\nclass rpc_create {\r\n    // private toId: string = \"\";\r\n    // private notify: boolean = false;\r\n\r\n    // private rpcObj: Rpc | {} = {};\r\n    // private rpcObjAwait: Rpc | {} = {};\r\n\r\n    constructor() {\r\n        this.loadRemoteMethod();\r\n    }\r\n\r\n    rpcSend(sid: string, type: string, eventName: RpcEvent, ...args: any[]) {\r\n        // console.log(\"rpcSend\", sid, type, eventName);\r\n        rpc.send(sid, { \"serverType\": type, \"file_method\": eventName }, args);\r\n    }\r\n\r\n\r\n    rpcAwaitSend(sid: string, type: string, eventName: RpcEvent, ...args: any[]): Promise<any[]> {\r\n        // console.log(\"rpcSend\", sid, type, eventName);\r\n        return rpc.sendAwait(sid, { \"serverType\": type, \"file_method\": eventName }, args);\r\n    }\r\n\r\n    loadRemoteMethod() {\r\n        let self = this;\r\n        // app.rpc = self.rpcSend;\r\n        // app.rpcAwait = self.rpcAwaitSend;\r\n        app.rpc = this.rpcSend.bind(this);\r\n        app.rpcAwait = this.rpcAwaitSend.bind(this);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * @param sid \r\n     * @param cmd \r\n     * @param args  当最后一个参数是方法时，在RPC超时之后，会回调该方法 \r\n     * @returns \r\n     */\r\n    send(sid: string, cmd: { \"serverType\": string, \"file_method\": RpcEvent }, args: any[]) {\r\n        // logInfo(\"RPC SED\", sid)\r\n        if (sid === \"*\") {\r\n            // logInfo(\"RPC SED 111\", sid)\r\n            this.sendT(cmd, args);\r\n            return;\r\n        }\r\n\r\n\r\n        let cb: Function = null as any;\r\n        if (typeof args[args.length - 1] === \"function\") {\r\n            cb = args.pop();\r\n        }\r\n        // logInfo(\"RPC SED 222\", sid)\r\n        let bufLast: Buffer = null as any;\r\n        if (args[args.length - 1] instanceof Buffer) {\r\n            bufLast = args.pop();\r\n        }\r\n\r\n        // logInfo(\"RPC SED 333\", sid, app.serverId)\r\n\r\n        if (sid === app.serverName) {\r\n            // logInfo(\"sendRpcMsgToSelf222\", cmd.serverType, cmd.serverType);\r\n            sendRpcMsgToSelf(cmd, BSON.serialize(args), /**bufLast,*/ cb);\r\n            return;\r\n        }\r\n\r\n        // logInfo(\"RPC SED 333333\", sid, app.serverId);\r\n        let socket = app.rpcPool.getSocket(sid);\r\n        if (!socket) {\r\n            if (cb) {\r\n                process.nextTick(() => {\r\n                    cb(rpcErr.noServer);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        let rpcMsg: I_rpcMsg = {\r\n            \"cmd\": cmd.file_method\r\n        };\r\n        let rpcTimeout: I_rpcTimeout = null as any;\r\n        if (cb) {\r\n            let id = getRpcId();\r\n            // rpcRequest[id] = { \"cb\": cb, \"time\": outTime, \"await\": false };\r\n            // rpcMsg.id = id;\r\n            rpcTimeout = { \"id\": getRpcId(), \"cb\": cb, \"time\": outTime, \"await\": false };\r\n            rpcMsg.id = rpcTimeout.id;\r\n        }\r\n        // logInfo(\"send messss\", rpcMsg.cmd, rpcMsg.len);\r\n        // logInfo(\"RPC SED 444\", sid, rpcMsg.cmd, rpcMsg.id)\r\n        let bufEnd = getRpcMsg(rpcMsg, BSON.serialize(args), /*bufLast, */define.Rpc_Msg.rpcMsg);\r\n        sendTo(sid, rpcTimeout, bufEnd);\r\n    }\r\n\r\n    sendT(cmd: { \"serverType\": string, \"file_method\": RpcEvent }, args: any[]) {\r\n        let servers = app.getServersByType(cmd.serverType);\r\n        // logInfo(\"serverrr\", cmd.serverType, servers.length);\r\n        if (servers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // let bufLast: Buffer = null as any;\r\n        // if (args[args.length - 1] instanceof Buffer) {\r\n        //     bufLast = args.pop();\r\n        // }\r\n        // logInfo(\"buff\", cmd.serverType, servers.length, args);\r\n\r\n        let msgBuf = BSON.serialize(args);\r\n        let bufEnd = getRpcMsg({ \"cmd\": cmd.file_method }, msgBuf, /*bufLast,*/ define.Rpc_Msg.rpcMsg);\r\n        for (let one of servers) {\r\n            // logInfo(\"RPC SERVERS\", one.id, one.serverType);\r\n            if (one.serverName === app.serverName) {\r\n                logInfo(\"sendRpcMsgToSelf\", cmd.serverType, servers.length, args);\r\n                sendRpcMsgToSelf(cmd, msgBuf/*, bufLast*/);\r\n            } else {\r\n                logInfo(\"socket\", cmd.serverType, servers.length, args);\r\n                // let socket = app.rpcPool.getSocket(one.id);\r\n                // socket && socket.send(bufEnd);\r\n                sendTo(one.serverName, null, bufEnd);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param sid \r\n     * @param cmd \r\n     * @param args RPC参数\r\n     * @returns Promise<any[]>  因为同一个事件可能有多个方法监听，因此最后返回来的值，是一个数组 ，默认取 下标0 即可\r\n     */\r\n    sendAwait(sid: string, cmd: { \"serverType\": string, \"file_method\": RpcEvent }, args: any[]): Promise<any[]> | undefined {\r\n        if (sid === \"*\") {\r\n            errLog(\"rpc Await 不允许发送到全部服务器，请使用rpc\");\r\n            return undefined;\r\n        }\r\n\r\n        // let bufLast: Buffer = null as any;\r\n        // if (args[args.length - 1] instanceof Buffer) {\r\n        //     bufLast = args.pop();\r\n        // }\r\n        if (sid === app.serverName) {\r\n            // return sendRpcMsgToSelfAwait(cmd, BSON.serialize(args), bufLast);\r\n            return sendRpcMsgToSelfAwait(cmd, BSON.serialize(args));\r\n        }\r\n\r\n        // let socket = app.rpcPool.getSocket(sid);\r\n        // if (!socket) {\r\n        //     return undefined;\r\n        // }\r\n\r\n        let rpcMsg: I_rpcMsg = {\r\n            \"cmd\": cmd.file_method\r\n        };\r\n\r\n        let cb: Function = null as any;\r\n        let rpcTimeout: I_rpcTimeout = null as any;\r\n        let promise: Promise<any[]> = new Promise((resolve) => {\r\n            cb = resolve;\r\n        });\r\n        rpcTimeout = { \"id\": getRpcId(), \"cb\": cb, \"time\": outTime, \"await\": true };\r\n\r\n        // let id = getRpcId();\r\n        // rpcRequest[id] = { \"cb\": cb, \"time\": outTime, \"await\": true };\r\n        rpcMsg.id = rpcTimeout.id;\r\n\r\n        let bufEnd = getRpcMsg(rpcMsg, BSON.serialize(args), /**bufLast,*/ define.Rpc_Msg.rpcMsgAwait);\r\n        sendTo(sid, rpcTimeout, bufEnd);\r\n\r\n        return promise;\r\n\r\n\r\n\r\n        // let promise: Promise<any> = undefined as any;\r\n        // let rpcTimeout: I_rpcTimeout = null as any;\r\n        // if (!notify) {\r\n        //     let cb: Function = null as any;\r\n        //     promise = new Promise((resolve) => {\r\n        //         cb = resolve;\r\n        //     });\r\n        //     rpcTimeout = { \"id\": getRpcId(), \"cb\": cb, \"time\": outTime, \"await\": true };\r\n        //     rpcMsg.id = rpcTimeout.id;\r\n        // }\r\n        // let bufEnd = getRpcMsg(rpcMsg, Buffer.from(JSON.stringify(args)), bufLast, define.Rpc_Msg.rpcMsgAwait);\r\n        // sendTo(sid, rpcTimeout, bufEnd);\r\n        // return promise;\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction sendTo(sid: string, rpcTimeout: I_rpcTimeout | null, buf: Buffer) {\r\n    let socket = app.rpcPool.getSocket(sid);\r\n    if (socket) {\r\n        if (rpcTimeout) {\r\n            rpcRequest[rpcTimeout.id] = rpcTimeout;\r\n        }\r\n        socket.send(buf);\r\n        return;\r\n    }\r\n    let queue = msgQueueDic[sid];\r\n    if (!queue) {\r\n        queue = [];\r\n        msgQueueDic[sid] = queue;\r\n    }\r\n\r\n    if (queue.length < msgCacheLength) {\r\n        queue.push({ \"rpcTimeout\": rpcTimeout, \"buf\": buf, \"time\": outTime - 3000 });\r\n    } else if (rpcTimeout) {\r\n        process.nextTick(() => {\r\n            rpcTimeout.await ? rpcTimeout.cb(undefined) : rpcTimeout.cb(true);\r\n        });\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Get rpcId\r\n */\r\nfunction getRpcId() {\r\n    let id = rpcId++;\r\n    if (rpcId > 99999999) {\r\n        rpcId = 1;\r\n    }\r\n    return id;\r\n}\r\n\r\n/**\r\n * rpc timeout detection\r\n */\r\nfunction checkTimeout() {\r\n    let now = Date.now();\r\n    for (let sid in msgQueueDic) {\r\n        let queue = msgQueueDic[sid];\r\n        while (queue[0] && queue[0].time < now) {\r\n            let one = queue.shift() as { \"rpcTimeout\": I_rpcTimeout | null, \"buf\": Buffer, \"time\": number };\r\n            if (one.rpcTimeout) {\r\n                one.rpcTimeout.await ? one.rpcTimeout.cb(undefined) : one.rpcTimeout.cb(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let id in rpcRequest) {\r\n        if (rpcRequest[id].time < now) {\r\n            let one = rpcRequest[id];\r\n            delete rpcRequest[id];\r\n            one.await ? one.cb(undefined) : one.cb(true);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *  Send rpc message\r\n * \r\n *    [4]       [1]         [1]      [...]    [...]      [...]\r\n *  allMsgLen  msgType   rpcBufLen   rpcBuf   msgBuf    bufLast\r\n */\r\nfunction getRpcMsg(rpcMsg: I_rpcMsg, msgBuf: Buffer, /**bufLast: Buffer*/ t: define.Rpc_Msg) {\r\n    let buffLastLen = 0;\r\n    // if (bufLast) {\r\n    //     buffLastLen = bufLast.length;\r\n    //     rpcMsg.len = buffLastLen;\r\n    // }\r\n    let rpcBuf = BSON.serialize(rpcMsg);\r\n    let buffEnd = Buffer.allocUnsafe(6 + rpcBuf.length + msgBuf.length + buffLastLen);\r\n    buffEnd.writeUInt32BE(buffEnd.length - 4, 0);\r\n    buffEnd.writeUInt8(t, 4);\r\n    buffEnd.writeUInt8(rpcBuf.length, 5);\r\n    rpcBuf.copy(buffEnd, 6);\r\n    msgBuf.copy(buffEnd, 6 + rpcBuf.length);\r\n    // if (bufLast) {\r\n    //     bufLast.copy(buffEnd, buffEnd.length - buffLastLen);\r\n    // }\r\n    return buffEnd;\r\n}\r\n\r\n\r\n/**\r\n * Send rpc message to this server\r\n */\r\nfunction sendRpcMsgToSelf(cmd: { \"serverType\": string, \"file_method\": RpcEvent }, msgBuf: Buffer, /*bufLast: Buffer,*/ cb?: Function) {\r\n    let args = BSON.deserialize(msgBuf) as any[];\r\n    // if (bufLast) {\r\n    //     args.push(bufLast);\r\n    // }\r\n    if (cb) {\r\n        let id = getRpcId();\r\n        rpcRequest[id] = { \"id\": id, \"cb\": cb, \"time\": outTime, \"await\": false };\r\n        args.push(getCallBackFuncSelf(id));\r\n    }\r\n\r\n    process.nextTick(() => {\r\n        TSEventCenter.Instance.event(cmd.file_method, args);\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Send rpc message to this server await\r\n */\r\nasync function sendRpcMsgToSelfAwait(cmd: { \"serverType\": string, \"file_method\": RpcEvent }, msgBuf: Buffer, /**bufLast: Buffer*/): Promise<any[]> {\r\n    let args = BSON.deserialize(msgBuf) as any[];\r\n    // if (bufLast) {\r\n    //     args.push(bufLast);\r\n    // }\r\n    // let cb: Function = null as any;\r\n    // let id = getRpcId();\r\n    // rpcRequest[id] = { \"cb\": cb, \"time\": outTime, \"await\": true };\r\n    // let promise = new Promise(async (resolve) => {\r\n    // cb = resolve;\r\n    let data = await TSEventCenter.Instance.eventAsync(cmd.file_method, ...args);\r\n    // resolve(null);\r\n    // });\r\n    // return promise;\r\n    return data;\r\n}\r\n\r\n\r\n/**\r\n * rpc callback\r\n */\r\nfunction getCallBackFunc(sid: string, id: number) {\r\n    return function (...args: any[]) {\r\n        // let bufLast: Buffer = null as any;\r\n        // if (args[args.length - 1] instanceof Buffer) {\r\n        // bufLast = args.pop();\r\n        // }\r\n        // let socket = app.rpcPool.getSocket(sid);\r\n        // if (socket) {\r\n        // socket.send(getRpcMsg({ \"id\": id }, BSON.serialize(args), /**bufLast,*/ define.Rpc_Msg.rpcMsg));\r\n        // }\r\n        let bufEnd = getRpcMsg({ \"id\": id }, Buffer.from(JSON.stringify(args)),/**bufLast,*/ define.Rpc_Msg.rpcMsg);\r\n        sendTo(sid, null, bufEnd);\r\n    }\r\n}\r\n\r\n/**\r\n * rpc server callback\r\n */\r\nfunction getCallBackFuncSelf(id: number) {\r\n    return function (...args: any[]) {\r\n        let buf: Buffer = null as any;\r\n        if (args[args.length - 1] instanceof Buffer) {\r\n            buf = args.pop();\r\n        }\r\n        args = BSON.deserialize(BSON.serialize(args)) as any[];\r\n        if (buf) {\r\n            args.push(buf);\r\n        }\r\n\r\n        process.nextTick(() => {\r\n            let timeout = rpcRequest[id];\r\n            if (timeout) {\r\n                delete rpcRequest[id];\r\n                timeout.cb.apply(null, args);\r\n            }\r\n        });\r\n\r\n    }\r\n}\r\n\r\n"]}
{"version":3,"file":"backendServer.js","sourceRoot":"","sources":["../../src/components/backendServer.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n\r\nimport { Application } from \"../application\";\r\nimport { I_encodeDecodeConfig, sessionCopyJson } from \"../util/interfaceDefine\";\r\nimport { encodeRemoteData } from \"./msgCoder\";\r\nimport define = require(\"../util/define\");\r\nimport { KalrEvent } from \"../event/KalrEvent\";\r\nimport * as protocol from \"../connector/protocol\";\r\nimport { RegisterSigleton } from \"../register/RegisterSigleton\";\r\nimport { TSEventCenter } from \"../utils/TSEventCenter\";\r\nimport { initSessionApp, Session } from \"./session\";\r\nimport { logInfo, logProto, warningLog } from \"../LogTS\";\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\n\r\n\r\nexport class BackendServer {\r\n    private app: Application;\r\n    // private msgHandler: { [filename: string]: any } = {};\r\n    constructor(app: Application) {\r\n        this.app = app;\r\n    }\r\n\r\n    init() {\r\n        initSessionApp(this.app);\r\n        protocol.init(this.app);\r\n        let defaultEncodeDecode: Required<I_encodeDecodeConfig> = protocol.default_encodeDecode;\r\n        let encodeDecodeConfig = this.app.someconfig.encodeDecode || {};\r\n        this.app.protoEncode = encodeDecodeConfig.protoEncode || defaultEncodeDecode.protoEncode;\r\n        this.app.msgEncode = encodeDecodeConfig.msgEncode || defaultEncodeDecode.msgEncode;\r\n        this.app.protoDecode = encodeDecodeConfig.protoDecode || defaultEncodeDecode.protoDecode;\r\n        this.app.msgDecode = encodeDecodeConfig.msgDecode || defaultEncodeDecode.msgDecode;\r\n\r\n        this.loadHandler();\r\n    }\r\n\r\n\r\n    /**\r\n     * Back-end server load routing processing\r\n     */\r\n    private loadHandler() {\r\n        RegisterSigleton.initBack(this);\r\n        // TSEventCenter.Instance.bind(RpcEvent.OnRoleAcitveOutLine, this, this.clearQueue);\r\n        // TSEventCenter.Instance.bind(RpcEvent.OnRoleNetDisconnection, this, this.clearQueue);\r\n    }\r\n\r\n\r\n    public initMsgHandler(sigleton: any) {\r\n        sigleton[\"ServerType\"] = this.app.serverType;\r\n    }\r\n\r\n    public protoQueue: Map<number, any[][]> = new Map();\r\n\r\n    /**\r\n     * The back-end server receives the client message forwarded by the front-end server\r\n     */\r\n    handleMsg(id: string, msg: Buffer) {\r\n        let sessionLen = msg.readUInt16BE(1);\r\n        // logInfo(\"msgLen\", msg.length);\r\n        let sessionBuf = msg.subarray(3, 3 + sessionLen); //截取了3-41位的数据\r\n        let session = new Session();\r\n\r\n        session.setAll(BSON.deserialize(sessionBuf) as sessionCopyJson);\r\n        let mainKey = msg.readUInt16BE(3 + sessionLen);\r\n        let sonKey = msg.readUInt16BE(5 + sessionLen);\r\n        //此处返回的是Protobuf的结构体，而不是Buffer\r\n        let data = this.app.msgDecode(mainKey, sonKey, msg.subarray(7 + sessionLen), true);\r\n        logProto(\">>>>>>>>>>>>>>>\" + this.app.serverName + \" 收到消息\", mainKey + \"-\" + sonKey, id, data);\r\n\r\n        let queue = this.protoQueue.get(session.uid);\r\n        if (!queue) {\r\n            queue = [];\r\n            this.protoQueue.set(session.uid, queue);\r\n        }\r\n        queue.push([mainKey, sonKey, data, session, id]);\r\n        if (queue.length == 1) {\r\n            this.doQueue(session.uid);\r\n        }\r\n        // TSEventCenter.Instance.event(KalrEvent.BackendServerDoFuntion + mainKey + \"_\" + sonKey, data, session, this.callback(id, mainKey, sonKey, session.uid));\r\n    }\r\n\r\n    public clearQueue(uid: number) {\r\n        let queue = this.protoQueue.get(uid);\r\n        if (queue) {\r\n            queue = [];\r\n            this.protoQueue.delete(uid);\r\n        }\r\n    }\r\n\r\n    private async doQueue(uid: number) {\r\n        let queue = this.protoQueue.get(uid);\r\n        let count = 0;\r\n        while (queue.length > 0) {\r\n            count++;\r\n            if (count > 30) {\r\n                warningLog(\"执行消息队列超过了30次尚未跳出\");\r\n                break;\r\n            }\r\n            let arr = queue.shift();\r\n            await TSEventCenter.Instance.eventAsync(KalrEvent.BackendServerDoFuntion + arr[0] + \"_\" + arr[1], arr[2], arr[3], this.callback(arr[4], arr[0], arr[1], uid));\r\n        }\r\n    }\r\n\r\n\r\n    private callback(id: string, mainKey: number, sonKey: number, uid: number) {\r\n        let self = this;\r\n        return function (msg: any) {\r\n            if (msg === undefined) {\r\n                msg = null;\r\n            }\r\n            // logInfo(\"back callback\", mainKey, sonKey);\r\n\r\n            let msgBuf = self.app.protoEncode(mainKey, sonKey, msg, false);\r\n            logProto(\"<<<<<<<<<<<<<<< 发送消息\", mainKey + \"-\" + sonKey, id, msg);\r\n            let buf = encodeRemoteData([uid], msgBuf);\r\n            self.app.rpcPool.sendMsg(id, buf);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Synchronize back-end session to front-end\r\n     */\r\n    sendSession(sid: string, sessionBuf: Buffer) {\r\n        let buf = Buffer.allocUnsafe(5 + sessionBuf.length);\r\n        buf.writeUInt32BE(1 + sessionBuf.length, 0);\r\n        buf.writeUInt8(define.Rpc_Msg.applySession, 4);\r\n        sessionBuf.copy(buf, 5);\r\n        this.app.rpcPool.sendMsg(sid, buf);\r\n    }\r\n\r\n    /**\r\n     * The back-end server sends a message to the client\r\n     */\r\n    sendMsgByUidSid(mainKey: number, sonKey: number, msg: any, uidsid: { \"uid\": number, \"sid\": string }[]) {\r\n        let groups: { [sid: string]: number[] } = {};\r\n        let group: number[];\r\n        let one: { \"uid\": number, \"sid\": string };\r\n        for (one of uidsid) {\r\n\r\n            if (!one.sid || !one.uid) {\r\n                continue;\r\n            }\r\n            group = groups[one.sid];\r\n            if (!group) {\r\n                group = [];\r\n                groups[one.sid] = group;\r\n            }\r\n            group.push(one.uid);\r\n        }\r\n        let app = this.app;\r\n\r\n        // if (isStressTesting) {\r\n        //     TSEventCenter.Instance.event(KalrEvent.OnUnitTestProto + mainKey + \"_\" + sonKey, msg);\r\n        // }\r\n        // logInfo(\"back2 callback\", mainKey, sonKey);\r\n        let msgBuf: Buffer = app.protoEncode(mainKey, sonKey, msg, false);\r\n        logProto(\"<<<<<<<<<<<<<<< 发送消息\", mainKey + \"-\" + sonKey, groups, msg);\r\n        let sid: string;\r\n        let buf: Buffer;\r\n        for (sid in groups) {\r\n            buf = encodeRemoteData(groups[sid], msgBuf);\r\n            app.rpcPool.sendMsg(sid, buf);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The back-end server sends a message to the client\r\n     */\r\n    sendMsgByGroup(mainKey: number, sonKey: number, msg: any, group: { [sid: string]: number[] }) {\r\n        let app = this.app;\r\n        // logInfo(\"back3 callback\", mainKey, sonKey);\r\n        let msgBuf: Buffer = app.protoEncode(mainKey, sonKey, msg, true);\r\n        let sid: string;\r\n        let buf: Buffer;\r\n        for (sid in group) {\r\n            if (group[sid].length === 0) {\r\n                continue;\r\n            }\r\n            buf = encodeRemoteData(group[sid], msgBuf);\r\n            app.rpcPool.sendMsg(sid, buf);\r\n        }\r\n    }\r\n}\r\n"]}
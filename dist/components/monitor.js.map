{"version":3,"file":"monitor.js","sourceRoot":"","sources":["../../src/components/monitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * After the non-master server is started, it connects to the master server, knows each other, and processes related logic\r\n */\r\n\r\n\r\nimport { Application } from \"../application\";\r\nimport { MonitorCli } from \"./cliUtil\";\r\nimport { TcpClient } from \"./tcpClient\";\r\nimport define = require(\"../util/define\");\r\nimport { SocketProxy, monitor_get_new_server, monitor_remove_server, loggerLevel, monitor_reg_master, ServerInfo, loggerType } from \"../util/interfaceDefine\";\r\nimport { encodeInnerData } from \"./msgCoder\";\r\nimport * as rpcClient from \"./rpcClient\";\r\nimport { errLog } from \"../LogTS\";\r\nimport { TSEventCenter } from \"../utils/TSEventCenter\";\r\nimport { FrameEvent } from \"../event/FrameEvent\";\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\nlet serverIdsArr: string[] = [];\r\nlet hasStartAll = false;\r\n\r\n\r\n\r\nexport function start(_app: Application) {\r\n    new monitor_client_proxy(_app);\r\n}\r\n\r\n\r\nexport class monitor_client_proxy {\r\n    private app: Application;\r\n    private socket: SocketProxy = null as any;\r\n    private monitorCli: MonitorCli;\r\n    private heartbeatTimer: NodeJS.Timeout = null as any;\r\n    private heartbeatTimeoutTimer: NodeJS.Timeout = null as any;\r\n\r\n    private removeDiffServers: { [id: string]: string } = {}; // After the monitor is reconnected, the server set to be compared and removed\r\n    private needDiff: boolean = false; // whether need to compare\r\n    private diffTimer: NodeJS.Timeout = null as any;    // diff timeout\r\n\r\n    constructor(app: Application) {\r\n        this.app = app;\r\n        this.monitorCli = new MonitorCli(app);\r\n        this.doConnect(0);\r\n        let serversConfig = app.serversConfig;\r\n        for (let x in serversConfig) {\r\n            let arr = serversConfig[x];\r\n            for (let one of arr) {\r\n                serverIdsArr.push(one.serverName);\r\n            }\r\n        }\r\n        removeFromArr(serverIdsArr, app.serverName);\r\n    }\r\n\r\n    /**\r\n     * Connect master\r\n     */\r\n    private doConnect(delay: number) {\r\n        let self = this;\r\n        setTimeout(function () {\r\n            let connectCb = function () {\r\n                self.app.logger(loggerType.frame, loggerLevel.info, \"monitor -> connected to master success\");\r\n\r\n                // Register with the master\r\n                self.register();\r\n\r\n                // Heartbeat package\r\n                self.heartbeat();;\r\n            };\r\n            self.app.logger(loggerType.frame, loggerLevel.info, \"monitor -> try to connect to master now\");\r\n            self.socket = new TcpClient(self.app.masterConfig.port, self.app.masterConfig.host, define.some_config.SocketBufferMaxLen, false, connectCb);\r\n            self.socket.on(\"data\", self.onData.bind(self));\r\n            self.socket.on(\"close\", self.onClose.bind(self));\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * register\r\n     */\r\n    private register() {\r\n        let tokenConfig = this.app.someconfig.recognizeToken || {};\r\n        let serverToken = tokenConfig[\"serverToken\"] || define.some_config.Server_Token;\r\n\r\n        let loginInfo: monitor_reg_master = {\r\n            T: define.Monitor_To_Master.register,\r\n            serverInfo: this.app.serverInfo,\r\n            serverToken: serverToken\r\n        };\r\n        this.send(loginInfo);\r\n    }\r\n\r\n    /**\r\n     * Received the msg\r\n     */\r\n    private onData(_data: Buffer) {\r\n        try {\r\n            let data: any = BSON.deserialize(_data);\r\n\r\n            if (data.T === define.Master_To_Monitor.addServer) {\r\n                this.addServer((data as monitor_get_new_server).servers);\r\n            } else if (data.T === define.Master_To_Monitor.removeServer) {\r\n                this.removeServer(data as monitor_remove_server);\r\n            } else if (data.T === define.Master_To_Monitor.cliMsg) {\r\n                this.monitorCli.deal_master_msg(this, data);\r\n            } else if (data.T === define.Master_To_Monitor.heartbeatResponse) {\r\n                clearTimeout(this.heartbeatTimeoutTimer);\r\n                this.heartbeatTimeoutTimer = null as any;\r\n            }\r\n        }\r\n        catch (e: any) {\r\n            // this.app.logger(loggerType.msg.error, e);\r\n            errLog(\"onData error\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closed\r\n     */\r\n    private onClose() {\r\n        this.app.logger(loggerType.frame, loggerLevel.error, \"monitor -> socket closed, try to reconnect master later\");\r\n        this.needDiff = true;\r\n        this.removeDiffServers = {};\r\n        clearTimeout(this.diffTimer);\r\n        clearTimeout(this.heartbeatTimer);\r\n        clearTimeout(this.heartbeatTimeoutTimer);\r\n        this.heartbeatTimeoutTimer = null as any;\r\n        this.doConnect(define.some_config.Time.Monitor_Reconnect_Time * 1000);\r\n    }\r\n\r\n    /**\r\n     * Send heartbeat\r\n     */\r\n    private heartbeat() {\r\n        let timeDelay = define.some_config.Time.Monitor_Heart_Beat_Time * 1000 - 5000 + Math.floor(5000 * Math.random());\r\n        this.heartbeatTimer = setTimeout(() => {\r\n            let heartbeatMsg = { \"T\": define.Monitor_To_Master.heartbeat };\r\n            this.send(heartbeatMsg);\r\n            this.heartbeatTimeout();\r\n            this.heartbeatTimer.refresh();\r\n        }, timeDelay)\r\n    }\r\n\r\n    /**\r\n     * Heartbeat timeout\r\n     */\r\n    private heartbeatTimeout() {\r\n        if (this.heartbeatTimeoutTimer !== null) {\r\n            return;\r\n        }\r\n        let self = this;\r\n        this.heartbeatTimeoutTimer = setTimeout(function () {\r\n            self.app.logger(loggerType.frame, loggerLevel.error, \"monitor -> heartbeat timeout, close the socket\");\r\n            self.socket.close();\r\n        }, define.some_config.Time.Monitor_Heart_Beat_Timeout_Time * 1000)\r\n    }\r\n\r\n    /**\r\n     * Send message (not buffer)\r\n     */\r\n    send(msg: any) {\r\n        this.socket.send(encodeInnerData(msg));\r\n    }\r\n\r\n    /**\r\n     * Add server\r\n     */\r\n    private addServer(servers: { [id: string]: ServerInfo }) {\r\n        if (this.needDiff) {\r\n            this.diffTimerStart();\r\n        }\r\n        let serversApp = this.app.servers;\r\n        let serversIdMap = this.app.serversNameMap;\r\n        let serverInfo: ServerInfo;\r\n        for (let sid in servers) {\r\n            serverInfo = servers[sid];\r\n            if (this.needDiff) {\r\n                this.addOrRemoveDiffServer(serverInfo.serverName, true, serverInfo.serverType);\r\n            }\r\n            let tmpServer: ServerInfo = serversIdMap[serverInfo.serverName];\r\n            if (tmpServer && tmpServer.host === serverInfo.host && tmpServer.port === serverInfo.port) {    // If it already exists and the ip configuration is the same, ignore it (other configurations are not considered, please guarantee by the developer)\r\n                continue;\r\n            }\r\n            if (!serversApp[serverInfo.serverType]) {\r\n                serversApp[serverInfo.serverType] = [];\r\n            }\r\n            if (!!tmpServer) {\r\n                for (let i = serversApp[serverInfo.serverType].length - 1; i >= 0; i--) {\r\n                    if (serversApp[serverInfo.serverType][i].serverName === tmpServer.serverName) {\r\n                        serversApp[serverInfo.serverType].splice(i, 1);\r\n                        rpcClient.removeSocket(tmpServer.serverName);\r\n                        this.emitRemoveServer(tmpServer);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            serversApp[serverInfo.serverType].push(serverInfo);\r\n            serversIdMap[serverInfo.serverName] = serverInfo;\r\n            this.emitAddServer(serverInfo);\r\n            rpcClient.ifCreateRpcClient(this.app, serverInfo)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove server\r\n     */\r\n    private removeServer(msg: monitor_remove_server) {\r\n        if (this.needDiff) {\r\n            this.diffTimerStart();\r\n            this.addOrRemoveDiffServer(msg.serverName, false);\r\n        }\r\n        delete this.app.serversNameMap[msg.serverName];\r\n        let serversApp = this.app.servers;\r\n        if (serversApp[msg.serverType]) {\r\n            for (let i = 0; i < serversApp[msg.serverType].length; i++) {\r\n                if (serversApp[msg.serverType][i].serverName === msg.serverName) {\r\n                    let tmpInfo = serversApp[msg.serverType][i];\r\n                    serversApp[msg.serverType].splice(i, 1);\r\n                    rpcClient.removeSocket(msg.serverName)\r\n                    this.emitRemoveServer(tmpInfo);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private addOrRemoveDiffServer(sid: string, add: boolean, serverType?: string) {\r\n        if (add) {\r\n            this.removeDiffServers[sid] = serverType as string;\r\n        } else {\r\n            delete this.removeDiffServers[sid];\r\n        }\r\n    }\r\n\r\n    private diffTimerStart() {\r\n        clearTimeout(this.diffTimer);\r\n        let self = this;\r\n        this.diffTimer = setTimeout(function () {\r\n            self.diffFunc();\r\n        }, 5000);     // Compare after 5 seconds\r\n    }\r\n\r\n    /**\r\n     * 比对原因：与master断开连接期间，如果另一台逻辑服挂了，本服不能断定该服是否移除，\r\n     * 因为添加和删除统一由master通知，所以与master断开期间，不可更改与其他服的关系，\r\n     * 待本服重新连接上master后，通过比对，移除无效服务器\r\n     * \r\n     * (Reason for comparison: During the disconnection from the master, if another logical server hangs up, \r\n     * the server cannot determine whether the server will be removed, because the addition and deletion are uniformly notified by the master,\r\n     *  so during the disconnection from the master, it cannot be changed. Server relationship, \r\n     * after the server reconnects to the master, through the comparison, remove the invalid server)\r\n     */\r\n    private diffFunc() {\r\n        this.needDiff = false;\r\n        let servers = this.app.servers;\r\n        for (let serverType in servers) {\r\n            for (let i = servers[serverType].length - 1; i >= 0; i--) {\r\n                let id = servers[serverType][i].serverName;\r\n                if (id === this.app.serverName) {\r\n                    continue;\r\n                }\r\n                if (!this.removeDiffServers[id]) {\r\n                    let tmpInfo = this.app.serversNameMap[id];\r\n                    delete this.app.serversNameMap[id];\r\n                    servers[serverType].splice(i, 1);\r\n                    rpcClient.removeSocket(id);\r\n                    this.emitRemoveServer(tmpInfo);\r\n                }\r\n            }\r\n        }\r\n        this.removeDiffServers = {};\r\n    }\r\n\r\n    /**\r\n     * Launch add server event\r\n     */\r\n    private emitAddServer(serverInfo: ServerInfo) {\r\n        process.nextTick(() => {\r\n            // this.app.emit(\"onAddServer\", serverInfo);\r\n            TSEventCenter.Instance.event(FrameEvent.onAddServer, serverInfo);\r\n        });\r\n\r\n        if (!hasStartAll) {\r\n            removeFromArr(serverIdsArr, serverInfo.serverName);\r\n            if (serverIdsArr.length === 0) {\r\n                hasStartAll = true;\r\n                process.nextTick(() => {\r\n                    // this.app.emit(\"onStartAll\");\r\n                    TSEventCenter.Instance.event(FrameEvent.onStartAll);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Launch remove server event\r\n     */\r\n    private emitRemoveServer(serverInfo: ServerInfo) {\r\n        process.nextTick(() => {\r\n            // this.app.emit(\"onRemoveServer\", serverInfo);\r\n            TSEventCenter.Instance.event(FrameEvent.onRemoveServer, serverInfo);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction removeFromArr<T = any>(arr: T[], one: T) {\r\n    let index = arr.indexOf(one);\r\n    if (index !== -1) {\r\n        arr.splice(index, 1);\r\n    }\r\n}"]}
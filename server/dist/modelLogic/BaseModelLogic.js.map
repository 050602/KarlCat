{"version":3,"file":"BaseModelLogic.js","sourceRoot":"","sources":["../../src/modelLogic/BaseModelLogic.ts"],"names":[],"mappings":";;;AAAA,gCAA6B;AAC7B,+CAA4C;AAE5C,MAAsB,cAAe,SAAQ,mBAAQ;IAYnD,SAAS;IACF,YAAY;QACjB,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;QACxB,SAAG,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAAA,CAAC;CAYH;AA5BD,wCA4BC","sourcesContent":["import { app } from \"../app\";\r\nimport { Sigleton } from \"../core/Sigleton\";\r\n\r\nexport abstract class BaseModelLogic extends Sigleton {\r\n  /**\r\n   * 有使用LRUCache的Model 需要注意在角色退出登录时，对Cache进行清理\r\n   * @param roleUid \r\n   */\r\n  public abstract deleteCache(roleUid: number): void;\r\n  /**\r\n * 有使用LRUCache的Model 需要注意定期刷新Cache 避免被TTL清理掉\r\n * @param roleUid \r\n */\r\n  public abstract cacheRefresh(roleUid: number): void;\r\n\r\n  //当实例初始化时\r\n  public initInstance() {\r\n    let name = this.clsName;\r\n    app.ModelLogicMap.set(name, this);\r\n  };\r\n\r\n  // protected static getInstance(T: any) {\r\n  // let ins = app.InstanceMap.get(T.SigletonInsName);\r\n  // if (!ins) {\r\n  //   ins = new T();\r\n  //   app.InstanceMap.set(T.SigletonInsName, ins);\r\n  //   app.ModelLogicMap.set(T.SigletonInsName, ins);\r\n  //   ins.initInstance();\r\n  // }\r\n  // return ins;\r\n  // }\r\n}"]}
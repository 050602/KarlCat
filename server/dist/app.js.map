{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Session } from \"./components/session\";\r\nimport { kcp_encodeDecode } from \"./connector/kcpProtocol\";\r\nimport { DataBase } from \"./database/DataBase\";\r\nimport { connector, createApp } from \"./mydog\";\r\nimport { RegisterSigleton } from \"./register/RegisterSigleton\";\r\nimport { ServerType } from \"./register/route\";\r\n// import { ServerDataMain } from \"./servers/Background/ServerDataMain\";\r\nimport { SocketState } from \"./const/SocketState\";\r\nimport { some_config } from \"./util/define\";\r\nimport { I_connectorConfig, I_rpcConfig } from \"./util/interfaceDefine\";\r\nimport { CommonUtils } from \"./utils/CommonUtils\";\r\nimport { DateUtils } from \"./utils/DateUtils\";\r\nimport GateMain from \"./servers/gate/GateMain\";\r\n\r\n\r\n\r\nexport let app = createApp();\r\n\r\nexport const isDebug = true;\r\n//当然，因为之后会切换后端框架，这个问题不大\r\nexport let BigServerId: number = 1;//区ID\r\nexport let OnlyIdRangNum: number = 1000;//唯一ID区间包含ID数\r\nexport let BigChannelName: string = \"aofei\";//区ID\r\nexport let language: \"cn\" | \"en\" = \"cn\";//当前执行语言环境类型，之后可能读后台吧？\r\n\r\n\r\nconst handleExit = (code: number, error: any) => {\r\n    console.error(DateUtils.formatFullTime2(DateUtils.timestamp()), \"handleExit\", code, error);\r\n};\r\n\r\nexport let allTables: any[] = [];\r\nexport let allDataLog: any = {};\r\nBigServerId = app.zoneConfig.zoneid;\r\n\r\nlet connectorType = connector.Tcp;\r\nif (app.serverInfo.serverType == ServerType.background) {\r\n    connectorType = connector.Ws;\r\n    // let bg = ServerDataMain.Instance;//需要监听on start all\r\n}\r\nlet connConfig: I_connectorConfig = {\r\n    connector: connectorType,\r\n    clientOnCb: clientOnCallback,\r\n    heartbeat: 2,\r\n    clientOffCb: clientOffCallback,\r\n    interval: 30\r\n}\r\n\r\n\r\nlet rpcConfig: I_rpcConfig = {\r\n    interval: 20,\r\n    heartbeat: 20,\r\n    timeout: 20\r\n}\r\n\r\nif (isDebug) {\r\n    //服务器间心跳检测间隔\r\n    some_config.Time.Rpc_Heart_Beat_Timeout_Time = 2000;\r\n    some_config.Time.Monitor_Heart_Beat_Time = 2000;\r\n    rpcConfig.heartbeat = 2000;\r\n    rpcConfig.timeout = 2000;\r\n}\r\n\r\n\r\napp.setConfig(\"rpc\", rpcConfig);\r\napp.setConfig(\"connector\", connConfig);\r\napp.setConfig(\"logger\", (type: number, level: string, msg: string) => {\r\n    if (level === \"warn\" || level === \"error\") {\r\n        console.error(msg);\r\n    }\r\n});\r\n\r\n\r\n// app.setConfig(\"mydogList\", () => {\r\n//     return [{ \"title\": \"cpu\", \"value\": getCpuUsage() }]\r\n// })\r\nif (connectorType == connector.Kcp) {\r\n    app.setConfig(\"encodeDecode\", kcp_encodeDecode);\r\n}\r\n\r\napp.configure(ServerType.gate, () => {\r\n    // 当客户端给后端服务器发消息时，需要提供路由函数以决定该消息发到哪个服务器\r\n    app.route(ServerType.logic, (session: Session) => {\r\n        //理论上应该调用此路由之前，设置玩家的session 的 serverId\r\n        //此处实际上是分配对应类型的服务器其中一个分配给玩家\r\n        return ServerType.logic + \"-\" + session.get(\"serverId\");\r\n    });\r\n\r\n    app.route(ServerType.fight, (session: Session) => {\r\n        //理论上应该调用此路由之前，设置玩家的session 的 serverId\r\n        //此处实际上是分配对应类型的服务器其中一个分配给玩家\r\n        return ServerType.fight + \"-\" + session.get(\"fightLine\");\r\n    });\r\n\r\n\r\n    app.route(ServerType.chat, (session: Session) => {\r\n        return ServerType.chat + \"-\" + session.get(\"serverId\");;\r\n    });\r\n\r\n    app.route(ServerType.cross, (session: Session) => {\r\n        return ServerType.cross + \"-1\";\r\n    });\r\n    app.route(ServerType.social, (session: Session) => {\r\n        return ServerType.social + \"-1\";\r\n    });\r\n});\r\n\r\n// app.configure(ServerName.chat, () => {\r\n//     app.route(ServerName.chat, (session: Session) => {\r\n//         return ServerName.chat + \"-\" + session.get(\"serverId\");\r\n//     });\r\n// });\r\n\r\ninit();\r\nasync function init() {\r\n    if (BigServerId < 1 || BigServerId > 32000) {\r\n        console.error(\"bigServerId out range:\", BigServerId);\r\n        return;\r\n    }\r\n    // await ConfigMgr.Instance.init();\r\n\r\n    // setInterval(() => {\r\n    //     console.log(\"pro\", app.serverName, getCpuUsage());\r\n    // }, 5000);\r\n\r\n    app.start();\r\n\r\n    if (app.serverInfo.serverType != ServerType.database) {\r\n        await CommonUtils.sleep(8000);  // todo2\r\n    }\r\n\r\n    RegisterSigleton.initMain();\r\n\r\n    switch (app.serverType) {\r\n        case ServerType.line:\r\n            break;\r\n        case ServerType.gate:\r\n            break;\r\n        case ServerType.logic:\r\n            break;\r\n        case ServerType.chat:\r\n            break;\r\n        case ServerType.background:\r\n            SocketState.Instance.openClientSocket = true;\r\n            break;\r\n        case ServerType.master:\r\n            //实例化Master\r\n            break;\r\n        case ServerType.database:\r\n            //初始化服务器数据\r\n            await DataBase.Instance.init();\r\n            break;\r\n        case ServerType.logSave:\r\n            //初始化在线人数\r\n            break;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// servers 目录为通信消息入口。\r\n// 如 chat 表示聊天类型服务器，handler目录下接收客户端消息，remote目录下接收服务器之间的rpc调用消息。\r\n// 客户端发送chat.main.chat消息，服务器将会在servers/chat/handler/main.ts文件中的chat方法处收到消息，\r\n// 收到消息后调用next()即可发送数据给客户端。开发者调用 app.rpc(\"chat-server-1\").chat.main.offline()，将会在servers/chat/remote/main.ts文件中的offline方法处收到消息。\r\n// app.ts为程序入口文件\r\n\r\nprocess.on(\"exit\", function (code) {\r\n    console.error(DateUtils.formatFullTime2(DateUtils.timestamp()), \"exit code:\", code);\r\n});\r\nprocess.on(\"uncaughtException\", function (err: Error, origin: Promise<any>) {\r\n    console.error(DateUtils.formatFullTime2(DateUtils.timestamp()), \"uncaughtException\", err?.stack);\r\n});\r\nprocess.on(\"unhandledRejection\", function (err: Error, origin: Promise<any>) {\r\n    console.error(DateUtils.formatFullTime2(DateUtils.timestamp()), \"unhandledRejection\", err?.stack);\r\n});\r\n\r\n// 监听各种退出事件\r\n// 按照 POSIX 的规范，我们用 128 + 信号编号 得到最终的退出码\r\n// 信号编号参考下面的图片，大家可以在 linux 系统下执行 kill -l 查看所有的信号编号\r\nprocess.on('SIGHUP', (err: any) => handleExit(128 + 1, err));\r\nprocess.on('SIGINT', (err: any) => handleExit(128 + 2, err));\r\nprocess.on('SIGTERM', (err: any) => handleExit(128 + 15, err));\r\n// windows 下按下 ctrl+break 的退出信号\r\nprocess.on('SIGBREAK', (err: any) => handleExit(128 + 21, err));\r\n\r\n\r\nfunction clientOnCallback(session: Session) {\r\n    GateMain.Instance.clientOnCallback(session);\r\n\r\n}\r\n\r\nasync function clientOffCallback(session: Session) {\r\n    console.log(\"socket 断开 clientOffCallback\", session.uid)\r\n}\r\n\r\n\r\n"]}
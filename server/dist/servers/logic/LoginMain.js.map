{"version":3,"file":"LoginMain.js","sourceRoot":"","sources":["../../../src/servers/logic/LoginMain.ts"],"names":[],"mappings":";;AAAA,sEAAmE;AAEnE,8DAA2D;AAC3D,qDAAkD;AAClD,oEAAiE;AAEjE,2DAAwD;AAExD,mCAAgC;AAChC,mDAAgD;AAEhD,MAAqB,SAAU,SAAQ,iCAAe;IAC3C,MAAM,KAAK,QAAQ;QACtB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9B,CAAC;IAEM,YAAY;QACf,IAAI,CAAC,OAAO,CAAC,uBAAU,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/D,CAAC;IAGM,eAAe;IACtB,CAAC;IAGD,8DAA8D;IACvD,KAAK,CAAC,aAAa,CAAC,GAAmB,EAAE,OAAgB,EAAE,IAAc;QAC5E,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,CAAC,CAAA;QAEhC,SAAS;QACT,IAAI,QAAQ,GAAG,MAAM,+BAAc,CAAC,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,EAAE;YACX,MAAM;YACN,mFAAmF;YACnF,IAAI,MAAM,GAAG,2BAAY,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;YAC/C,IAAI,IAAI,GAAa;gBACjB,QAAQ,EAAE,GAAG,CAAC,QAAQ;gBACtB,OAAO,EAAE,MAAM;aAClB,CAAC;YACF,QAAQ,GAAG,MAAM,qBAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACpD;QAED,yBAAyB;QACzB,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC;QAC/B,OAAO,CAAC,KAAK,EAAE,CAAC;QAEhB,IAAI,KAAK,GAAmB;YACxB,IAAI,EAAE,CAAC;SACV,CAAA;QAED,oBAAoB;QACpB,IAAI,CAAC,uBAAU,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC,cAAc;QAEtD,oBAAoB;QACpB,SAAG,CAAC,eAAe,CAAC,uBAAU,CAAC,cAAc,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;QAG7G,aAAa;QACb,SAAG,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,mBAAQ,CAAC,iBAAiB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;IAE/E,CAAC;CAEJ;AAnDD,4BAmDC","sourcesContent":["import { BaseServerLogic } from \"../../components/BaseServerLogic\";\r\nimport { lanlu } from \"../../proto/protobuf/proto.js\";\r\nimport { Pt100Login } from \"../../proto/protos/Pt100Login\";\r\nimport { UserModel } from \"../../model/UserModel\";\r\nimport { UserModelLogic } from \"../../modelLogic/UserModelLogic\";\r\nimport { UserData } from \"../../database/UserTable\";\r\nimport { SnowDrifting } from \"../../utils/SnowDrifting\";\r\nimport { Session } from \"../../components/session\";\r\nimport { app } from \"../../app\";\r\nimport { RpcEvent } from \"../../event/RpcEvent\";\r\n\r\nexport default class LoginMain extends BaseServerLogic {\r\n    public static get Instance(): LoginMain {\r\n        return this.getInstance();\r\n    }\r\n\r\n    public initInstance(): void {\r\n        this.bindCmd(Pt100Login.LoginReq10001, this.loginReq10001);\r\n    }\r\n\r\n\r\n    public destoryInstance(): void {\r\n    }\r\n\r\n\r\n    //以下代码是示例接收后端服的代码 lanlu.IPt101_1_tos会报错，因为我生成的proto文件没有101这个协议\r\n    public async loginReq10001(msg: lanlu.IPt10001, session: Session, next: Function) {\r\n        console.log(\"login succc \", msg)\r\n\r\n        //简单的登录示例\r\n        let userData = await UserModelLogic.Instance.getLoginUserData(msg.username);\r\n        if (!userData) {\r\n            //创建帐号\r\n            //唯一ID 当做用户标识，但是建议真的开发时，不要使用该api获取唯一ID来当角色UID ，因为在同一机子上如果没设置好参数，ID可能与临时ID重复，被其他用户顶掉\r\n            let onlyId = SnowDrifting.Instance.getOnlyId();\r\n            let user: UserData = {\r\n                userName: msg.username,\r\n                roleUid: onlyId\r\n            };\r\n            userData = await UserModel.Instance.insert(user);\r\n        }\r\n\r\n        //重新纠正session的uid 并应用到前端服\r\n        session.uid = userData.roleUid;\r\n        session.apply();\r\n\r\n        let proto: lanlu.IPt10002 = {\r\n            code: 1,\r\n        }\r\n\r\n        //一般来说可以通过next快捷回调协议\r\n        next(Pt100Login.LoginResp10002, proto); //回调的协议号，协议结构体\r\n\r\n        //也可以使用该API 发送消息给客户端\r\n        app.sendMsgByUidSid(Pt100Login.LoginResp10002, proto, [{ uid: session.uid, sid: session.getFrontendSid() }]);\r\n\r\n\r\n        //通过RPC踢该玩家下线\r\n        app.rpc(session.getFrontendSid(), RpcEvent.OnKillSocketByUid, session.uid);\r\n\r\n    }\r\n\r\n}\r\n"]}
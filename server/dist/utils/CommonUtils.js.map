{"version":3,"file":"CommonUtils.js","sourceRoot":"","sources":["../../src/utils/CommonUtils.ts"],"names":[],"mappings":";;;AACA,MAAa,WAAW;IAGpB;;;OAGG;IACI,MAAM,CAAC,SAAS,CAAC,MAAW;QAC/B,IAAI,MAAM,YAAY,KAAK,EAAE;YACzB,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;YACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC1B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACzC;YACD,OAAO,KAAK,CAAC;SAChB;aAAM,IAAI,MAAM,YAAY,MAAM,EAAE;YACjC,IAAI,GAAG,GAAG,EAAE,CAAC;YACb,KAAK,IAAI,QAAQ,IAAI,MAAM,EAAE;gBACzB,IAAI,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;oBACjC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACpD;aACJ;YACD,OAAO,GAAG,CAAC;SACd;aAAM;YACH,OAAO,MAAM,CAAC;SACjB;IACL,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,aAAa,CAAC,WAAgB,EAAE,GAAQ;QAClD,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE;YACjB,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBACzB,WAAW,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;aAC/B;SACJ;IACL,CAAC;IAGM,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAU;QAChC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,UAAU,CAAC,GAAG,EAAE;gBACZ,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,EAAE,EAAE,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IAGM,MAAM,CAAC,UAAU,CAAI,GAAQ,EAAE,KAAQ;QAC1C,IAAI,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7B,IAAI,GAAG,GAAG,CAAC,EAAE;YACT,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,MAAM,CAAC,OAAO,CAAI,GAAQ,EAAE,KAAQ;QACvC,IAAI,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7B,OAAO,GAAG,IAAI,CAAC,CAAC;IACpB,CAAC;IAEM,MAAM,CAAC,KAAK,CAAI,GAAgB,EAAE,GAAM;QAC3C,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,IAAI,GAAG,GAAG,KAAK,SAAS,CAAC;QAC7B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAI,IAAS,EAAE,IAAS,EAAE,KAAQ;QACpD,OAAO,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAChF,CAAC;IAEM,MAAM,CAAC,OAAO,CAAI,GAAgB;QACrC,IAAI,GAAG,GAAQ,EAAE,CAAC;QAClB,KAAK,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,EAAE;YACpB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChB,OAAO,GAAG,CAAC;IACf,CAAC;CACJ;AAjFD,kCAiFC","sourcesContent":["\r\nexport class CommonUtils {\r\n\r\n\r\n    /**\r\n     * 深度复制\r\n     * @param object\r\n     */\r\n    public static deepClone(object: any): any {\r\n        if (object instanceof Array) {\r\n            let array = [];\r\n            let len = object.length;\r\n            for (let n = 0; n < len; n++) {\r\n                array.push(this.deepClone(object[n]));\r\n            }\r\n            return array;\r\n        } else if (object instanceof Object) {\r\n            let obj = {};\r\n            for (let fieldKey in object) {\r\n                if (object.hasOwnProperty(fieldKey)) {\r\n                    obj[fieldKey] = this.deepClone(object[fieldKey]);\r\n                }\r\n            }\r\n            return obj;\r\n        } else {\r\n            return object;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 属性克隆\r\n     * @param parasitifer 宿主\r\n     * @param obj 属性来源\r\n     */\r\n    public static propertyClone(parasitifer: any, obj: any) {\r\n        for (let key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                parasitifer[key] = obj[key];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public static async sleep(ms: number) {\r\n        return new Promise((resolve, rejcet) => {\r\n            setTimeout(() => {\r\n                resolve(null);\r\n            }, ms);\r\n        });\r\n    }\r\n\r\n\r\n    public static delInArray<T>(arr: T[], value: T): boolean {\r\n        let idx = arr.indexOf(value);\r\n        if (idx < 0) {\r\n            return false;\r\n        }\r\n        let del = arr.splice(idx, 1);\r\n        return true;\r\n    }\r\n\r\n    public static inArray<T>(arr: T[], value: T): boolean {\r\n        let idx = arr.indexOf(value);\r\n        return idx >= 0;\r\n    }\r\n\r\n    public static inMap<T>(map: Map<T, any>, key: T): boolean {\r\n        let val = map.get(key);\r\n        let flag = val !== undefined;\r\n        return flag;\r\n    }\r\n\r\n    public static inArrays<T>(arr1: T[], arr2: T[], value: T): boolean {\r\n        return CommonUtils.inArray(arr1, value) || CommonUtils.inArray(arr2, value);\r\n    }\r\n\r\n    public static getKeys<T>(map: Map<T, any>): T[] {\r\n        let res: T[] = [];\r\n        for (let k of map.keys())\r\n            res.push(k);\r\n        return res;\r\n    }\r\n}\r\n\r\n\r\n"]}
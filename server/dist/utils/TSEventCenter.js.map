{"version":3,"file":"TSEventCenter.js","sourceRoot":"","sources":["../../src/utils/TSEventCenter.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateUtils } from \"./DateUtils\";\r\nimport { app } from \"../app\";\r\nimport { ServerType } from \"../register/route\";\r\nimport { CoroutineLock } from \"./CoroutineLock\";\r\n\r\nexport class TSEventCenter {\r\n    private static _inst: TSEventCenter;\r\n    static get Instance() {\r\n        if (TSEventCenter._inst == null) {\r\n            TSEventCenter._inst = new TSEventCenter();\r\n            TSEventCenter._inst.initInstance();\r\n        }\r\n        return TSEventCenter._inst;\r\n    }\r\n    initInstance() {\r\n    }\r\n\r\n    private cmdMap: Map<number, { thisobj: any, func: Function }> = new Map();\r\n    // private cmdCache: Map<number, { thisobj: any, func: Function }[]> = new Map();\r\n    private lockMap: Map<number, CoroutineLock> = new Map();\r\n    private rpcMap: Map<number, any[]> = new Map();\r\n    private dbMap: Map<string, any[]> = new Map();\r\n    private awaitMap: Map<number, any[]> = new Map();\r\n\r\n    //==============================以下是CMD的==============================\r\n    public bindCMD(cmd: number, thisobj: any, func: Function): boolean {\r\n        // let realKey = cmd;\r\n        let arr = this.cmdMap.get(cmd);\r\n        if (arr) {\r\n            console.error(\"重复注册事件,mainKey:\", cmd);\r\n            return false;\r\n        }\r\n        this.cmdMap.set(cmd, { func: func, thisobj: thisobj });\r\n        return true;\r\n    }\r\n\r\n\r\n    public unbindCMD(cmd: number, thisobj: any) {\r\n        this.cmdMap.delete(cmd);\r\n    }\r\n\r\n    private getCMDLock(roleUid: number): CoroutineLock {\r\n        let lock: CoroutineLock;\r\n        lock = this.lockMap.get(roleUid);\r\n        if (!lock) {\r\n            lock = new CoroutineLock();\r\n            this.lockMap.set(roleUid, lock);\r\n        }\r\n        return lock;\r\n    }\r\n\r\n    public clearCMD(roleUid: number) {\r\n        let lock = this.lockMap.get(roleUid);\r\n        if (lock) {\r\n            lock.clear();\r\n            this.lockMap.delete(roleUid);\r\n        }\r\n    }\r\n\r\n    public async eventCMDAsync(roleUid: number, mainKey: number, sonKey: number, ...data: any[]): Promise<any> {\r\n        let realKey = mainKey * 1000 + sonKey;\r\n\r\n        let time = DateUtils.timestamp();\r\n        let cmd = this.cmdMap.get(realKey);\r\n        if (!cmd) {\r\n            //没有注册CMD\r\n            return;\r\n        }\r\n\r\n        if (roleUid > 0) {\r\n            //战斗服允许不等待协议\r\n            //mainKey + sonKey == 303 302_1 有加速检测，如果之前的协议阻塞了，会导致玩家连续发送302_1而踢下线\r\n            if (app.serverType == ServerType.fight || mainKey + sonKey == 303) {\r\n                cmd.func.apply(cmd.thisobj, data);\r\n            } else {\r\n                //其他服务器必须进队列里等待\r\n                let lock: CoroutineLock = this.getCMDLock(roleUid);\r\n                await lock.lock();\r\n                try {\r\n                    await cmd.func.apply(cmd.thisobj, data);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n                lock.unlock();\r\n            }\r\n        } else {\r\n            await cmd.func.apply(cmd.thisobj, data);\r\n        }\r\n\r\n    }\r\n\r\n    //==============================以上是CMD的==============================\r\n\r\n    //==============================以下是RPC的==============================\r\n    public bind(name: number, thisobj: any, func: Function): boolean {\r\n        let arr = this.rpcMap.get(name);\r\n        if (arr) {\r\n            let len = arr.length;\r\n            for (let i = 0; i < len; i++) {\r\n                if (arr[i][0] == func && arr[i][1] == thisobj) {\r\n                    // warningLog(\"重复注册事件\", name);\r\n                    return false;\r\n                }\r\n            }\r\n        } else {\r\n            this.rpcMap.set(name, []);\r\n            arr = this.rpcMap.get(name);\r\n        }\r\n        arr?.push([func, thisobj]);\r\n        return true;\r\n    }\r\n\r\n\r\n    public unbind(name: number, thisobj: any) {\r\n        let arr = this.rpcMap.get(name);\r\n        if (arr) {\r\n            let len = arr.length;\r\n            for (let i = len - 1; i >= 0; i--) {\r\n                if (arr[i][1] == thisobj) {\r\n                    arr.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n        if (arr && arr.length == 0) {\r\n            this.rpcMap.delete(name);\r\n        }\r\n    }\r\n\r\n\r\n    public bindAwait(name: number, thisobj: any, func: Function): boolean {\r\n        let arr = this.awaitMap.get(name);\r\n        if (arr) {\r\n            console.error(\"同一个进程重复注册了bindAwait事件，请注意检查单例\", name);\r\n            return false;\r\n        } else {\r\n            this.awaitMap.set(name, [func, thisobj]);\r\n            return true;\r\n        };\r\n    }\r\n\r\n\r\n    public unbindAwait(name: number, thisobj: any) {\r\n        let arr = this.awaitMap.get(name);\r\n        if (arr) {\r\n            this.awaitMap.delete(name);\r\n        }\r\n    }\r\n\r\n\r\n    public event(name: number, ...data: any[]): void {\r\n        let time = DateUtils.timestamp();\r\n        let arr = this.rpcMap.get(name);\r\n        if (arr) {\r\n            for (let i = arr.length - 1; i >= 0; i--) {\r\n                let f: Function = arr[i][0];\r\n                f.apply(arr[i][1], data);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public async eventAwait(name: number, ...data: any[]): Promise<any[]> {\r\n        let time = DateUtils.timestamp();\r\n        let arr = this.awaitMap.get(name);\r\n        if (arr) {\r\n            let f: Function = arr[0];\r\n            let ret = await f.apply(arr[1], data);\r\n            return ret;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //==============================以上是RPC的==============================\r\n\r\n    ///========================以下是DB的===================================\r\n\r\n    public async eventDB(name: string, ...data: any[]): Promise<any> {\r\n        let time = DateUtils.timestamp();\r\n        let arr = this.dbMap.get(name);\r\n        if (arr) {\r\n            let f: Function = arr[0];\r\n            let ret = await f.apply(arr[1], data);\r\n            let time2 = DateUtils.timestamp();\r\n            let time3 = time2 - time;\r\n            return ret;\r\n        }\r\n        console.error(name + \"  错误，can not find db event process func\");\r\n        return null;\r\n    }\r\n\r\n\r\n    public bindDB(name: string, thisobj: any, func: Function) {\r\n        let arr = this.dbMap.get(name);\r\n        if (arr) {\r\n            console.error(\"重复注册数据库事件\", name);\r\n            return;\r\n        } else {\r\n            this.dbMap.set(name, [func, thisobj]);\r\n        }\r\n    }\r\n\r\n    public unbindDB(name: string) {\r\n        let arr = this.dbMap.get(name);\r\n        if (arr) {\r\n            this.dbMap.delete(name);\r\n        }\r\n    }\r\n\r\n    //==============================以上是DB的==============================\r\n}"]}
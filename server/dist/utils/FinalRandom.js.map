{"version":3,"file":"FinalRandom.js","sourceRoot":"","sources":["../../src/utils/FinalRandom.ts"],"names":[],"mappings":"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","sourcesContent":["import { CommonUtils } from \"./CommonUtils\";\n\nexport class FinalRandom {\n\n    /**\n     * 创建一个随机数生成器\n     */\n    public constructor(seed: number) {\n        this.seed = seed;\n        if (!this.seed && this.seed != 0) {\n            this.seed = new Date().getTime();\n        }\n    }\n    /**\n     * 设置用于随机数生成器的种子，如果不设置则实际是取当前时间毫秒数\n     */\n    private seed: number;\n    /**\n     * 返回一个随机数，在0.0～1.0之间\n     */\n    private get value(): number {\n        return this.range(0, 1);\n    }\n    \n    /**\n     * 返回一个在min和max之间的随机浮点数\n     */\n    private range(min: number, max: number): number {\n        if (!this.seed && this.seed != 0) {\n            this.seed = new Date().getTime();\n        }\n        max = max || 1;\n        min = min || 0;\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        var rnd = this.seed / 233280.0;\n        return min + rnd * (max - min);\n    }\n    /**\n     * 设置用于随机数生成器的种子，如果不设置则实际是取当前时间毫秒数\n     */\n    private static seed: number;\n    /**\n     * 返回一个随机数，在0.0～1.0之间\n     */\n    private static get value(): number {\n        return this.range(0, 1);\n    }\n   \n   \n    /**\n     * 返回一个在min和max之间的随机浮点数\n     */\n    private static range(min: number, max: number): number {\n        if (!this.seed || this.seed == 0) {\n            this.seed = new Date().getTime();\n        }\n\n        \n        this.seed = 2045 * (this.seed) + 1;\n        this.seed = this.seed - Math.floor((this.seed / 1048576)) * 1048576;\n        var t = (this.seed) / 1048576.0;\n        t = min + (max - min) * t;\n        return t;\n\n        // max = max || 1;\n        // min = min || 0;\n        // this.seed = (this.seed * 9301 + 49297) % 4999297;\n        // var rnd = this.seed / 4999297.0;\n        // return min + rnd * (max - min);\n    }\n    \n    /**\n     * 返回一个在[0,max)之间的整数\n     * @param max \n     */\n    public static RandInt(max: number): number {\n        return Math.floor(FinalRandom.range(0, max));\n    }\n\n\n    /**\n     * 返回一个在[min,max)之间的整数\n     * @param min \n     * @param max \n     */\n    public static RandIntBetween(min: number, max: number) {\n        let per:number = 1;\n        if (max < 100000) {\n            max = 10000 * max;\n            min = 10000 * min;\n            per = 10000;\n        }\n        return Math.floor(FinalRandom.range(min, max) / per);\n    }\n\n    /**\n     * 返回一个在[0，max)之间的浮点数\n     * @param max 最大数\n     */\n    public static RandFloat(max: number): number {\n        return FinalRandom.range(0, max);\n    }\n\n    /**\n     * 返回一个在[min,max)之间的浮点数\n     * @param min \n     * @param max \n     */\n    public static RandFloatBetween(min: number, max: number): number {\n        return FinalRandom.range(min, max);\n    }\n\n    // /**\n    //  * 均匀的计算随机数     \n    //  * @param maxSpeed \n    //  * @param minSpeed \n    //  * @returns \n    //  */\n    // public static RandIntBetween(minSpeed: number, maxSpeed: number) {\n    //     let per:number = 1;\n    //     if (maxSpeed < 100000) {\n    //         maxSpeed = 10000 * maxSpeed;\n    //         minSpeed = 10000 * minSpeed;\n    //         per = 10000;\n    //     }\n    //     // if (maxSpeed < 100) {\n    //     //     per = 100.0 / maxSpeed;\n    //     // }\n    //     // return Utils.randomNumber(maxSpeed, minSpeed);\n    //     //先把数值拆分为若干个10等份\n    //     let arr = [];\n    //     let max = maxSpeed / 10;\n    //     let min = minSpeed / 10;\n    //     let probability = [];\n    //     for (let i = min; i < max; i++) {\n    //         let item = [];\n    //         arr.push(item);\n    //         probability.push(1);\n    //         for (let j = 0; j <= 10; j++) {\n    //             item.push((i * 10) + j);\n    //         }\n    //     }\n    //     // cc.log(\" max \", max, \" min \", min, arr);\n    //     //均匀地选择其中一份\n    //     let item = arr[this.probabilityNumber(probability)];\n    //     //这种做法还是不均匀\n    //     // return item[Utils.randomNumber(item.length - 1, 0)];\n    //     //改用概率算法\n    //     //这种做法很均匀，但是效率低一点\n    //     return item[this.probabilityNumber([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])] / per;\n    // }\n\n     \n    // private static probabilityNumber(arr: number[]) {\n    //     let max = 0;\n    //     let itemArray: { max: number, min: number, probability: number }[] = [];\n    //     let min = 1;\n    //     for (let i = 0; i < arr.length; i++) {\n    //         let value = arr[i] * 100;\n    //         let item = {\n    //             max: min + value - 1,\n    //             min: min,\n    //             probability: value,\n    //         };\n    //         min = item.max + 1;\n    //         max += value;\n    //         itemArray.push(item);\n    //     }\n    //     // cc.log(\"probabilityNumber \",itemArray, max);\n    //     let randomNum = this.randomNumber(max, 1);\n    //     for (let i = 0; i < itemArray.length; i++) {\n    //         let item = itemArray[i];\n    //         if (randomNum >= item.min && randomNum <= item.max) {\n    //             return i;\n    //         }\n    //     }\n    //     throw new Error(\"unknow error\");\n    // }\n\n    // private static randomNumber(max: number, min: number): number {\n    //     return Math.round(Math.random() * (min - max) + max);\n    // }\n\n    public static async randTest() {\n        let arr = [];\n        let arrLian = [];\n        let old = 0;\n        for (let i = 0; i < 10000; i++) {\n            let num = this.RandIntBetween(5, 69);\n            // await CommonUtils.sleep(10);\n            // cc.log(num);\n            let index = num;\n            !arr[index] ? arr[index] = 0 : \"\";\n            !arrLian[index] ? arrLian[index] = 0 : \"\";\n            arr[index]++;\n            if (old == num) {\n                arrLian[index]++;\n            } else {\n                // arrLian[index] = 0;\n            }\n\n            old = num;\n        }\n        console.log(arr);\n        // console.log(arr);\n    }\n}\n"]}
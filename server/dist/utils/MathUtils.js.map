{"version":3,"file":"MathUtils.js","sourceRoot":"","sources":["../../src/utils/MathUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 数学工具\r\n * @author An\r\n */\r\n\r\n\r\nexport class MathUtils {\r\n    /**\r\n     * Degrees-to-radians conversion constant (Read Only).\r\n     */\r\n    public static readonly Deg2Rad: number = 0.01745329;\r\n    /**\r\n     * Radians-to-degrees conversion constant (Read Only).\r\n     */\r\n    public static readonly Rad2Deg: number = 57.29578;\r\n\r\n    /**\r\n     * 弧度制转换为角度值\r\n     * @param radian 弧度制\r\n     * @returns {number}\r\n     */\r\n    public static getAngle(radian: number): number {\r\n        return 180 * radian / Math.PI;\r\n\r\n    }\r\n\r\n    /**\r\n     * 角度值转换为弧度制\r\n     * @param angle\r\n     */\r\n    public static getRadian(angle: number): number {\r\n        return angle / 180 * Math.PI;\r\n    }\r\n\r\n    //计算两点间角度\r\n    public static getAngle2(x1: number, y1: number, x2: number, y2: number): number {\r\n        let r = MathUtils.getRadian2(x1, y1, x2, y2);\r\n        let angle = MathUtils.getAngle(r);\r\n        return angle;\r\n    }\r\n\r\n    public static clamp(value: number, min: number, max: number) {\r\n        if (value < min)\r\n            value = min;\r\n        if (value > max)\r\n            value = max;\r\n        return value;\r\n    }\r\n\r\n    public static clamp01(value: number) {\r\n        if (value < 0)\r\n            value = 0;\r\n        if (value > 1)\r\n            value = 1;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 获取两点间弧度\r\n     * @param p1X\r\n     * @param p1Y\r\n     * @param p2X\r\n     * @param p2Y\r\n     * @returns {number} 弧度\r\n     */\r\n\r\n    public static getRadian2(p1X: number, p1Y: number, p2X: number, p2Y: number): number {\r\n        let xdis: number = p2X - p1X;\r\n        let ydis: number = p2Y - p1Y;\r\n        return Math.atan2(ydis, xdis);\r\n    }\r\n\r\n    /**\r\n     *  获取两个点的欧式距离的平方\r\n     * @param p1X\r\n     * @param p1Y\r\n     * @param p2X\r\n     * @param p2Y\r\n     * @returns {number} 距离\r\n     */\r\n    public static getSquareOfEuclideanDistance(p1X: number, p1Y: number, p2X: number, p2Y: number): number {\r\n        let disX: number = p2X - p1X;\r\n        let disY: number = p2Y - p1Y;\r\n        let disQ: number = disX * disX + disY * disY;\r\n        return disQ;\r\n    }\r\n\r\n    //获取两个点的欧氏距离\r\n    public static getEuclideanDistance(p1X: number, p1Y: number, p2X: number, p2Y: number): number {\r\n        let disX: number = p2X - p1X;\r\n        let disY: number = p2Y - p1Y;\r\n        let disQ: number = Math.sqrt(disX * disX + disY * disY);\r\n        return disQ;\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取两个点的欧式距离的平方\r\n     * @param s 点1\r\n     * @param t 点2\r\n     */\r\n    public static getSquareOfEuclideanDistanceByObject(s: { x: number, y: number }, t: { x: number, y: number }): number {\r\n        return this.getSquareOfEuclideanDistance(s.x, s.y, t.x, t.y);\r\n    }\r\n\r\n    //曼哈顿距离\r\n    public static getManhattanDistanceByXY(x1: number, y1: number, x2: number, y2: number) {\r\n        return Math.abs(x1 - x2) + Math.abs(y1 - y2);\r\n    }\r\n\r\n    /**\r\n     * 获取一个区间的随机数 [$min,$max)\r\n     * @param $from 最小值\r\n     * @param $end 最大值\r\n     * @returns {number}\r\n     */\r\n    public static random($from: number, $end: number): number {\r\n        $from = Math.min($from, $end);\r\n        $end = Math.max($from, $end);\r\n        let range: number = $end - $from;\r\n        return $from + Math.random() * range;\r\n    }\r\n\r\n    /**\r\n     * 获取一个区间的随机整数  [min,max]\r\n     * @param min\r\n     * @param max\r\n     */\r\n    public static randomInt(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    /**\r\n     * 命中判定\r\n     * @param rate 成功率 万分比 精度到小数后两位  比如 30.50% 则 传入 3050\r\n     * @return 是否判定成功\r\n     */\r\n    public static scoreAHit(rate: number): boolean {\r\n        let num = Math.floor(Math.random() * 10000);\r\n        if (rate < num) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 圆桌判定暴击\r\n     * @param rateArr 暴击率数组 万分比\r\n     * @param critMulArr 暴击倍数数组\r\n     * @return 伤害倍数\r\n     */\r\n    public static roundTableCrit(rateArr: number[], critMulArr: number[]): number {\r\n        let num = Math.floor(Math.random() * 10000);\r\n        for (let i = 0; i < rateArr.length; i++) {\r\n            let rate = rateArr[i];\r\n            if (rate > num) {\r\n                return critMulArr[i];\r\n            }\r\n        }\r\n        return 1;//普攻是1倍伤害\r\n    }\r\n\r\n    /**\r\n     * 在一个数组中随机获取一个元素\r\n     * @param arr 数组\r\n     * @returns {any} 随机出来的结果\r\n     */\r\n    public static randomArray(arr: any[]): any {\r\n        let index: number = Math.floor(Math.random() * arr.length);\r\n        return arr[index];\r\n    }\r\n\r\n    /**\r\n     * 在一个数组中随机获取一个元素,返回该元素所在的索引\r\n     * @param arr 数组\r\n     * @returns {any} 随机出来的结果\r\n     */\r\n    public static randomArrayGetIndex(arr: any[]): any {\r\n        let index: number = Math.floor(Math.random() * arr.length);\r\n        return index;\r\n    }\r\n\r\n    /**取整 */\r\n    public static toInteger(value: number): number {\r\n        return value >> 0;\r\n    }\r\n\r\n    /**\r\n     * 根据弧度和速度获取分量速度\r\n     * @param angle 弧度\r\n     * @param speed 速度\r\n     */\r\n    public static AngleToXYSpeed(angle: number, speed: number): number[] {\r\n        if (!speed) {\r\n            return [0, 0];\r\n        }\r\n        let vx = (Math.sin(angle) * -speed);\r\n        let vy = (Math.cos(angle) * -speed);\r\n        return [vx, vy];\r\n    }\r\n\r\n    /**\r\n     * 把指定点进行旋转变换\r\n     * @param x 点X\r\n     * @param y 点Y\r\n     * @param rotation 角度 360\r\n     */\r\n    public static rotationPoint(x: number, y: number, rotation: number): number[] {\r\n        let radian = MathUtils.getRadian(rotation);\r\n        let nx = x * Math.cos(radian) - y * Math.sin(radian);\r\n        let ny = x * Math.sin(radian) + y * Math.cos(radian);\r\n        //unity左手坐标，要把X取负数\r\n        return [-nx, ny];\r\n    }\r\n\r\n    /**\r\n     * 判断点是否在矩形内\r\n     * @param x 点X\r\n     * @param y 点Y\r\n     * @param width 矩形宽\r\n     * @param height 矩形长\r\n     * @param rotation 矩形旋转角度\r\n     * @param centerX 矩形中心点\r\n     * @param centerY 矩形中心点\r\n     */\r\n    public static inRect(x: number, y: number, width: number, height: number, rotation: number, centerX: number, centerY: number): boolean {\r\n        let hw = width * 0.5;\r\n        let hh = height * 0.5;\r\n        if (rotation == 0) {\r\n            //无旋转时，用最简方法，减少运算\r\n            // gzaLog(x, centerX + hw, centerX - hw, y, centerY + hh, centerY - hh);\r\n            if (x < centerX + hw && x > centerX - hw && y < centerY + hh && y > centerY - hh) {\r\n                return true;\r\n            }\r\n        } else {\r\n            let r = -rotation * (Math.PI / 180)\r\n            let nTempX = centerX + (x - centerX) * Math.cos(r) - (y - centerY) * Math.sin(r);\r\n            let nTempY = centerY + (x - centerX) * Math.sin(r) + (y - centerY) * Math.cos(r);\r\n            if (nTempX > centerX - hw && nTempX < centerX + hw && nTempY > centerY - hh && nTempY < centerY + hh) {\r\n                return true;\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    /**\r\n     * 判断点是否在矩形内 当前战斗专用,性能优化版本，起点是矩形的中心点 \r\n     * @param x 点X\r\n     * @param y 点Y\r\n     * @param width 矩形宽\r\n     * @param height 矩形长\r\n     * @param rotation 矩形旋转角度\r\n     * @param centerX 矩形中心点\r\n     * @param centerY 矩形中心点\r\n     */\r\n    // public static inRectByNowFight(x: number, y: number, width: number, height: number, centerX: number, centerY: number, isFlip: boolean): boolean {\r\n    //     let hh = height * 0.5;\r\n    //     if (y < centerY + hh && y > centerY - hh) {\r\n    //         let hw = width * 0.5;\r\n    //         if (isFlip) {\r\n    //             if (x < centerX - hw && x > centerX + hw) {\r\n    //                 return true;\r\n    //             }\r\n    //         } else {\r\n    //             if (x < centerX + hw && x > centerX - hw) {\r\n    //                 return true;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return false;\r\n    // }\r\n\r\n    //已知矩形的四个点，求点是否在矩形内\r\n    public static inRectBy4Point(x: number, y: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): boolean {\r\n        // 判断点是否在矩形的边界上\r\n        if ((x >= x1 && x <= x2 && y >= y1 && y <= y2) || (x >= x2 && x <= x1 && y >= y2 && y <= y1)) {\r\n            return true;\r\n        }\r\n\r\n        // 统计射线与矩形边界的交点个数\r\n        let count = 0;\r\n\r\n        // 用辅助函数判断射线与边的交点个数\r\n        function checkIntersection(x1: number, y1: number, x2: number, y2: number, px: number, py: number): boolean {\r\n            if ((py < y1 && py < y2) || (py > y1 && py > y2)) {\r\n                return false; // 不相交，返回 false\r\n            }\r\n            if (py === y1 && py === y2) {\r\n                if ((px >= x1 && px <= x2) || (px >= x2 && px <= x1)) {\r\n                    return true; // 在边界上，返回 true\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            let x = (py - y1) * (x2 - x1) / (y2 - y1) + x1; // 计算交点的横坐标\r\n            if (x <= px) {\r\n                count++;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // 判断点与每条边的关系\r\n        checkIntersection(x1, y1, x2, y2, x, y);\r\n        checkIntersection(x2, y2, x3, y3, x, y);\r\n        checkIntersection(x3, y3, x4, y4, x, y);\r\n        checkIntersection(x4, y4, x1, y1, x, y);\r\n\r\n        // 判断交点的个数\r\n        if (count % 2 === 1) {\r\n            return true; // 奇数个交点，点在矩形内部\r\n        } else {\r\n            return false; // 偶数个交点，点在矩形外部\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 判断点是否在等斜边梯形上\r\n     * @param x \r\n     * @param y \r\n     * @param upLineLeftX \r\n     * @param upLineLeftY \r\n     * @param upLineRightX \r\n     * @param upLineRightY\r\n     * @param downLineLeftX \r\n     * @param downLineLeftY \r\n     * @param downLineRightX \r\n     * @param downLineRightY\r\n     * @returns \r\n     */\r\n    public static ponitInTrapezoid(x: number, y: number, upLineLeftX: number, upLineLeftY: number, upLineRightX: number, upLineRightY: number, downLineLeftX: number, downLineLeftY: number, downLineRightX: number, downLineRightY: number, upLineLength: number, downLineLength: number, height: number) {\r\n        //如果长边在底边\r\n        if (downLineLength > upLineLength) {\r\n            let sanjiaoLength = (downLineLength - upLineLength) * 0.5;\r\n            //三角形的三个点分别是，downLineLeft upLineLeft,以及downLineLeft+sanjiaoLength\r\n            //计算梯形左侧三角形\r\n            let pointXY1 = this.getPointOnLine(downLineLeftX, downLineLeftY, downLineRightX, downLineRightY, sanjiaoLength);\r\n            // console.log(\"aa\", sanjiaoLength, pointXY1);\r\n            // console.log(\"aa1\", x, y, downLineLeftX, downLineLeftY, upLineLeftX, upLineLeftY, pointXY1.x, pointXY1.y);\r\n            let inSanjiao = this.pointInTriangle(x, y, downLineLeftX, downLineLeftY, upLineLeftX, upLineLeftY, pointXY1.x, pointXY1.y);\r\n            if (inSanjiao) {\r\n                return true;\r\n            }\r\n            //计算梯形右侧三角形\r\n            let pointXY2 = this.getPointOnLine(downLineRightX, downLineRightY, downLineLeftX, downLineLeftY, sanjiaoLength);\r\n            // console.log(\"bb\", sanjiaoLength, pointXY2);\r\n            // console.log(\"bb1\", x, y, downLineRightX, downLineRightY, upLineRightX, upLineRightY, pointXY2.x, pointXY2.y);\r\n            inSanjiao = this.pointInTriangle(x, y, downLineRightX, downLineRightY, upLineRightX, upLineRightY, pointXY2.x, pointXY2.y);\r\n            if (inSanjiao) {\r\n                return true;\r\n            }\r\n            //计算梯形中间正方形\r\n            // console.log(\"dd\", x, y, upLineLeftX, upLineLeftY, upLineRightX, upLineRightY, pointXY2.x, pointXY2.y, pointXY1.x, pointXY1.y);\r\n            let inRect = this.inRectBy4Point(x, y, upLineLeftX, upLineLeftY, upLineRightX, upLineRightY, pointXY2.x, pointXY2.y, pointXY1.x, pointXY1.y);\r\n            if (inRect) {\r\n                return true;\r\n            }\r\n        } else {\r\n            let sanjiaoLength = (upLineLength - downLineLength) * 0.5;\r\n            //三角形的三个点分别是，downLineLeft upLineLeft,以及downLineLeft+sanjiaoLength\r\n            //计算梯形左侧三角形\r\n            let pointXY1 = this.getPointOnLine(upLineLeftX, upLineLeftY, upLineRightX, upLineRightY, sanjiaoLength)\r\n            let inSanjiao = this.pointInTriangle(x, y, upLineLeftX, upLineLeftY, downLineLeftX, downLineLeftY, pointXY1.x, pointXY1.y);\r\n            if (inSanjiao) {\r\n                return true;\r\n            }\r\n            //计算梯形右侧三角形\r\n            let pointXY2 = this.getPointOnLine(upLineRightX, upLineRightY, upLineLeftX, upLineLeftY, sanjiaoLength)\r\n            inSanjiao = this.pointInTriangle(x, y, downLineRightX, downLineRightY, upLineRightX, upLineRightY, pointXY2.x, pointXY2.y);\r\n            if (inSanjiao) {\r\n                return true;\r\n            }\r\n\r\n            //计算梯形中间正方形\r\n            let inRect = this.inRectBy4Point(x, y, downLineLeftX, downLineLeftY, downLineRightX, downLineRightY, pointXY1.x, pointXY1.y, pointXY2.x, pointXY2.y);\r\n            if (inRect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n    //从点1到点2的线上，从点1延长指定距离，获得移动该距离后的点\r\n    public static getPointOnLine(x1: number, y1: number, x2: number, y2: number, length: number): { x: number, y: number } {\r\n        let dx = x2 - x1;\r\n        let dy = y2 - y1;\r\n\r\n        // 计算角度\r\n        let angle = Math.atan2(dy, dx);\r\n\r\n        // 计算长度L的向量\r\n        let lengthVector = { x: Math.cos(angle) * length, y: Math.sin(angle) * length };\r\n\r\n        // 计算终点坐标\r\n        let endPoint = { x: x1 + lengthVector.x, y: y1 + lengthVector.y };\r\n\r\n        return endPoint;\r\n    }\r\n\r\n    //点乘\r\n    public static dotProduct(x1, y1, x2, y2) {\r\n        return x1 * x2 + y1 * y2\r\n    }\r\n\r\n    //判断点是否在三角形内\r\n    public static pointInTriangle(x: number, y: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): boolean {\r\n        //判断4点共面，但是我们是2D的不需要\r\n        // if (this.pointInTrianglePlane(p, a, b, c) == false)\r\n        //     return false;\r\n        let xAC = x3 - x1;\r\n        let yAC = y3 - y1;\r\n        let xAB = x2 - x1;\r\n        let yAB = y2 - y1;\r\n        let xAP = x - x1;\r\n        let yAP = y - y1;\r\n\r\n        let f_i = this.dotProduct(xAP, yAP, xAC, yAC) * this.dotProduct(xAB, yAB, xAB, yAB) - this.dotProduct(xAP, yAP, xAB, yAB) * this.dotProduct(xAC, yAC, xAB, yAB);\r\n        let f_j = this.dotProduct(xAP, yAP, xAB, yAB) * this.dotProduct(xAC, yAC, xAC, yAC) - this.dotProduct(xAP, yAP, xAC, yAC) * this.dotProduct(xAB, yAB, xAC, yAC);\r\n        let f_d = this.dotProduct(xAC, yAC, xAC, yAC) * this.dotProduct(xAB, yAB, xAB, yAB) - this.dotProduct(xAC, yAC, xAB, yAB) * this.dotProduct(xAC, yAC, xAB, yAB);\r\n        if (f_d < 0) {\r\n            console.error(\"异常的三角形数据\", x1, y1, x2, y2, x3, y3, x, y);\r\n        }\r\n\r\n        if (f_i >= 0 && f_j >= 0 && f_i + f_j - f_d <= 0)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    //判断4点共面，3D才会用到\r\n    // static public bool pointInTrianglePlane(Vector3 p, Vector3 a, Vector3 b, Vector3 c) {\r\n    //        Vector3 pa = a - p;\r\n    //       Vector3 pb = b - p;\r\n    //        Vector3 pc = c - p;\r\n\r\n    //        Vector3 normal1 = Vector3.Cross(pa, pb);\r\n    //       Vector3 normal2 = Vector3.Cross(pa, pc);\r\n    //        Vector3 result = Vector3.Cross(normal1, normal2);\r\n    //     //证明：若pab平面的法向量平行于pac平面的法向量，则说明平面pab和pac平行或重合，\r\n    //     //且p点为两平面公共点，所以pab、pac平面重合，pabc四点共面。\r\n    //     if (result == Vector3.zero) {\r\n    //         Debug.Log(result);\r\n    //         return true;\r\n    //     }\r\n    //     else\r\n    //         return false;\r\n    // }\r\n\r\n\r\n    /**\r\n     * 判断点在圆内\r\n     * @param x 点X\r\n     * @param y 点Y\r\n     * @param centerX 圆心X\r\n     * @param centerY 圆心Y\r\n     * @param r 圆半径\r\n     */\r\n    public static inCircle(x: number, y: number, centerX: number, centerY: number, r: number): boolean {\r\n        let dis = MathUtils.getSquareOfEuclideanDistance(x, y, centerX, centerY);\r\n        // gzaLog(\"判断圆位置\");\r\n        if (dis <= r * r) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // public static runOffset(hitArea: HitArea, seachX: number, seachZ: number, direction: number): number[] {\r\n    //     let newSeachZ = seachZ;\r\n    //     let newSeachX = seachX;\r\n    //     switch (hitArea.shape) {\r\n    //         case 1:\r\n    //             if (direction && hitArea.rangeAngle == 2) {\r\n    //                 let ro = MathUtils.rotationPoint(hitArea.xoffset, hitArea.zoffset, direction);\r\n    //                 newSeachX += ro[0];\r\n    //                 newSeachZ += ro[1];\r\n    //             } else {\r\n    //                 let ro = MathUtils.rotationPoint(hitArea.xoffset, hitArea.zoffset, hitArea.rotation);\r\n    //                 newSeachX += ro[0];\r\n    //                 newSeachZ += ro[1];\r\n    //             }\r\n    //     }\r\n    //     return [newSeachX, newSeachZ];\r\n    // }\r\n\r\n    // /**\r\n    //  * 向量旋转\r\n    //  * @param vec2\r\n    //  * @param euler\r\n    //  */\r\n    // public static vector2Rotate(vec2: UnityEngine.Vector2, euler: number) {\r\n    //     let r = euler * 0.01745329;\r\n    //     return new UnityEngine.Vector2(\r\n    //         vec2.x * Math.cos(r) - vec2.y * Math.sin(r),\r\n    //         vec2.x * Math.sin(r) + vec2.y * Math.cos(r)\r\n    //     );\r\n    // }\r\n    /**\r\n  * 向量旋转\r\n  * @param vec2\r\n  * @param euler\r\n  */\r\n    public static vector2Rotate(vec2: number[], euler: number): number[] {\r\n        let r = euler * this.Deg2Rad;\r\n        return [vec2[0] * Math.cos(r) - vec2[1] * Math.sin(r),\r\n        vec2[0] * Math.sin(r) + vec2[1] * Math.cos(r)];\r\n        // );\r\n    }\r\n\r\n    /**\r\n     * 获取概率\r\n     * @param rate 命中占比\r\n     * @param rateTotal 总数\r\n     */\r\n    public static getProbResult(rate: number, rateTotal: number = 100) {\r\n        return Math.random() * rateTotal <= rate;\r\n    }\r\n\r\n    //\r\n    /**\r\n     * 不重复抽取数组内指定数量的元素 请注意:此方法不会自动去重，\r\n     * @param arr \r\n     * @param num \r\n     * @returns \r\n     */\r\n    public static getArrayItems<T>(arr: T[], num: number): T[] {\r\n        //新建一个数组,将传入的数组复制过来,用于运算,而不要直接操作传入的数组;\r\n        let temp_array: T[] = [];\r\n        for (let index in arr) {\r\n            temp_array.push(arr[index]);\r\n        }\r\n        //取出的数值项,保存在此数组\r\n        let return_array: T[] = [];\r\n        for (let i = 0; i < num; i++) {\r\n            //判断如果数组还有可以取出的元素,以防下标越界\r\n            if (temp_array.length > 0) {\r\n                //在数组中产生一个随机索引\r\n                let arrIndex = Math.floor(Math.random() * temp_array.length);\r\n                //将此随机索引的对应的数组元素值复制出来\r\n                return_array[i] = temp_array[arrIndex];\r\n                //然后删掉此索引的数组元素,这时候temp_array变为新的数组\r\n                temp_array.splice(arrIndex, 1);\r\n            } else {\r\n                //数组中数据项取完后,退出循环,比如数组本来只有10项,但要求取出20项.\r\n                break;\r\n            }\r\n        }\r\n        return return_array;\r\n    }\r\n\r\n}"]}
{"version":3,"file":"SystemUnlockMgr.js","sourceRoot":"","sources":["../../src/utils/SystemUnlockMgr.ts"],"names":[],"mappings":";;;AAAA;;;;GAIG;AACH,+CAA4C;AAE5C,mDAAgD;AAEhD,6DAA0D;AAE1D,MAAa,eAAgB,SAAQ,mBAAQ;IAClC,MAAM,KAAK,QAAQ;QACtB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,0BAA0B,CAAC,QAAkB,EAAE,MAAkB;QACpE,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,IAAI,MAAM,GAAG,qBAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACnE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YACd,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,QAAQ;YACT,OAAO,KAAK,CAAC;QAEjB,IAAI,cAAc,GAAG,MAAM,EAAE,mBAAmB,CAAC;QACjD,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;YAC/B,cAAc,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE;gBACrC,IAAI,KAAK,GAAG,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;gBAC9C,QAAQ,QAAQ,EAAE;oBACd,KAAK,+BAAc,CAAC,KAAK,CAAC,CAAC;wBACvB,IAAI,MAAM,GAAG,KAAK,CAAC;wBACnB,IAAI,QAAQ,CAAC,KAAK,GAAG,MAAM;4BACvB,MAAM,GAAG,KAAK,CAAC;wBACnB,MAAM;qBACT;oBACD,OAAO,CAAC,CAAC;wBACL,MAAM;qBACT;iBACJ;YACL,CAAC,CAAC,CAAC;SACN;QAGD,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AAzCD,0CAyCC","sourcesContent":["/**\r\n * @Doc 系统解锁管理器\r\n * @Author kL\r\n * @Date 2022/12/8 15:38\r\n */\r\nimport { Sigleton } from \"../core/Sigleton\";\r\nimport { GameSystem } from \"../config/GameSystem\";\r\nimport { ConfigMgr } from \"../config/ConfigMgr\";\r\nimport { RoleData } from \"../database/RoleTable\";\r\nimport { UnlockCondType } from \"../config/UnlockCondType\";\r\n\r\nexport class SystemUnlockMgr extends Sigleton {\r\n    public static get Instance(): SystemUnlockMgr {\r\n        return this.getInstance();\r\n    }\r\n\r\n    /**\r\n     * 判断系统解锁条件是否达成\r\n     * @param system\r\n     * @param ifLockThenTips 如果未解锁则弹出提示\r\n     */\r\n    public checkSystemUnlockCondition(roleData: RoleData, system: GameSystem) {\r\n        let result = true;\r\n        let config = ConfigMgr.Instance.GameSystemConfig.get(system, true);\r\n        if (!config.open) {\r\n            return false;\r\n        }\r\n\r\n        if (!roleData)\r\n            return false;\r\n\r\n        let conditionTypes = config?.unlockConditionType;\r\n        if (Array.isArray(conditionTypes)) {\r\n            conditionTypes.forEach((condType, idx) => {\r\n                let param = config.unlockConditionParams[idx];\r\n                switch (condType) {\r\n                    case UnlockCondType.Level: {\r\n                        let needLv = param;\r\n                        if (roleData.level < needLv)\r\n                            result = false;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}
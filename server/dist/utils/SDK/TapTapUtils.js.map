{"version":3,"file":"TapTapUtils.js","sourceRoot":"","sources":["../../../src/utils/SDK/TapTapUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { errLog, gzaLog } from \"../../LogTS\";\r\n\r\nimport urllib from 'urllib';\r\nimport crypto from 'crypto';\r\nimport { LoginResultCode } from \"../../config/LoginResultCode\";\r\nlet nonce = crypto.randomBytes(16).toString('base64');\r\n// let TapTapClientId = \"3k92xr9fwvhqa8bdkg\";\r\nlet TapTapClientId = \"mrbdcvfk05vznsw6pf\";\r\n\r\nexport class TapTapUtils {\r\n    /**\r\n    TapSDK 登录后信息获取\r\n    **/\r\n\r\n    // let kid = \"1/hC0vtMo7ke0Hkd-iI8-zcAwy7vKds9si93l7qBmNFxJkylWEOYEzGqa7k_9iw_bb3vizf-3CHc6U8hs-5a74bMFzkkz7qC2HdifBEHsW9wxOBn4OsF9vz4Cc6CWijkomnOHdwt8Km6TywOX5cxyQv0fnQQ9fEHbptkIJagCd33eBXg76grKmKsIR-YUZd1oVHu0aZ6BR7tpYYsCLl-LM6ilf8LZpahxQ28n2c-y33d-20YRY5NW1SnR7BorFbd00ZP97N9kwDncoM1GvSZ7n90_0ZWj4a12x1rfAWLuKEimw1oMGl574L0wE5mGoshPa-CYASaQmBDo3Q69XbjTsKQ\";\r\n    // let mac_key = \"mSUQNYUGRBPXyRyW\";\r\n    // \r\n    public static getMacToken(kid: string, mac_key: string/*, client_id: string**/): string {\r\n        let ts = Math.ceil(Date.now() / 1000);\r\n        let ext = \"\";\r\n        // let signArray = [ts, nonce, 'GET', '/account/profile/v1?client_id=' + client_id, 'openapi.taptap.com', 443, ext];\r\n        let signArray = [ts, nonce, 'GET', '/account/basic-info/v1?client_id=' + TapTapClientId, 'openapi.taptap.com', 443, ext];\r\n        let mac = this.hmacSha1(signArray.join(\"\\n\") + \"\\n\", mac_key);\r\n        // let auth = format('MAC id={id},ts={ts},nonce={nonce},mac={mac}', {\r\n        //     id: '\\\"' + kid + '\\\"',\r\n        //     ts: '\\\"' + ts + '\\\"',\r\n        //     nonce: '\\\"' + nonce + '\\\"',\r\n        //     mac: '\\\"' + mac + '\\\"'\r\n        // });\r\n\r\n        let id = '\\\"' + kid + '\\\"';\r\n        let ts2 = '\\\"' + ts + '\\\"';\r\n        let nonce2 = '\\\"' + nonce + '\\\"';\r\n        let mac2 = '\\\"' + mac + '\\\"';\r\n\r\n        let auth = `MAC id=${id},ts=${ts2},nonce=${nonce2},mac=${mac2}`;\r\n        // gzaLog(\"token\", auth);\r\n        return auth;\r\n    }\r\n\r\n    public static async getUnionid(macToken: string): Promise<[number, string]> {\r\n        let headers = {\r\n            authorization: macToken\r\n        }\r\n\r\n        let baseUrl = \"https://openapi.taptap.com/account/basic-info/v1?client_id=\";\r\n        let data = await urllib.request(baseUrl + TapTapClientId, { method: \"GET\", headers: headers, dataType: 'json' });\r\n        if (data.statusCode == 200) {\r\n            if (data.data.success) {\r\n                return [LoginResultCode.Succeed, data.data.data.unionid];\r\n            }\r\n        } else if (data.statusCode == 401) {\r\n            return [LoginResultCode.TapTapParamIllegal, null];\r\n        } else if (data.statusCode == 500) {\r\n            return [LoginResultCode.TryReconnentTapTap, null];\r\n        } else if (data.statusCode == 400) {\r\n            return [LoginResultCode.TapTapError, null];\r\n        } else if (data.statusCode == 403) {\r\n            return [LoginResultCode.TapTapError, null];\r\n        }\r\n\r\n        errLog(\"TapTap GetUnionID Error\", data);\r\n        return [LoginResultCode.TapTapError, null];\r\n    }\r\n\r\n    public static async getFCM(unionId: string, fcmtoken: string): Promise<LoginResultCode> {\r\n        // curl -X POST \\\r\n        //   -H \"Content-Type: application/json\" \\\r\n        //   -H 'Authorization: {{token}}' \\\r\n        //   https://tds-tapsdk.cn.tapapis.com/anti-addiction/v1/clients/{{clientId}}/users/{{userIdentifier}}/playable\r\n        let headers = {\r\n            authorization: fcmtoken\r\n        }\r\n\r\n        // let baseUrl = `https://tds-tapsdk.cn.tapapis.com/anti-addiction/v1/clients/${TapTapClientId}/users/${unionId}/playable`;\r\n        // let data = await urllib.request(baseUrl, { method: \"POST\", headers: headers, dataType: 'json' });\r\n        // if (data.statusCode == 200) {\r\n        //     gzaLog(\"getFCM\", data.data);\r\n        //     if (data.data.data.code == 200) {\r\n        //         if (data.data.data.can_play == true) {\r\n                    return LoginResultCode.Succeed;\r\n        //         } else {\r\n        //             return LoginResultCode.FCMOutTime;\r\n        //         }\r\n        //     } else {\r\n        //         return LoginResultCode.NotFCM;\r\n        //     }\r\n        // }\r\n        return LoginResultCode.NotFCM;\r\n    }\r\n\r\n\r\n\r\n    public static base64ToUrlSafe(v) {\r\n        return v.replace(/\\//g, '_').replace(/\\+/g, '-');\r\n    };\r\n\r\n    public static urlsafeBase64Encode(jsonFlags) {\r\n        let encoded = Buffer.from(jsonFlags).toString('base64');\r\n        return TapTapUtils.base64ToUrlSafe(encoded);\r\n    };\r\n\r\n    public static hmacSha1(encodedFlags, secretKey) {\r\n        let hmac = crypto.createHmac('sha1', secretKey);\r\n        hmac.update(encodedFlags);\r\n        return hmac.digest('base64');\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}
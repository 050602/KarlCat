{"version":3,"file":"ObjectPool.js","sourceRoot":"","sources":["../../src/core/ObjectPool.ts"],"names":[],"mappings":";;;AAAA,gCAAiC;AAGjC;;;;GAIG;AACH,MAAa,UAAU;IAGnB;;;OAGG;IACI,MAAM,CAAC,GAAG,CAAwB,IAAmB,EAAE,oBAA6B,KAAK;QAC5F,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;YACpC,IAAI,iBAAiB,EAAE;gBACnB,OAAO,IAAI,CAAC;aACf;iBAAM;gBACH,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;gBACtB,OAAO,IAAI,CAAC;aACf;SACJ;QAED,IAAI,GAAG,GAAM,KAAK,CAAC,GAAG,EAAO,CAAC;QAC9B,IAAI,GAAG,CAAC,MAAM,EAAE;YACZ,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC;YACnB,OAAO,GAAG,CAAC;SACd;aAAM;YACH,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACnC,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACtB,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAGD;;;OAGG;IACI,MAAM,CAAC,OAAO,CAAC,MAAmB;QACrC,IAAI,MAAM,IAAI,IAAI;YACd,OAAO;QAEX,aAAa;QACb,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC;QAClD,IAAI,MAAM,CAAC,MAAM,IAAI,aAAO,EAAE;YAC1B,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,SAAS,CAAE,CAAC;YACvC,OAAO;SACV;QAGD,MAAM,CAAC,UAAU,EAAE,CAAC;QACpB,IAAI,KAAK,GAAkB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACrD,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,KAAK,GAAG,EAAE,CAAC;YACX,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;SACpC;QACD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA,OAAO;QAC1B,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;IACzB,CAAC;IAGM,MAAM,CAAC,KAAK;QACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;;AA3DL,gCA4DC;AA3DkB,gBAAK,GAA+B,IAAI,GAAG,EAAyB,CAAC","sourcesContent":["import { isDebug } from \"../app\";\r\nimport { IObjectPool } from \"./IObjectPool\";\r\n\r\n/**\r\n * @Doc 对象池\r\n * @Author kL\r\n * @Date 2022/5/20 13:45\r\n */\r\nexport class ObjectPool {\r\n    private static _pool: Map<string, IObjectPool[]> = new Map<string, IObjectPool[]>();\r\n\r\n    /**\r\n     * 从对象池中取出\r\n     * @param type 类型\r\n     */\r\n    public static get<T extends IObjectPool>(type: (new () => T), ifEmptyReturnNull: boolean = false): T {\r\n        let array = this._pool.get(type.name);\r\n        if (array == null || array.length == 0) {\r\n            if (ifEmptyReturnNull) {\r\n                return null;\r\n            } else {\r\n                let newC = new type();\r\n                return newC;\r\n            }\r\n        }\r\n\r\n        let obj: T = array.pop() as T;\r\n        if (obj.inPool) {\r\n            obj.inPool = false;\r\n            return obj;\r\n        } else {\r\n            console.error(\"一个还在池外的对象，被推入过对象池\");\r\n            let newC = new type();\r\n            return newC;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 回收\r\n     * @param object 对象\r\n     */\r\n    public static recycle(object: IObjectPool) {\r\n        if (object == null)\r\n            return;\r\n\r\n        // @ts-ignore\r\n        let className = object.__proto__.constructor.name;\r\n        if (object.inPool && isDebug) {\r\n            console.error(\"存在二次回收的对象\", className,);\r\n            return;\r\n        }\r\n\r\n\r\n        object.onRecycled();\r\n        let array: IObjectPool[] = this._pool.get(className);\r\n        if (array == null) {\r\n            array = [];\r\n            this._pool.set(className, array);\r\n        }\r\n        array.push(object);//停用对象池\r\n        object.inPool = true;\r\n    }\r\n\r\n\r\n    public static clear() {\r\n        this._pool.clear();\r\n    }\r\n}"]}
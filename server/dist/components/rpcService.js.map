{"version":3,"file":"rpcService.js","sourceRoot":"","sources":["../../src/components/rpcService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * rpc connection management, sending rpc messages\r\n */\r\n\r\n\r\nimport { Application } from \"../application\";\r\nimport { RpcEvent } from \"../event/RpcEvent\";\r\nimport { I_rpcMsg, I_rpcTimeout } from \"../util/interfaceDefine\";\r\nimport { TSEventCenter } from \"../utils/TSEventCenter\";\r\nimport define = require(\"../util/define\");\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\n\r\nlet app: Application;\r\nlet rpcId = 1;  // Must start from 1, not 0\r\nlet rpcRequest: { [id: number]: I_rpcTimeout } = {};\r\nlet rpcTimeMax: number = 10 * 1000; //overtime time\r\nlet outTime = 0;    // Current time + timeout\r\nlet msgQueueDic: { [serverId: string]: { \"rpcTimeout\": I_rpcTimeout | null, \"buf\": Buffer, \"time\": number }[] } = {};\r\nlet msgCacheCount = 5000;\r\nlet rpc: rpc_create;\r\n\r\n/**\r\n * init\r\n * @param _app \r\n */\r\nexport function init(_app: Application) {\r\n    app = _app;\r\n    let rpcConfig = app.someconfig.rpc || {};\r\n    let rpcMsgCacheCount = parseInt(rpcConfig.rpcMsgCacheCount as any);\r\n    if (rpcMsgCacheCount >= 0) {\r\n        msgCacheCount = rpcMsgCacheCount;\r\n    }\r\n\r\n    let timeout = Number(rpcConfig.timeout) || 0;\r\n    if (timeout >= 5) {\r\n        rpcTimeMax = timeout * 1000;\r\n    }\r\n\r\n    outTime = Date.now() + rpcTimeMax;\r\n    setInterval(() => {\r\n        outTime = Date.now() + rpcTimeMax;\r\n    }, 100);\r\n    setInterval(checkTimeout, 2000);\r\n    rpc = new rpc_create();\r\n}\r\n\r\nexport function rpcOnNewSocket(sid: string) {\r\n    let queue = msgQueueDic[sid];\r\n    if (!queue) {\r\n        return;\r\n    }\r\n    delete msgQueueDic[sid];\r\n    for (let one of queue) {\r\n        sendTo(sid, one.rpcTimeout, one.buf);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Process rpc messages\r\n * \r\n *     [1]         [1]      [...]    [...]      [...]\r\n *   msgType    rpcBufLen   rpcBuf   msgBuf    bufLast\r\n */\r\nexport function handleMsg(sid: string, bufAll: Buffer) {\r\n    // logRPC(\"收到RPC0\", app.serverName, sid, \"handleMsg\");\r\n    let rpcBufLen = bufAll.readUInt8(1);\r\n    let args = BSON.deserialize(bufAll.subarray(2, 2 + rpcBufLen))\r\n    let rpcMsg = args.data as I_rpcMsg;\r\n    let msg: any[];\r\n    if (rpcMsg.type === undefined) {\r\n        let args = BSON.deserialize(bufAll.subarray(2 + rpcBufLen));\r\n        msg = args.data;\r\n    } else {\r\n        let args = BSON.deserialize(bufAll.subarray(2 + rpcBufLen));\r\n        msg = args.data;\r\n    }\r\n\r\n    if (!rpcMsg.cmd) {\r\n        // logRPC(\"收到RPC2\", app.serverName, sid, msg);\r\n        let timeout = rpcRequest[rpcMsg.id as number];\r\n        if (timeout) {\r\n            delete rpcRequest[rpcMsg.id as number];\r\n            timeout.cb(...msg);\r\n        }\r\n    } else {\r\n        //sid是发来的\r\n        console.log(\"收到RPC\", app.serverName, sid, rpcMsg.cmd);\r\n        let cmd = rpcMsg.cmd;\r\n        // if (rpcMsg.id) {\r\n        //     msg.push(getCallBackFunc(sid, rpcMsg.id));\r\n        // }\r\n        TSEventCenter.Instance.event(cmd as number, ...msg);\r\n    }\r\n}\r\n\r\nexport async function handleMsgAwait(sid: string, bufAll: Buffer) {\r\n    // logRPC(\"收到RPC0\", app.serverName, sid, \"handleMsgAwait\");\r\n    let rpcBufLen = bufAll.readUInt8(1);\r\n    let args = BSON.deserialize(bufAll.subarray(2, 2 + rpcBufLen))\r\n    let rpcMsg = args.data as I_rpcMsg;\r\n\r\n    let msg: any[];\r\n    let args2 = BSON.deserialize(bufAll.subarray(2 + rpcBufLen));\r\n    msg = args2.data;\r\n    if (!rpcMsg.cmd) {\r\n        // logRPC(\"收到RPCa2\", app.serverName, sid, msg);\r\n        // gzaLog(\"rpc cb \", rpcMsg, msg);\r\n        let timeout = rpcRequest[rpcMsg.id as number];\r\n        if (timeout) {\r\n            delete rpcRequest[rpcMsg.id as number];\r\n            timeout.cb(msg);\r\n        }\r\n        return;\r\n    }\r\n\r\n\r\n    if (rpcMsg.type === undefined) {\r\n        console.log(\"收到RPC\", app.serverName, sid, rpcMsg.cmd);\r\n        let args = await TSEventCenter.Instance.eventAwait(rpcMsg.cmd as number, ...msg);\r\n        let socket = app.rpcPool.getSocket(sid);\r\n        if (!socket) {\r\n            return;\r\n        }\r\n        if (args === undefined) {\r\n            args = null;\r\n        }\r\n\r\n        let bufEnd = getRpcMsg({ \"id\": rpcMsg.id }, Buffer.from(BSON.serialize({ data: args })), null, define.Rpc_Msg.rpcMsgAwait);//特殊处理了BSON的来回，加了数组嵌套\r\n        sendTo(sid, null, bufEnd);\r\n    }\r\n    else if (rpcMsg.type == 1) {\r\n        //1是发送出去的数据\r\n        let args = await TSEventCenter.Instance.eventDB(rpcMsg.cmd as string, ...msg);\r\n        let socket = app.rpcPool.getSocket(sid);\r\n        if (!socket) {\r\n            return;\r\n        }\r\n        if (args === undefined) {\r\n            args = null;\r\n        }\r\n        // gzaLog(\"rpcDBSend\", rpcMsg, args);\r\n        let bufEnd = getRpcMsg({ \"id\": rpcMsg.id }, Buffer.from(BSON.serialize({ data: args })), 2, define.Rpc_Msg.rpcMsgAwait);\r\n        sendTo(sid, null, bufEnd);\r\n    }\r\n}\r\n\r\nclass rpc_create {\r\n    constructor() {\r\n        this.loadRemoteMethod();\r\n    }\r\n\r\n    rpcSend(serverName: string, eventName: RpcEvent, ...args: any[]) {\r\n        rpc.send(serverName, eventName, args);\r\n    }\r\n\r\n    rpcAwaitSend(serverName: string, eventName: RpcEvent, ...args: any[]): Promise<any> {\r\n        return rpc.sendAwait(serverName, eventName, args);\r\n    }\r\n\r\n    rpcDBSend(serverName: string, eventName: string, ...args: any[]): Promise<any> {\r\n        return rpc.sendDBAwait(serverName, eventName, args);\r\n    }\r\n\r\n    loadRemoteMethod() {\r\n        let self = this;\r\n        app.rpc = this.rpcSend.bind(this);\r\n        app.rpcAwait = this.rpcAwaitSend.bind(this);\r\n        app.rpcDB = this.rpcDBSend.bind(this);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param serverName \r\n     * @param eventName \r\n     * @param args  \r\n     * @returns \r\n     */\r\n    send(serverName: string, eventName: RpcEvent, args: any[]) {\r\n        if (serverName === app.serverName) {\r\n            sendRpcMsgToSelf(eventName, BSON.serialize({ data: args }), /**bufLast,*/);\r\n            return;\r\n        }\r\n\r\n        let socket = app.rpcPool.getSocket(serverName);\r\n        if (!socket) {\r\n            return;\r\n        }\r\n\r\n        let rpcMsg: I_rpcMsg = {\r\n            cmd: eventName\r\n        };\r\n        let rpcTimeout: I_rpcTimeout = null as any;\r\n        let bufEnd = getRpcMsg(rpcMsg, BSON.serialize({ data: args }), null, define.Rpc_Msg.rpcMsg);\r\n        sendTo(serverName, rpcTimeout, bufEnd);\r\n    }\r\n\r\n\r\n    /**\r\n     * 发送Await的RPC\r\n     * @param serverName \r\n     * @param cmd \r\n     * @param args RPC参数\r\n     * @returns Promise<any[]>  因为同一个事件可能有多个方法监听，因此最后返回来的值，是一个数组 ，默认取 下标0 即可\r\n     */\r\n    sendAwait(serverName: string, eventName: RpcEvent, args: any[]): Promise<any> | undefined {\r\n        if (serverName === \"*\") {\r\n            console.error(\"rpc Await 不允许发送到全部服务器，请使用rpc\");\r\n            return undefined;\r\n        }\r\n\r\n        if (serverName === app.serverName) {\r\n            return sendRpcMsgToSelfAwait(eventName, BSON.serialize({ data: args }));\r\n        }\r\n\r\n        let rpcMsg: I_rpcMsg = {\r\n            cmd: eventName\r\n        };\r\n\r\n        let cb: Function = null as any;\r\n        let rpcTimeout: I_rpcTimeout = null as any;\r\n        let promise: Promise<any[]> = new Promise((resolve) => {\r\n            cb = resolve;\r\n        });\r\n        rpcTimeout = { \"id\": getRpcId(), \"cb\": cb, \"time\": outTime, \"await\": true };\r\n\r\n        rpcMsg.id = rpcTimeout.id;\r\n\r\n        let bufEnd = getRpcMsg(rpcMsg, BSON.serialize({ data: args }), null, define.Rpc_Msg.rpcMsgAwait);\r\n        sendTo(serverName, rpcTimeout, bufEnd);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n * 发送DB RPC\r\n * @param serverName \r\n * @param cmd \r\n * @param args RPC参数\r\n * @returns Promise<any>  \r\n */\r\n    sendDBAwait(serverName: string, databaseEvent: string, args: any[]): Promise<any> | undefined {\r\n        let rpcMsg: I_rpcMsg = {\r\n            cmd: databaseEvent\r\n        };\r\n\r\n        //理论上不可能本地发本地\r\n        if (serverName === app.serverName) {\r\n            return sendRpcMsgToSelfDBAwait(databaseEvent, BSON.serialize({ data: args }));\r\n        }\r\n\r\n        let cb: Function = null as any;\r\n        let rpcTimeout: I_rpcTimeout = null as any;\r\n        let promise: Promise<any[]> = new Promise((resolve) => {\r\n            cb = resolve;\r\n        });\r\n\r\n        rpcTimeout = { \"id\": getRpcId(), \"cb\": cb, \"time\": outTime, \"await\": true };\r\n        rpcMsg.id = rpcTimeout.id;\r\n        let bufEnd = getRpcMsg(rpcMsg, BSON.serialize({ data: args }), 1, define.Rpc_Msg.rpcMsgAwait);\r\n\r\n        sendTo(serverName, rpcTimeout, bufEnd);\r\n        return promise;\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction sendTo(sid: string, rpcTimeout: I_rpcTimeout | null, buf: Buffer) {\r\n    let socket = app.rpcPool.getSocket(sid);\r\n    if (socket) {\r\n        if (rpcTimeout) {\r\n            rpcRequest[rpcTimeout.id] = rpcTimeout;\r\n        }\r\n        socket.send(buf);\r\n        return;\r\n    }\r\n    let queue = msgQueueDic[sid];\r\n    if (!queue) {\r\n        queue = [];\r\n        msgQueueDic[sid] = queue;\r\n    }\r\n\r\n    queue.push({ \"rpcTimeout\": rpcTimeout, \"buf\": buf, \"time\": outTime - 3000 });\r\n\r\n    if (queue.length > msgCacheCount) {\r\n        for (let one of queue.splice(0, 20)) {\r\n            if (one.rpcTimeout) {\r\n                timeoutCall(one.rpcTimeout);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Get rpcId\r\n */\r\nfunction getRpcId() {\r\n    let id = rpcId++;\r\n    if (rpcId > 99999999) {\r\n        rpcId = 1;\r\n    }\r\n    return id;\r\n}\r\n\r\n/**\r\n * rpc timeout detection\r\n */\r\nfunction checkTimeout() {\r\n    let now = Date.now();\r\n    for (let sid in msgQueueDic) {\r\n        let queue = msgQueueDic[sid];\r\n        let deleteCount = 0;\r\n        for (let one of queue) {\r\n            if (one.time < now) {\r\n                deleteCount++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (deleteCount > 0) {\r\n            for (let one of queue.splice(0, deleteCount)) {\r\n                if (one.rpcTimeout) {\r\n                    timeoutCall(one.rpcTimeout);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let id in rpcRequest) {\r\n        if (rpcRequest[id].time < now) {\r\n            let one = rpcRequest[id];\r\n            delete rpcRequest[id];\r\n            timeoutCall(one);\r\n        }\r\n    }\r\n}\r\n\r\nfunction timeoutCall(one: I_rpcTimeout) {\r\n    process.nextTick(() => {\r\n        one.await ? one.cb(undefined) : one.cb(true);\r\n    });\r\n}\r\n\r\n\r\n/**\r\n *  Send rpc message\r\n * \r\n *    [4]       [1]         [1]      [...]    [...]      [...]\r\n *  allMsgLen  msgType   rpcBufLen   rpcBuf   msgBuf    bufLast\r\n */\r\nfunction getRpcMsg(rpcMsg: I_rpcMsg, msgBuf: Buffer, rpcType: number, RPCMsgType: define.Rpc_Msg) {\r\n    if (rpcType) {\r\n        rpcMsg.type = rpcType;\r\n    }\r\n    let rpcBuf = BSON.serialize({ data: rpcMsg });\r\n    let buffEnd = Buffer.allocUnsafe(6 + rpcBuf.length + msgBuf.length);\r\n    buffEnd.writeUInt32BE(buffEnd.length - 4, 0);\r\n    buffEnd.writeUInt8(RPCMsgType, 4);\r\n    buffEnd.writeUInt8(rpcBuf.length, 5);\r\n    rpcBuf.copy(buffEnd, 6);\r\n    msgBuf.copy(buffEnd, 6 + rpcBuf.length);\r\n\r\n    if (buffEnd.length > define.some_config.SocketBufferMaxLen) {\r\n        console.error(app.serverName + \" rpc 超长度了啊啊啊 \" + define.some_config.SocketBufferMaxLen + \" , nowlen : \" + buffEnd.length);\r\n    }\r\n    return buffEnd;\r\n}\r\n\r\n\r\n/**\r\n * 发送回给本服务器的RPC消息\r\n */\r\nfunction sendRpcMsgToSelf(eventName: RpcEvent, msgBuf: Buffer, /*bufLast: Buffer,*/) {\r\n    let args = BSON.deserialize(msgBuf)\r\n    args = args.data as any[];\r\n    process.nextTick(() => {\r\n        TSEventCenter.Instance.event(eventName, ...args);\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * 发送回给本服务器的RPC Await消息\r\n */\r\nasync function sendRpcMsgToSelfAwait(eventName: RpcEvent, msgBuf: Buffer, /**bufLast: Buffer*/): Promise<any[]> {\r\n    let args = BSON.deserialize(msgBuf)\r\n    args = args.data as any[];\r\n    let data = await TSEventCenter.Instance.eventAwait(eventName, ...args);\r\n    return data;\r\n}\r\n\r\n/**\r\n * 发送回给本服务器的RPC DB Await消息\r\n */\r\nasync function sendRpcMsgToSelfDBAwait(eventName: string, msgBuf: Buffer, /**bufLast: Buffer*/): Promise<any> {\r\n    let args = BSON.deserialize(msgBuf)\r\n    args = args.data as any[];\r\n    let data = await TSEventCenter.Instance.eventDB(eventName, ...args);\r\n    return data;\r\n}\r\n\r\n"]}
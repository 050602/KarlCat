{"version":3,"file":"session.js","sourceRoot":"","sources":["../../src/components/session.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * session class. The front-end server represents the client connection, and the back-end server is a copy of some data\r\n */\r\n\r\n\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\nimport { Application } from \"../application\";\r\nimport { I_clientSocket, sessionCopyJson } from \"../util/interfaceDefine\";\r\n\r\nlet app: Application;\r\n\r\nexport function initSessionApp(_app: Application) {\r\n    app = _app;\r\n}\r\n\r\nexport class Session {\r\n    uid: number = 0;                                        // The bound uid, the unique identifier of the player\r\n    private sid: string = \"\";                               // Front-end server id\r\n    private settings: { [key: string]: any } = {};          // user set,get\r\n    private settingsLocal: { [key: string]: any } = {};     // user set,get（Local, will not exist in buf）\r\n    sessionBuf: Buffer = null as any;                       // buff\r\n    saveRemoteIP: string = \"\";\r\n    saveRemotePort: number = 0;\r\n\r\n    socket: I_clientSocket = null as any;                   // Player's socket connection\r\n\r\n    constructor(sid: string = \"\") {\r\n        this.sid = sid;\r\n        this.resetBuf();\r\n    }\r\n\r\n    private resetBuf() {\r\n        if (app.frontend) {\r\n            let tmpBuf = BSON.serialize({ \"uid\": this.uid, \"sid\": this.sid, \"settings\": this.settings });\r\n            this.sessionBuf = Buffer.alloc(tmpBuf.length).fill(tmpBuf); // Copy reason: Buffer.from may be allocated from the internal buffer pool, while sessionBuf is almost resident\r\n        }\r\n    }\r\n\r\n    public getFrontendSid(){\r\n        return this.sid;\r\n    }\r\n\r\n    /**\r\n     * 绑定UID到session\r\n     * 仅限前端服调用\r\n     */\r\n    bind(_uid: number): boolean {\r\n        if (!app.frontend || !this.socket) {\r\n            return false;\r\n        }\r\n        if (app.clients[_uid]) {\r\n            return false;\r\n        }\r\n        app.clients[_uid] = this.socket;\r\n\r\n        this.uid = _uid;\r\n        this.resetBuf();\r\n        return true;\r\n    }\r\n\r\n    set(_settings: { [key: string]: any }) {\r\n        for (let f in _settings) {\r\n            this.settings[f] = _settings[f];\r\n        }\r\n        this.resetBuf();\r\n    }\r\n\r\n\r\n    get(key: string | number) {\r\n        return this.settings[key];\r\n    }\r\n\r\n    delete(keys: (string | number)[]) {\r\n        for (let one of keys) {\r\n            delete this.settings[one];\r\n        }\r\n        this.resetBuf();\r\n    }\r\n\r\n\r\n    setLocal(key: number | string, value: any) {\r\n        this.settingsLocal[key] = value;\r\n    }\r\n\r\n\r\n    getLocal(key: number | string) {\r\n        return this.settingsLocal[key];\r\n    }\r\n\r\n\r\n    deleteLocal(key: number | string) {\r\n        delete this.settingsLocal[key];\r\n    }\r\n\r\n    /**\r\n     * 复制session值给当前session\r\n     */\r\n    setAll(_session: sessionCopyJson) {\r\n        this.uid = _session.uid;\r\n        this.sid = _session.sid;\r\n        this.settings = _session.settings;\r\n    }\r\n\r\n\r\n    /**\r\n     * 关闭一个session对应的socket链接\r\n     * 仅限前端服调用\r\n     */\r\n    close() {\r\n        if (app.frontend && this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 把后端服对session的修改同步到前端服\r\n     * Push the back-end session to the front-end [Note: back-end call]\r\n     */\r\n    apply() {\r\n        if (!app.frontend) {\r\n            app.backendServer.sendSession(this.sid, Buffer.from(BSON.serialize({\r\n                \"uid\": this.uid,\r\n                \"settings\": this.settings\r\n            })));\r\n        }\r\n    }\r\n    /**\r\n     * 前端服接收到后端服发过来的apply后设置到前端服\r\n     * After the back-end calls apply, the processing received by the front-end\r\n     */\r\n    applySession(settings: { [key: string]: any }) {\r\n        this.settings = settings;\r\n        this.resetBuf();\r\n    }\r\n\r\n    /**\r\n     * Get ip \r\n     * 警告，在TCP中有把\"::ffff:\"替换成空字符串\r\n     */\r\n    getIp() {\r\n        if (this.socket) {\r\n            this.saveRemoteIP = this.socket.remoteAddress;\r\n            return this.saveRemoteIP;\r\n        } else {\r\n            return this.saveRemoteIP;\r\n        }\r\n    }\r\n    /**\r\n     * Get port\r\n     * 警告，目前只在ConnectorTcp 支持了该接口，WebSocket没有支持，有需要再看这个\r\n     * @returns \r\n     */\r\n    getPort() {\r\n        if (this.socket) {\r\n            this.saveRemotePort = this.socket.remotePort;\r\n            return this.saveRemotePort;\r\n        } else {\r\n            return this.saveRemotePort;\r\n        }\r\n    }\r\n\r\n    getRealIp() {\r\n        if (this.socket) {\r\n            let pattern = /\\b((\\d{1,2})|(1\\d{2})|(2[0-4]\\d)|(25[0-5]))\\.((\\d{1,2})|(1\\d{2})|(2[0-4]\\d)|(25[0-5]))\\.((\\d{1,2})|(1\\d{2})|(2[0-4]\\d)|(25[0-5]))\\.((\\d{1,2})|(1\\d{2})|(2[0-4]\\d)|(25[0-5]))\\b/\r\n            let ip = pattern.exec(this.socket.remoteAddress);\r\n            if (ip) {\r\n                return ip[0];\r\n            } else {\r\n                console.error(\"异常的IP匹配\", this.socket.remoteAddress);\r\n                return \"\";\r\n            }\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /** 发送协议到客户端 \r\n     * 仅限于在前端服 后端没有sokcet链接\r\n     */\r\n    send(cmd: number, msg: any) {\r\n        if (!app.frontend || !this.socket) {\r\n            return;\r\n        }\r\n        if (msg === undefined) {\r\n            msg = null;\r\n        }\r\n        let msgBuf = app.protoEncode(cmd, msg);\r\n        this.socket.send(msgBuf);\r\n    }\r\n}"]}
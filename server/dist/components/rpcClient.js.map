{"version":3,"file":"rpcClient.js","sourceRoot":"","sources":["../../src/components/rpcClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { Application } from \"../application\";\r\nimport { TcpClient } from \"../components/tcpClient\";\r\nimport { FrameEvent } from \"../event/FrameEvent\";\r\nimport * as appUtil from \"../util/appUtil\";\r\nimport * as define from \"../util/define\";\r\nimport { loggerLevel, loggerType, ServerInfo, SocketProxy } from \"../util/interfaceDefine\";\r\nimport { TSEventCenter } from \"../utils/TSEventCenter\";\r\nimport * as rpcService from \"./rpcService\";\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\n\r\n/**\r\n * Whether to establish a socket connection\r\n */\r\nexport function ifCreateRpcClient(app: Application, server: ServerInfo) {\r\n    // Only one socket connection is established between the two servers\r\n    if (app.serverName < server.serverName && !app.noRpcMatrix[appUtil.getNoRpcKey(app.serverType, server.serverType)]) {\r\n        removeSocket(server.serverName);\r\n        new RpcClientSocket(app, server);\r\n    }\r\n}\r\n\r\n/**\r\n * Remove socket connection\r\n */\r\nexport function removeSocket(id: string) {\r\n    let socket = rpcClientSockets[id];\r\n    if (socket) {\r\n        socket.remove();\r\n        delete rpcClientSockets[id];\r\n    }\r\n}\r\n\r\nlet rpcClientSockets: { [id: string]: RpcClientSocket } = {};\r\n\r\nexport class RpcClientSocket {\r\n    private app: Application;\r\n    public serverName: string;\r\n    private host: string;\r\n    private port: number;\r\n    private socket: SocketProxy = null as any;\r\n    private connectTimer: NodeJS.Timer = null as any;\r\n    private heartbeatTimer: NodeJS.Timer = null as any;\r\n    private heartbeatTimeoutTimer: NodeJS.Timer = null as any;\r\n    private sendCache: boolean = false;\r\n    private interval: number = 0;\r\n    private sendArr: Buffer[] = [];\r\n    private sendTimer: NodeJS.Timer = null as any;\r\n    private die: boolean = false;\r\n    private serverToken: string = \"\";\r\n    // private nowLen = 0;\r\n    // private maxLen = 128000;\r\n\r\n    constructor(app: Application, server: ServerInfo) {\r\n        this.app = app;\r\n        this.serverName = server.serverName;\r\n        this.host = server.host;\r\n        this.port = server.port;\r\n        rpcClientSockets[this.serverName] = this;\r\n        let rpcConfig = app.someconfig.rpc || {};\r\n        let interval = 0;\r\n        if (rpcConfig.interval) {\r\n            if (typeof rpcConfig.interval === \"number\") {\r\n                interval = rpcConfig.interval;\r\n            } else {\r\n                interval = rpcConfig.interval[server.serverType] || rpcConfig.interval.default || 0;\r\n            }\r\n        }\r\n\r\n        if (interval >= 10) {\r\n            this.sendCache = true;\r\n            this.interval = interval;\r\n            // let tmpMaxLen = parseInt(rpcConfig.intervalCacheLen as any) || 0;\r\n            // if (tmpMaxLen > 0) {\r\n            //     this.maxLen = tmpMaxLen;\r\n            // }\r\n        }\r\n        let tokenConfig = app.someconfig.recognizeToken || {};\r\n        this.serverToken = tokenConfig[\"serverToken\"] || define.some_config.Server_Token;\r\n        this.doConnect(0);\r\n    }\r\n\r\n    private doConnect(delay: number) {\r\n        if (this.die) {\r\n            return;\r\n        }\r\n        let self = this;\r\n        this.connectTimer = setTimeout(() => {\r\n            let connectCb = function () {\r\n                self.app.logger(loggerType.frame, loggerLevel.info, `rpcClient -> connect to rpc server success: ${self.serverName}`);\r\n\r\n                // register\r\n                let registerBuf = BSON.serialize({\r\n                    \"serverName\": self.app.serverName,\r\n                    \"serverType\": self.app.serverType,\r\n                    \"serverToken\": self.serverToken\r\n                });\r\n                let buf = Buffer.allocUnsafe(registerBuf.length + 5);\r\n                buf.writeUInt32BE(registerBuf.length + 1, 0);\r\n                buf.writeUInt8(define.Rpc_Msg.register, 4);\r\n                registerBuf.copy(buf, 5);\r\n                self.socket.send(buf);\r\n                if (self.sendCache) {\r\n                    self.sendTimer = setInterval(self.sendInterval.bind(self), self.interval);\r\n                }\r\n            };\r\n            self.connectTimer = null as any;\r\n            let rpcConfig = self.app.someconfig.rpc || {};\r\n            let noDelay = rpcConfig.noDelay === false ? false : true;\r\n            self.socket = new TcpClient(self.port, self.host, rpcConfig.maxLen || define.some_config.SocketBufferMaxLen, noDelay, connectCb);\r\n            self.socket.on(\"data\", self.onData.bind(self));\r\n            self.socket.on(\"close\", self.onClose.bind(self));\r\n            self.socket.on(\"error\", this.onError.bind(this));\r\n            self.app.logger(loggerType.frame, loggerLevel.info, `rpcClient -> try to connect to rpc server: ${self.serverName}`);\r\n        }, delay);\r\n    }\r\n\r\n\r\n    private onError(error, error2) {\r\n        console.error(\"onError\", error, error2);\r\n    }\r\n\r\n\r\n    private onClose(error) {\r\n        this.app.rpcPool.removeSocket(this.serverName);\r\n        clearTimeout(this.heartbeatTimer);\r\n        clearTimeout(this.heartbeatTimeoutTimer);\r\n        clearInterval(this.sendTimer);\r\n        this.sendArr = [];\r\n        // this.nowLen = 0;\r\n        this.heartbeatTimeoutTimer = null as any;\r\n        this.socket = null as any;\r\n        console.error(`${this.app.serverInfo.serverName}, rpcClient -> socket closed, reconnect the rpc server later: ${this.serverName}, error: ${error}`);\r\n        let rpcConfig = this.app.someconfig.rpc || {};\r\n        let delay = rpcConfig.reconnectDelay || define.some_config.Time.Rpc_Reconnect_Time;\r\n        this.doConnect(delay * 1000);\r\n    }\r\n\r\n    /**\r\n     * Send heartbeat at regular intervals\r\n     */\r\n    private heartbeatSend() {\r\n\r\n        let rpcConfig = this.app.someconfig.rpc || {};\r\n        let heartbeat = rpcConfig.heartbeat || define.some_config.Time.Rpc_Heart_Beat_Time;\r\n        let timeDelay = heartbeat * 1000 - 5000 + Math.floor(5000 * Math.random());\r\n        if (timeDelay < 5000) {\r\n            timeDelay = 5000;\r\n        }\r\n        this.heartbeatTimer = setTimeout(() => {\r\n            let buf = Buffer.allocUnsafe(5);\r\n            buf.writeUInt32BE(1, 0);\r\n            buf.writeUInt8(define.Rpc_Msg.heartbeat, 4);\r\n            this.socket.send(buf);\r\n            this.heartbeatTimeoutStart();\r\n            this.heartbeatTimer.refresh();\r\n        }, timeDelay);\r\n    }\r\n\r\n    /**\r\n     * After sending a heartbeat, receive a response\r\n     */\r\n    private heartbeatResponse() {\r\n        clearTimeout(this.heartbeatTimeoutTimer);\r\n        this.heartbeatTimeoutTimer = null as any;\r\n    }\r\n\r\n    /**\r\n     * After sending the heartbeat, a response must be received within a certain period of time, otherwise the connection will be disconnected\r\n     */\r\n    private heartbeatTimeoutStart() {\r\n        if (this.heartbeatTimeoutTimer !== null) {\r\n            return;\r\n        }\r\n        let self = this;\r\n        this.heartbeatTimeoutTimer = setTimeout(function () {\r\n            self.app.logger(loggerType.frame, loggerLevel.error, `rpcClient -> heartbeat timeout, close the rpc socket: ${self.serverName}`);\r\n            self.socket.close();\r\n        }, define.some_config.Time.Rpc_Heart_Beat_Timeout_Time * 1000);\r\n\r\n    }\r\n\r\n    private onData(data: Buffer) {\r\n        try {\r\n            let type = data.readUInt8(0);\r\n            if (type === define.Rpc_Msg.clientMsgIn) {\r\n                this.app.backendServer.handleMsg(this.serverName, data);\r\n            }\r\n            else if (type === define.Rpc_Msg.clientMsgOut) {\r\n                this.app.frontendServer.sendMsgByUids(data);\r\n            }\r\n            else if (type === define.Rpc_Msg.rpcMsg) {\r\n                rpcService.handleMsg(this.serverName, data);\r\n            }\r\n            else if (type === define.Rpc_Msg.rpcMsgAwait) {\r\n                rpcService.handleMsgAwait(this.serverName, data);\r\n            }\r\n            else if (type === define.Rpc_Msg.applySession) {\r\n                this.app.frontendServer.applySession(data);\r\n            }\r\n            else if (type === define.Rpc_Msg.register) {\r\n                this.registerHandle();\r\n            }\r\n            else if (type === define.Rpc_Msg.heartbeat) {\r\n                this.heartbeatResponse();\r\n            }\r\n        } catch (e: any) {\r\n            this.app.logger(loggerType.msg, loggerLevel.error, e.stack);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * registration success\r\n     */\r\n    private registerHandle() {\r\n        this.heartbeatSend();\r\n        this.app.rpcPool.addSocket(this.serverName, this);\r\n        TSEventCenter.Instance.event(FrameEvent.onAddServer, this.serverName);\r\n\r\n        let isAll = true;\r\n        for (let stype in this.app.serversConfig) {\r\n            let serverInfo: ServerInfo[] = this.app.serversConfig[stype];\r\n            for (let sname of serverInfo) {\r\n                if (sname.serverName != this.app.serverName && this.app.rpcPool.getSocket(sname.serverName) == null) {\r\n                    isAll = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (!isAll) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (isAll) {\r\n            TSEventCenter.Instance.event(FrameEvent.OnStartAll);\r\n            console.log(\"OnStartAll\");\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Remove the socket\r\n     */\r\n    remove() {\r\n        this.die = true;\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        } else if (this.connectTimer !== null) {\r\n            clearTimeout(this.connectTimer);\r\n        }\r\n    }\r\n\r\n    send(data: Buffer) {\r\n        if (this.sendCache) {\r\n            this.sendArr.push(data);\r\n            // this.nowLen += data.length;\r\n            // gzaLog(\"client Send length\", data.length);\r\n            // if (this.nowLen > this.maxLen) {\r\n            //     logServer(\"client Send length outsize\", this.nowLen);\r\n            //     this.sendInterval();\r\n            // }\r\n        } else {\r\n            this.socket.send(data);\r\n        }\r\n    }\r\n\r\n    private sendInterval() {\r\n        if (this.sendArr.length > 0) {\r\n            this.socket.send(Buffer.concat(this.sendArr));\r\n            this.sendArr.length = 0;\r\n            // this.nowLen = 0;\r\n        }\r\n    }\r\n} "]}
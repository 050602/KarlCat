{"version":3,"file":"BaseServerLogic.js","sourceRoot":"","sources":["../../src/components/BaseServerLogic.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAC5C,0DAAuD;AAEvD,MAAa,eAAgB,SAAQ,mBAAQ;IAMzC;QACI,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC7B,CAAC;IAEM,OAAO,CAAC,GAAW,EAAE,IAAc;QACtC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAGM,aAAa,CAAC,IAAY,EAAE,IAAc,EAAE,SAAS,GAAG,KAAK;QAChE,IAAI,CAAC,SAAS,EAAE;YACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7B;aAAM;YACH,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACvC;IACL,CAAC;IAEM,kBAAkB,CAAC,IAAY,EAAE,IAAc;QAClD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,QAAQ,CAAC,QAA8B,EAAE,MAAe;QAC3D,IAAI,KAAK,GAAiB,WAAW,CAAC,QAAQ,EAAE,MAAM,GAAG,IAAI,CAAC,CAAC;QAC/D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEM,eAAe;QAClB,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,EAAE;YAC/B,6BAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SAC/C;QACD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC5B,6BAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAE1B,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACjC,6BAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;QAE/B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC1B,aAAa,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAEvB,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;IACjC,CAAC;CAEJ;AAzDD,0CAyDC","sourcesContent":["import { Sigleton } from \"../core/Sigleton\";\r\nimport { TSEventCenter } from \"../utils/TSEventCenter\";\r\n\r\nexport class BaseServerLogic extends Sigleton {\r\n    registerCmds: number[];\r\n    rpcEvents: number[];\r\n    rpcAwaitEvents: number[];\r\n    timers: NodeJS.Timer[];\r\n\r\n    constructor() {\r\n        super()\r\n        this.registerCmds = [];\r\n        this.rpcEvents = [];\r\n        this.rpcAwaitEvents = [];\r\n    }\r\n\r\n    public bindCmd(cmd: number, func: Function) {\r\n        this.registerCmds.push(cmd);\r\n    }\r\n\r\n\r\n    public bindRpcEvents(name: number, func: Function, flagAwait = false) {\r\n        if (!flagAwait) {\r\n            this.rpcEvents.push(name);\r\n        } else {\r\n            this.bindRpcAwaitEvents(name, func);\r\n        }\r\n    }\r\n\r\n    public bindRpcAwaitEvents(name: number, func: Function) {\r\n        this.rpcAwaitEvents.push(name);\r\n    }\r\n\r\n    public setTimer(callback: (args: void) => void, second?: number) {\r\n        let timer: NodeJS.Timer = setInterval(callback, second * 1000);\r\n        this.timers.push(timer);\r\n    }\r\n\r\n    public destoryInstance(): void {\r\n        for (let cmd of this.registerCmds) {\r\n            TSEventCenter.Instance.unbindCMD(cmd, this);\r\n        }\r\n        this.rpcEvents.forEach((data) => {\r\n            TSEventCenter.Instance.unbind(data, this);\r\n        });\r\n        this.rpcEvents.length = 0;\r\n\r\n        this.rpcAwaitEvents.forEach((data) => {\r\n            TSEventCenter.Instance.unbindAwait(data, this);\r\n        });\r\n        this.rpcAwaitEvents.length = 0;\r\n\r\n        this.timers.forEach((timer) => {\r\n            clearInterval(timer);\r\n        });\r\n        this.timers.length = 0;\r\n\r\n        this.registerCmds.length = 0;\r\n    }\r\n\r\n}"]}
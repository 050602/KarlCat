{"version":3,"file":"master.js","sourceRoot":"","sources":["../../src/components/master.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * The master central server, accepts the monitor connection, is responsible for the mutual understanding between the servers, and accepts cli commands\r\n */\r\n\r\n\r\nimport { Application } from \"../application\";\r\nimport { SocketProxy, loggerLevel, loggerType, monitor_get_new_server, monitor_reg_master, monitor_remove_server } from \"../util/interfaceDefine\";\r\nimport { runDBServers, runServers } from \"../util/starter\";\r\nimport { CommonUtils } from \"../utils/CommonUtils\";\r\nimport { MasterCli } from \"./cliUtil\";\r\nimport * as msgCoder from \"./msgCoder\";\r\nimport tcpServer from \"./tcpServer\";\r\nimport define = require(\"../util/define\");\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\n\r\nlet servers: { [id: string]: Master_ServerProxy } = {};\r\nlet serversDataTmp: monitor_get_new_server = { \"T\": define.Master_To_Monitor.addServer, \"servers\": {} };\r\nlet masterCli: MasterCli;\r\nlet app: Application;\r\n\r\nexport function start(_app: Application, cb?: Function) {\r\n    app = _app;\r\n    masterCli = new MasterCli(_app, servers);\r\n    startServer(cb);\r\n}\r\n\r\nfunction startServer(cb?: Function) {\r\n\r\n    tcpServer(app.serverInfo.port, false, startCb, newClientCb);\r\n\r\n    async function startCb() {\r\n        let str = `listening at [${app.serverInfo.host}:${app.serverInfo.port}]  ${app.serverName}`;\r\n        console.log(str);\r\n        app.logger(loggerType.frame, loggerLevel.info, str);\r\n        cb && cb();\r\n        // if (app.startMode === \"all\") {\r\n        //     runServers(app);\r\n        // }\r\n        if (app.env == \"development\") {\r\n            runDBServers(app);\r\n            await CommonUtils.sleep(5000);\r\n            runServers(app);\r\n        }\r\n        // runDBServers(app);\r\n        // await CommonUtils.sleep(5000);\r\n        // runServers(app);\r\n    }\r\n\r\n    function newClientCb(socket: SocketProxy) {\r\n        new UnregSocket_proxy(socket);\r\n    }\r\n}\r\n\r\n/**\r\n * Unregistered socket proxy\r\n */\r\nclass UnregSocket_proxy {\r\n    private socket: SocketProxy;\r\n    private registerTimer: NodeJS.Timeout = null as any;\r\n    private onDataFunc: (data: Buffer) => void;\r\n    private onCloseFunc: () => void;\r\n    constructor(socket: SocketProxy) {\r\n        this.socket = socket;\r\n\r\n        this.onDataFunc = this.onData.bind(this);\r\n        this.onCloseFunc = this.onClose.bind(this);\r\n        socket.on(\"data\", this.onDataFunc);\r\n        socket.on(\"close\", this.onCloseFunc);\r\n        this.registerTimeout();\r\n    }\r\n\r\n    private registerTimeout() {\r\n        let self = this;\r\n        this.registerTimer = setTimeout(function () {\r\n            app.logger(loggerType.frame, loggerLevel.error, `master -> register timeout, close it, ${self.socket.remoteAddress}`);\r\n            self.socket.close();\r\n        }, 5000);\r\n\r\n    }\r\n\r\n    private onData(_data: Buffer) {\r\n        let socket = this.socket;\r\n\r\n        let data: monitor_reg_master;\r\n        try {\r\n            data = BSON.deserialize(_data) as monitor_reg_master;\r\n        } catch (err) {\r\n            app.logger(loggerType.frame, loggerLevel.error, `master -> unregistered socket, JSON parse error, close it, ${socket.remoteAddress}`);\r\n            socket.close();\r\n            return;\r\n        }\r\n\r\n        // The first packet must be registered\r\n        if (!data || data.T !== define.Monitor_To_Master.register) {\r\n            app.logger(loggerType.frame, loggerLevel.error, `master -> unregistered socket, illegal data, close it, ${socket.remoteAddress}`);\r\n            socket.close();\r\n            return;\r\n        }\r\n\r\n        // Is it a server?\r\n        if (data.serverToken) {\r\n            let tokenConfig = app.someconfig.recognizeToken || {};\r\n            let serverToken = tokenConfig[\"serverToken\"] || define.some_config.Server_Token;\r\n            if (data.serverToken !== serverToken) {\r\n                app.logger(loggerType.frame, loggerLevel.error, `master -> illegal serverToken, close it, ${socket.remoteAddress}`);\r\n                socket.close();\r\n                return;\r\n            }\r\n            if (!data.serverInfo || !data.serverInfo.serverName || !data.serverInfo.host || !data.serverInfo.port || !data.serverInfo.serverType) {\r\n                app.logger(loggerType.frame, loggerLevel.error, `master -> illegal serverInfo, close it, ${socket.remoteAddress}`);\r\n                socket.close();\r\n                return;\r\n            }\r\n            this.registerOk();\r\n            new Master_ServerProxy(data, socket);\r\n            return;\r\n        }\r\n\r\n        // Is it a cli？\r\n        if (data.cliToken) {\r\n            let tokenConfig = app.someconfig.recognizeToken || {};\r\n            let cliToken = tokenConfig[\"cliToken\"] || define.some_config.Cli_Token;\r\n            if (data.cliToken !== cliToken) {\r\n                app.logger(loggerType.frame, loggerLevel.error, `master -> illegal cliToken, close it, ${socket.remoteAddress}`);\r\n                socket.close();\r\n                return;\r\n            }\r\n            this.registerOk();\r\n            new Master_ClientProxy(socket);\r\n            return;\r\n        }\r\n\r\n        app.logger(loggerType.frame, loggerLevel.error, `master -> illegal socket, close it, ${socket.remoteAddress}`);\r\n        socket.close();\r\n    }\r\n\r\n    private onClose() {\r\n        clearTimeout(this.registerTimer);\r\n        app.logger(loggerType.frame, loggerLevel.error, `master -> unregistered socket closed, ${this.socket.remoteAddress}`);\r\n    }\r\n\r\n    private registerOk() {\r\n        clearTimeout(this.registerTimer);\r\n        this.socket.removeListener(\"data\", this.onDataFunc);\r\n        this.socket.removeListener(\"close\", this.onCloseFunc);\r\n        this.socket = null as any;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * master processing server agent\r\n */\r\nexport class Master_ServerProxy {\r\n    private socket: SocketProxy;\r\n    public sid: string = \"\";\r\n    public serverType: string = \"\";\r\n    private heartbeatTimeoutTimer: NodeJS.Timeout = null as any;\r\n    constructor(data: monitor_reg_master, socket: SocketProxy) {\r\n        this.socket = socket;\r\n        this.init(data);\r\n    }\r\n\r\n    private init(data: monitor_reg_master) {\r\n        let socket = this.socket;\r\n\r\n        if (!!servers[data.serverInfo.serverName]) {\r\n            app.logger(loggerType.frame, loggerLevel.error, `master -> already has a monitor named: ${data.serverInfo.serverName}, close it, ${socket.remoteAddress}`);\r\n            socket.close();\r\n            return;\r\n        }\r\n        socket.maxLen = define.some_config.SocketBufferMaxLen;\r\n\r\n        this.heartbeatTimeout();\r\n        socket.on('data', this.onData.bind(this));\r\n        socket.on('close', this.onClose.bind(this));\r\n\r\n\r\n        this.sid = data.serverInfo.serverName;\r\n        this.serverType = data.serverInfo.serverType;\r\n\r\n        // Construct a new server message\r\n        let socketInfo: monitor_get_new_server = {\r\n            \"T\": define.Master_To_Monitor.addServer,\r\n            \"servers\": {}\r\n        };\r\n        socketInfo.servers[this.sid] = data.serverInfo;\r\n        let socketInfoBuf: Buffer = msgCoder.encodeInnerData(socketInfo);\r\n\r\n        // Notify other servers that there are new servers\r\n        for (let sid in servers) {\r\n            servers[sid].socket.send(socketInfoBuf);\r\n        }\r\n\r\n        // Notify the newly added server, which servers are currently available\r\n        let result = msgCoder.encodeInnerData(serversDataTmp);\r\n        this.socket.send(result);\r\n\r\n\r\n        servers[this.sid] = this;\r\n        serversDataTmp.servers[this.sid] = data.serverInfo;\r\n\r\n        app.logger(loggerType.frame, loggerLevel.info, `master -> get a new monitor named: ${this.sid}, ${this.socket.remoteAddress}`);\r\n    }\r\n\r\n    private heartbeatTimeout() {\r\n        this.heartbeatTimeoutTimer = setTimeout(() => {\r\n            app.logger(loggerType.frame, loggerLevel.error, `master -> heartbeat timeout, close the monitor named: ${this.sid}, ${this.socket.remoteAddress}`);\r\n            this.socket.close();\r\n        }, define.some_config.Time.Monitor_Heart_Beat_Time * 1000 * 2);\r\n    }\r\n\r\n\r\n    send(msg: any) {\r\n        this.socket.send(msgCoder.encodeInnerData(msg));\r\n    }\r\n\r\n    private heartbeatResponse() {\r\n        let msg = { T: define.Master_To_Monitor.heartbeatResponse };\r\n        let buf = msgCoder.encodeInnerData(msg);\r\n        this.socket.send(buf);\r\n    }\r\n\r\n    private onData(_data: Buffer) {\r\n        let data: any;\r\n        try {\r\n            data = BSON.deserialize(_data);\r\n        } catch (err) {\r\n            app.logger(loggerType.frame, loggerLevel.error, `master -> JSON parse error，close the monitor named: ${this.sid}, ${this.socket.remoteAddress}`);\r\n            this.socket.close();\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (data.T === define.Monitor_To_Master.heartbeat) {\r\n                this.heartbeatTimeoutTimer.refresh();\r\n                this.heartbeatResponse();\r\n            } else if (data.T === define.Monitor_To_Master.cliMsg) {\r\n                masterCli.deal_monitor_msg(data);\r\n            }\r\n        } catch (err: any) {\r\n            app.logger(loggerType.frame, loggerLevel.error, `master -> handle msg error, close it: ${this.sid}, ${this.socket.remoteAddress}\\n${err.stack}`);\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    private onClose() {\r\n        clearTimeout(this.heartbeatTimeoutTimer);\r\n        delete servers[this.sid];\r\n        delete serversDataTmp.servers[this.sid];\r\n        let serverInfo: monitor_remove_server = {\r\n            \"T\": define.Master_To_Monitor.removeServer,\r\n            \"serverName\": this.sid,\r\n            \"serverType\": this.serverType\r\n        };\r\n        let serverInfoBuf: Buffer = msgCoder.encodeInnerData(serverInfo);\r\n        for (let sid in servers) {\r\n            servers[sid].socket.send(serverInfoBuf);\r\n        }\r\n        app.logger(loggerType.frame, loggerLevel.error, `master -> a monitor disconnected: ${this.sid}, ${this.socket.remoteAddress}`);\r\n    }\r\n}\r\n\r\n/**\r\n * master handles cli agent\r\n */\r\nexport class Master_ClientProxy {\r\n    private socket: SocketProxy;\r\n    private heartbeatTimeoutTimer: NodeJS.Timeout = null as any;\r\n    constructor(socket: SocketProxy) {\r\n        this.socket = socket;\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        let socket = this.socket;\r\n        socket.maxLen = define.some_config.SocketBufferMaxLen;\r\n\r\n        this.heartbeatTimeOut();\r\n\r\n        socket.on('data', this.onData.bind(this));\r\n        socket.on('close', this.onClose.bind(this));\r\n\r\n        app.logger(loggerType.frame, loggerLevel.info, `master -> get a new cli: ${socket.remoteAddress}`);\r\n    }\r\n\r\n    private heartbeatTimeOut() {\r\n        this.heartbeatTimeoutTimer = setTimeout(() => {\r\n            app.logger(loggerType.frame, loggerLevel.error, `master -> heartbeat timeout, close the cli: ${this.socket.remoteAddress}`);\r\n            this.socket.close();\r\n        }, define.some_config.Time.Monitor_Heart_Beat_Time * 1000 * 2);\r\n    }\r\n\r\n    private onData(_data: Buffer) {\r\n        let data: any;\r\n        try {\r\n            data = BSON.deserialize(_data);\r\n        } catch (err) {\r\n            app.logger(loggerType.frame, loggerLevel.error, `master -> JSON parse error，close the cli: ${this.socket.remoteAddress}`);\r\n            this.socket.close();\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (data.T === define.Cli_To_Master.heartbeat) {\r\n                this.heartbeatTimeoutTimer.refresh();\r\n            } else if (data.T === define.Cli_To_Master.cliMsg) {\r\n                app.logger(loggerType.frame, loggerLevel.info, `master -> master get command from the cli: ${this.socket.remoteAddress} ==> ${BSON.serialize(data)}`);\r\n                masterCli.deal_cli_msg(this, data);\r\n            } else {\r\n                app.logger(loggerType.frame, loggerLevel.error, `master -> the cli illegal data type close it: ${this.socket.remoteAddress}`);\r\n                this.socket.close();\r\n            }\r\n        } catch (e: any) {\r\n            app.logger(loggerType.frame, loggerLevel.error, `master -> cli handle msg err, close it: ${this.socket.remoteAddress}\\n ${e.stack}`);\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    send(msg: any) {\r\n        this.socket.send(msgCoder.encodeInnerData(msg));\r\n    }\r\n\r\n    private onClose() {\r\n        clearTimeout(this.heartbeatTimeoutTimer);\r\n        app.logger(loggerType.frame, loggerLevel.info, `master -> a cli disconnected: ${this.socket.remoteAddress}`);\r\n    }\r\n}"]}
{"version":3,"file":"frontendServer.js","sourceRoot":"","sources":["../../src/components/frontendServer.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { isDebug } from \"../app\";\r\nimport { Application } from \"../application\";\r\nimport * as protocol from \"../connector/protocol\";\r\nimport { ServerType, getServerTypeByMainKey } from \"../register/route\";\r\nimport { I_clientManager, I_clientSocket, I_connectorConstructor, I_encodeDecodeConfig, loggerLevel, loggerType, sessionCopyJson } from \"../util/interfaceDefine\";\r\nimport { Session, initSessionApp } from \"./session\";\r\nimport define = require(\"../util/define\");\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\n\r\nexport class FrontendServer {\r\n    private app: Application;\r\n    private clientManager: ClientManager;\r\n    constructor(app: Application) {\r\n        this.app = app;\r\n        initSessionApp(this.app);\r\n\r\n        let defaultEncodeDecode: Required<I_encodeDecodeConfig> = protocol.default_encodeDecode;\r\n\r\n        // protocol.init(this.app);\r\n        defaultEncodeDecode = protocol.default_encodeDecode;\r\n\r\n        let encodeDecodeConfig = this.app.someconfig.encodeDecode || {};\r\n        this.app.protoEncode = encodeDecodeConfig.protoEncode || defaultEncodeDecode.protoEncode;\r\n        this.app.msgEncode = encodeDecodeConfig.msgEncode || defaultEncodeDecode.msgEncode;\r\n        this.app.protoDecode = encodeDecodeConfig.protoDecode || defaultEncodeDecode.protoDecode;\r\n        this.app.msgDecode = encodeDecodeConfig.msgDecode || defaultEncodeDecode.msgDecode;\r\n\r\n        this.clientManager = new ClientManager(app);\r\n    }\r\n\r\n    start(cb: Function) {\r\n        let self = this;\r\n        let startCb = function () {\r\n            let str = `listening at [${self.app.serverInfo.host}:${self.app.serverInfo.clientPort}]  ${self.app.serverName} (clientPort)`;\r\n            console.log(str);\r\n            self.app.logger(loggerType.frame, loggerLevel.info, str);\r\n            cb && cb();\r\n        };\r\n\r\n        let mydog = require(\"../mydog\");\r\n        let connectorConfig = this.app.someconfig.connector || {};\r\n        let connectorConstructor: I_connectorConstructor = connectorConfig.connector || mydog.connector.Tcp;\r\n        new connectorConstructor({\r\n            \"app\": this.app,\r\n            \"clientManager\": this.clientManager,\r\n            \"config\": this.app.someconfig.connector,\r\n            \"startCb\": startCb\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sync session\r\n     */\r\n    applySession(data: Buffer) {\r\n        let session = BSON.deserialize(data.subarray(1)) as sessionCopyJson;\r\n        let client = this.app.clients[session.uid];\r\n        if (client) {\r\n            client.session.applySession(session.settings);\r\n        }\r\n    }\r\n    /**\r\n     * The front-end server forwards the message of the back-end server to the client\r\n     */\r\n    sendMsgByUids(data: Buffer) {\r\n        let uidsLen = data.readUInt16BE(1);\r\n        let msgBuf = data.subarray(3 + uidsLen * 8);\r\n        let clients = this.app.clients;\r\n        let client: I_clientSocket;\r\n        let i: number;\r\n\r\n\r\n        // gzaLog(\"sendMsgByUids\", uidsLen, this.app.clientNum, clients, this.app.serverName);\r\n        for (i = 0; i < uidsLen; i++) {\r\n            let socketId = data.readBigUint64BE(3 + i * 8);\r\n\r\n            // let socketId2 = Number(socketId);\r\n            client = clients[Number(socketId)];\r\n            // if (isStressTesting) {\r\n            //     let data = this.app.protoDecode(msgBuf);\r\n            //     TSEventCenter.Instance.event(KarlCatEvent.OnUnitTestProto + data.mainKey + \"_\" + data.sonKey, data.msg);\r\n            // }\r\n\r\n            if (client) {\r\n                client.send(msgBuf);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction clientOnOffCb() {\r\n\r\n}\r\n\r\nclass ClientManager implements I_clientManager {\r\n    private app: Application;\r\n    private serverType: string = \"\";\r\n    private router: { [serverType: string]: (session: Session) => string };\r\n    private clientOnCb: (session: Session) => void = null as any;\r\n    private clientOffCb: (session: Session) => void = null as any;\r\n    private cmdFilter: (session: Session, mainKey: number, sonKey: number) => boolean = null as any;\r\n    private proto100Time: Map<string, number>;//key roleUid  value上一个10秒的时间戳\r\n    private proto100Count: Map<string, number>;//key roleUid  value上一个10秒的时间戳\r\n    private protoTime: Map<number, number>;//key roleUid  value上一个10秒的时间戳\r\n    private protoCount: Map<number, number>;//key roleUid  最近10秒的执行次数  按每秒6条，理论上最多60条\r\n    constructor(app: Application) {\r\n        this.app = app;\r\n        this.serverType = app.serverType;\r\n        this.router = this.app.router;\r\n        this.protoTime = new Map();\r\n        this.protoCount = new Map();\r\n        this.proto100Time = new Map();\r\n        this.proto100Count = new Map();\r\n        let connectorConfig = this.app.someconfig.connector || {};\r\n        this.clientOnCb = connectorConfig.clientOnCb || clientOnOffCb;\r\n        this.clientOffCb = connectorConfig.clientOffCb || clientOnOffCb;\r\n        this.cmdFilter = connectorConfig.cmdFilter as any || null;\r\n    }\r\n\r\n\r\n\r\n    addClient(client: I_clientSocket) {\r\n        if (client.session) {\r\n            this.app.logger(loggerType.frame, loggerLevel.warn, \"frontendServer -> 这个新的客户端Socket已有建立, close it\");\r\n            client.close();\r\n            return;\r\n        }\r\n        this.app.clientNum++;\r\n\r\n        let session = new Session(this.app.serverName);\r\n        session.socket = client;\r\n        client.session = session;\r\n        this.clientOnCb(session as any);\r\n    }\r\n\r\n    removeClient(client: I_clientSocket) {\r\n        let session = client.session;\r\n        // logTest(\"removeClient\", session.uid, this.app.clients);\r\n        if (!session) {\r\n            return;\r\n        }\r\n\r\n\r\n        delete this.app.clients[session.uid];\r\n        // logTest(\"removeClient2\", session.uid, this.app.clients);\r\n        this.app.clientNum--;\r\n\r\n        client.session = null as any;\r\n        session.socket = null as any;\r\n        this.clearQueue(session.uid);\r\n        this.clientOffCb(session as any);\r\n    }\r\n\r\n\r\n    public protoQueue: Map<number, any[][]> = new Map();\r\n    handleMsg(client: I_clientSocket, msgBuf: Buffer) {\r\n        try {\r\n            if (!client.session) {\r\n                this.app.logger(loggerType.frame, loggerLevel.warn, \"frontendServer -> cannot handle msg before added, close it\");\r\n                client.close();\r\n                return;\r\n            }\r\n\r\n            let data = this.app.protoDecode(msgBuf);\r\n            //  如果该协议是发给后端服的，就抛出到对应路由 如下面注释，当协议不属于前端服时，消息会根据route函数，转发给对应的服务器\r\n            this.doRemote(data, client.session);\r\n        } catch (e: any) {\r\n            let error: string = this.app.serverName + \"-----\" + e.stack\r\n            this.app.logger(loggerType.msg, loggerLevel.error, error);\r\n        }\r\n    }\r\n\r\n    public clearQueue(uid: number) {\r\n        let queue = this.protoQueue.get(uid);\r\n        if (queue) {\r\n            queue = [];\r\n            this.protoQueue.delete(uid);\r\n        }\r\n    }\r\n\r\n    // private async doQueue(uid: number) {\r\n    //     let queue = this.protoQueue.get(uid);\r\n    //     let count = 0;\r\n    //     while (queue.length > 0) {\r\n    //         count++;\r\n    //         if (count > 30) {\r\n    //             warningLog(\"执行消息队列超过了30次尚未跳出\");\r\n    //             break;\r\n    //         }\r\n    //         let arr = queue.shift();\r\n    //         await TSEventCenter.Instance.eventAsync(KarlCatEvent.FrontendServerDoFuntion + arr[0] + \"_\" + arr[1], arr[2], arr[3].session, this.callBack(arr[3], arr[0], arr[1]), this.otherCallBack(arr[3]));\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * Callback  \r\n     */\r\n    // private callBack(client: I_clientSocket, cmd: number) {\r\n    //     let self = this;\r\n    //     return function (msg: any) {\r\n    //         // logInfo(\"frone  callback\", mainKey, sonKey, msg);\r\n    //         if (msg === undefined) {\r\n    //             msg = null;\r\n    //         }\r\n    //         //callback都是给前端的，因此直接TOS = False\r\n    //         // if (cmd != 302)\r\n    //         //     logProto(\"<<<<<<<<<<<<<<< 发送消息\", cmd + \"-\" + sonKey, client.session && client.session.uid, msg);\r\n    //         // if (isStressTesting) {\r\n    //         //     TSEventCenter.Instance.event(KarlCatEvent.OnUnitTestProto + mainKey + \"_\" + sonKey, msg);\r\n    //         // }\r\n\r\n    //         let buf = self.app.protoEncode(cmd, msg);\r\n    //         client.send(buf);\r\n    //     }\r\n    // }\r\n\r\n    // /**\r\n    // * otherCallBack  类似next的用法，实现了 sendMsgByUidSid\r\n    // */\r\n    // private otherCallBack(client: I_clientSocket) {\r\n    //     let self = this;\r\n    //     return function (msg: any, cmd: number) {\r\n    //         // logInfo(\"frone  callback\", mainKey, sonKey, msg);\r\n    //         if (msg === undefined) {\r\n    //             msg = null;\r\n    //         }\r\n    //         //callback都是给前端的，因此直接TOS = False\r\n    //         // if (cmd != 302)\r\n    //         // logProto(\"<<<<<<<<<<<<<<< 发送消息\", cmd + \"-\" + sonKey, msg);\r\n    //         let buf = self.app.protoEncode(cmd, msg);\r\n    //         // if (isStressTesting) {\r\n    //         //     TSEventCenter.Instance.event(KarlCatEvent.OnUnitTestProto + mainKey + \"_\" + sonKey, msg);\r\n    //         // }\r\n    //         client.send(buf);\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * 处理Gate转发到后端服逻辑\r\n     * Forward client messages to the backend server\r\n     */\r\n    private doRemote(msg: { cmd: number, \"msg\": Buffer }, session: Session) {\r\n        let name = getServerTypeByMainKey(msg.cmd);\r\n        // logInfo(\"doRemote\", msg.mainKey, name, this.router);\r\n        if (isDebug) {\r\n            if (typeof (this.router[name]) != \"function\") {\r\n                console.log(\"非方法\", name, this.app.serverName, msg.cmd);\r\n                console.log(\"what the fuck\", name, this.app.serverName, msg.cmd);\r\n            }\r\n        }\r\n\r\n        let id = this.router[name](session);\r\n        let socket = this.app.rpcPool.getSocket(id);\r\n\r\n        // logInfo(\"客户端发送协议从前端服转发到后端服\", msg.mainKey, name, id, socket == null);\r\n        if (!socket) {\r\n            return;\r\n        }\r\n        let svr = this.app.serversNameMap[id];\r\n        if (svr.serverType !== name || svr.frontend) {\r\n            this.app.logger(loggerType.msg, loggerLevel.warn, \"frontendServer -> illegal remote\");\r\n            return;\r\n        }\r\n\r\n        // this.app.logger(loggerType.msg, loggerLevel.info, this.app.serverName + \"send msg to \" + name);\r\n\r\n        let sessionBuf = session.sessionBuf;\r\n        let buf = Buffer.allocUnsafe(9 + sessionBuf.length + msg.msg.length);\r\n        buf.writeUInt32BE(5 + sessionBuf.length + msg.msg.length, 0);//消息总长度\r\n        buf.writeUInt8(define.Rpc_Msg.clientMsgIn, 4);\r\n        buf.writeUInt16BE(sessionBuf.length, 5);\r\n\r\n        sessionBuf.copy(buf, 7);\r\n        buf.writeUInt16BE(msg.cmd, 7 + sessionBuf.length);//38+7 =  45\r\n        // buf.writeUInt16BE(msg.sonKey, 9 + sessionBuf.length);//38+9 = 47\r\n        msg.msg.copy(buf, 9 + sessionBuf.length); //38+11 = 49 从49位开始复制\r\n        socket.send(buf);\r\n    }\r\n}"]}
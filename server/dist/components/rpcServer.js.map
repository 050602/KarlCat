{"version":3,"file":"rpcServer.js","sourceRoot":"","sources":["../../src/components/rpcServer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Application } from \"..//application\";\r\nimport tcpServer from \"../components/tcpServer\";\r\nimport { FrameEvent } from \"../event/FrameEvent\";\r\nimport * as define from \"../util/define\";\r\nimport { loggerLevel, loggerType, ServerInfo, SocketProxy } from \"../util/interfaceDefine\";\r\nimport { TSEventCenter } from \"../utils/TSEventCenter\";\r\nimport * as rpcService from \"./rpcService\";\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\n\r\nlet serverToken: string = \"\";\r\nlet maxLen = 0;\r\n\r\nexport function start(app: Application, cb: () => void) {\r\n    let rpcConfig = app.someconfig.rpc || {};\r\n    maxLen = rpcConfig.maxLen || define.some_config.SocketBufferMaxLen\r\n    let noDelay = rpcConfig.noDelay === false ? false : true;\r\n    tcpServer(app.serverInfo.port, noDelay, startCb, newClientCb);\r\n\r\n    function startCb() {\r\n        let str = `listening at [${app.serverInfo.host}:${app.serverInfo.port}]  ${app.serverName}`;\r\n        console.log(str);\r\n        app.logger(loggerType.frame, loggerLevel.info, str);\r\n        cb();\r\n    }\r\n\r\n    function newClientCb(socket: SocketProxy) {\r\n        new RpcServerSocket(app, socket);\r\n    }\r\n\r\n    let tokenConfig = app.someconfig.recognizeToken || {};\r\n    serverToken = tokenConfig[\"serverToken\"] || define.some_config.Server_Token;\r\n}\r\n\r\nclass RpcServerSocket {\r\n    private app: Application;\r\n    private socket: SocketProxy;\r\n    private serverName: string = \"\";\r\n    private registered: boolean = false;\r\n    private registerTimer: NodeJS.Timeout = null as any;\r\n    private heartbeatTimer: NodeJS.Timeout = null as any;\r\n    private sendCache: boolean = false;\r\n    private sendArr: Buffer[] = [];\r\n    private sendTimer: NodeJS.Timer = null as any;\r\n    // private nowLen = 0;\r\n    // private maxLen = 128000;\r\n    constructor(app: Application, socket: SocketProxy) {\r\n        this.app = app;\r\n        this.socket = socket;\r\n        socket.once(\"data\", this.onRegisterData.bind(this));\r\n        socket.on(\"close\", this.onClose.bind(this));\r\n        socket.on(\"error\", this.onError.bind(this));\r\n        let app2 = app;\r\n        this.registerTimer = setTimeout(function () {\r\n            for (let stype in app2.serversConfig) {\r\n                let serverInfo: ServerInfo[] = app2.serversConfig[stype];\r\n                for (let sname of serverInfo) {\r\n                    if (sname.serverName != app2.serverInfo.serverName && app2.rpcPool.getSocket(sname.serverName) == null) {\r\n                        console.log(\"两个服务器间没有建立链接：\", sname.serverName, app2.serverName);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            console.error(`${app2.serverInfo.serverName}, rpcServer -> register timeout, close the rpc socket: ${socket.remoteAddress}`);\r\n            socket.close();\r\n        }, 5000);\r\n    }\r\n\r\n\r\n    private onError(error, error2) {\r\n        console.error(\"onError\", error, error2);\r\n    }\r\n\r\n\r\n    // The first message is registration\r\n    private onRegisterData(data: Buffer) {\r\n        try {\r\n            let type = data.readUInt8(0);\r\n            if (type === define.Rpc_Msg.register) {\r\n                this.registerHandle(data);\r\n            } else {\r\n                console.error(`${this.app.serverInfo.serverName}, rpcServer -> illegal rpc register, close the rpc socket: ${this.socket.remoteAddress}`);\r\n                this.socket.close();\r\n            }\r\n        } catch (e: any) {\r\n            this.socket.close();\r\n            this.app.logger(loggerType.frame, loggerLevel.error, e.stack);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * socket received data\r\n     * @param data\r\n     */\r\n    private onData(data: Buffer) {\r\n        try {\r\n            let type = data.readUInt8(0);\r\n            if (type === define.Rpc_Msg.clientMsgIn) {\r\n                this.app.backendServer.handleMsg(this.serverName, data);\r\n            }\r\n            else if (type === define.Rpc_Msg.clientMsgOut) {\r\n                this.app.frontendServer.sendMsgByUids(data);\r\n            }\r\n            else if (type === define.Rpc_Msg.rpcMsg) {\r\n                rpcService.handleMsg(this.serverName, data);\r\n            }\r\n            else if (type === define.Rpc_Msg.rpcMsgAwait) {\r\n                rpcService.handleMsgAwait(this.serverName, data);\r\n            }\r\n            else if (type === define.Rpc_Msg.applySession) {\r\n                this.app.frontendServer.applySession(data);\r\n            }\r\n            else if (type === define.Rpc_Msg.heartbeat) {\r\n                this.heartbeatHandle();\r\n                this.heartbeatResponse();\r\n            }\r\n            else {\r\n                this.app.logger(loggerType.frame, loggerLevel.error, `rpcServer -> 非法数据类型, 关闭的 rpc client 名称: ${this.serverName}`);\r\n                this.socket.close();\r\n            }\r\n        } catch (e: any) {\r\n            let error: string = this.app.serverName + \"---rpc onData error---\" + e.stack;\r\n            this.app.logger(loggerType.msg, loggerLevel.error, error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The socket connection is closed\r\n     */\r\n    private onClose(error) {\r\n        clearTimeout(this.registerTimer);\r\n        clearTimeout(this.heartbeatTimer);\r\n        this.heartbeatTimer = null as any;\r\n        clearInterval(this.sendTimer);\r\n        this.sendArr = [];\r\n        // this.nowLen = 0;\r\n        if (this.registered) {\r\n            this.app.rpcPool.removeSocket(this.serverName);\r\n        }\r\n        console.error(`${this.app.serverInfo.serverName}  rpcServer -> 一个 rpc client 断开链接 名称: ${this.serverName}, ${this.socket.remoteAddress},${error}`);\r\n    }\r\n\r\n    /**\r\n     * register\r\n     */\r\n    private registerHandle(msg: Buffer) {\r\n        clearTimeout(this.registerTimer);\r\n        let data: { \"serverName\": string, \"serverType\": string, \"serverToken\": string };\r\n        try {\r\n            data = BSON.deserialize(msg.subarray(1)) as any;\r\n        } catch (err) {\r\n            this.app.logger(loggerType.frame, loggerLevel.error, `rpcServer -> BSON 解析错误，关闭这个 rpc socket: ${this.socket.remoteAddress}`);\r\n            this.socket.close();\r\n            return;\r\n        }\r\n\r\n        // logInfo(\"注册handel\",data);\r\n        if (data.serverToken !== serverToken) {\r\n            this.app.logger(loggerType.frame, loggerLevel.error, `rpcServer ->无效的服务端令牌, 关闭这个 rpc socket: ${this.socket.remoteAddress}`);\r\n            this.socket.close();\r\n            return;\r\n        }\r\n        if (this.app.rpcPool.getSocket(data.serverName)) {\r\n            this.app.logger(loggerType.frame, loggerLevel.error, `rpcServer ->已经有这个rpc client 了，名字: ${data.serverName}, close it, ${this.socket.remoteAddress}`);\r\n            this.socket.close();\r\n            return;\r\n        }\r\n        if (this.app.serverName <= data.serverName) {\r\n            this.socket.close();\r\n            return;\r\n        }\r\n        this.registered = true;\r\n        this.socket.maxLen = maxLen;\r\n        this.socket.on(\"data\", this.onData.bind(this));\r\n\r\n        this.serverName = data.serverName;\r\n        this.app.logger(loggerType.frame, loggerLevel.info, `rpcServer -> 获得一个新的 rpc client named: ${this.serverName}`);\r\n\r\n        // Determine whether to send messages regularly\r\n        let rpcConfig = this.app.someconfig.rpc || {};\r\n        let interval = 0;\r\n        if (rpcConfig.interval) {\r\n            if (typeof rpcConfig.interval === \"number\") {\r\n                interval = rpcConfig.interval;\r\n            } else {\r\n                interval = rpcConfig.interval[data.serverType] || rpcConfig.interval.default || 0;\r\n            }\r\n        }\r\n        if (interval >= 10) {\r\n            this.sendCache = true;\r\n            this.sendTimer = setInterval(this.sendInterval.bind(this), interval);\r\n            // let tmpMaxLen = parseInt(rpcConfig.intervalCacheLen as any) || 0;\r\n            // if (tmpMaxLen > 0) {\r\n            //     this.maxLen = tmpMaxLen;\r\n            // }\r\n        }\r\n\r\n        // Registration is successful, respond\r\n        let buffer = Buffer.allocUnsafe(5);\r\n        buffer.writeUInt32BE(1, 0);\r\n        buffer.writeUInt8(define.Rpc_Msg.register, 4);\r\n        this.socket.send(buffer);\r\n        this.heartbeatHandle();\r\n\r\n        this.app.rpcPool.addSocket(this.serverName, this);\r\n\r\n        TSEventCenter.Instance.event(FrameEvent.onAddServer, this.serverName,);\r\n        let isAll = true;\r\n        for (let stype in this.app.serversConfig) {\r\n            let serverInfo: ServerInfo[] = this.app.serversConfig[stype];\r\n            for (let sname of serverInfo) {\r\n\r\n                if (sname.serverName != this.app.serverInfo.serverName && this.app.rpcPool.getSocket(sname.serverName) == null) {\r\n                    isAll = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (!isAll) {\r\n                break;\r\n            }\r\n        }\r\n        if (isAll) {\r\n            TSEventCenter.Instance.event(FrameEvent.OnStartAll);\r\n            console.log(\"OnStartAll\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Heartbeat\r\n     */\r\n    private heartbeatHandle() {\r\n        if (this.heartbeatTimer) {\r\n            this.heartbeatTimer.refresh();\r\n            return;\r\n        }\r\n\r\n        let rpcConfig = this.app.someconfig.rpc || {};\r\n        let heartbeat = rpcConfig.heartbeat || define.some_config.Time.Rpc_Heart_Beat_Time;\r\n        if (heartbeat < 5) {\r\n            heartbeat = 5;\r\n        }\r\n        this.heartbeatTimer = setTimeout(() => {\r\n            this.app.logger(loggerType.frame, loggerLevel.warn, `rpcServer ->心跳超时,关闭这个RPC链接: ${this.serverName}`);\r\n            this.socket.close();\r\n        }, heartbeat * 1000 * 2);\r\n    }\r\n\r\n    /**\r\n     * Heartbeat response\r\n     */\r\n    private heartbeatResponse() {\r\n        let buffer = Buffer.allocUnsafe(5);\r\n        buffer.writeUInt32BE(1, 0);\r\n        buffer.writeUInt8(define.Rpc_Msg.heartbeat, 4);\r\n        this.socket.send(buffer);\r\n    }\r\n\r\n    send(data: Buffer) {\r\n        if (this.sendCache) {\r\n            this.sendArr.push(data);\r\n            // this.nowLen += data.length;\r\n            // gzaLog(\"client Send length\",data.length);\r\n            // if (this.nowLen > this.maxLen) {\r\n            //     logServer(\"client Send length outsize\", this.nowLen);\r\n            //     this.sendInterval();\r\n            // }\r\n        } else {\r\n            this.socket.send(data);\r\n        }\r\n    }\r\n\r\n    private sendInterval() {\r\n        if (this.sendArr.length > 0) {\r\n            this.socket.send(Buffer.concat(this.sendArr));\r\n            this.sendArr.length = 0;\r\n            // this.nowLen = 0;\r\n        }\r\n    }\r\n}"]}
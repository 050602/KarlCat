{"version":3,"file":"DataBase.js","sourceRoot":"","sources":["../../src/database/DataBase.ts"],"names":[],"mappings":";;;;;;AAAA,wDAAgC;AAChC,gCAA6B;AAC7B,+CAA4C;AAG5C,MAAa,QAAS,SAAQ,mBAAQ;IAAtC;;QAEI,YAAY;QACL,iBAAY,GAAY,KAAK,CAAC;IAoGzC,CAAC;IAnGU,MAAM,KAAK,QAAQ;QACtB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9B,CAAC;IAEM,YAAY;IACnB,CAAC;IAEM,eAAe;IACtB,CAAC;IAIM,KAAK,CAAC,IAAI;QACb,wBAAwB;QACxB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAEnC,MAAM,OAAO,GAAG;gBACZ,SAAS,EAAE,IAAI;gBACf,uBAAuB;gBACvB,WAAW,EAAE,IAAI;gBACjB,WAAW,EAAE,CAAC;aACjB,CAAA;YACD,cAAc;YACd,4FAA4F;YAC5F,+CAA+C;YAC/C,2CAA2C;YAC3C,wBAAwB;YACxB,+FAA+F;YAC/F,qBAAqB;YACrB,MAAM;YAEN,kBAAQ,CAAC,OAAO,CAAC,SAAG,CAAC,UAAU,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;gBAC9E,OAAO,CAAC,GAAG,CAAC,SAAG,CAAC,UAAU,EAAE,SAAG,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;gBACvD,IAAI;oBACA,QAAQ,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC;oBAC1B,OAAO;oBAGP,mCAAmC;oBACnC,yCAAyC;oBACzC,kDAAkD;oBAClD,sDAAsD;oBACtD,uCAAuC;oBACvC,6CAA6C;oBAC7C,gDAAgD;oBAChD,mDAAmD;oBAEnD,8CAA8C;oBAG9C,OAAO,CAAC,IAAI,CAAC,CAAA;oBACb,QAAQ,CAAC,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC;iBAEzC;gBAAC,OAAO,KAAK,EAAE;oBACZ,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;iBACnC;YACL,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACb,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gBAC9B,MAAM,CAAC,IAAI,CAAC,CAAA;YAChB,CAAC,CAAC,CAAA;YAEF,oDAAoD;YACpD,8BAA8B;YAC9B,2BAA2B;YAC3B,4BAA4B;YAC5B,6BAA6B;YAC7B,yBAAyB;YACzB,0BAA0B;YAC1B,wBAAwB;YACxB,sBAAsB;YACtB,qBAAqB;YACrB,oBAAoB;YACpB,sBAAsB;YACtB,uBAAuB;YACvB,uBAAuB;YACvB,wBAAwB;YAExB,qDAAqD;YACrD,iCAAiC;YACjC,+BAA+B;YAC/B,8FAA8F;YAC9F,uCAAuC;YACvC,oBAAoB;YACpB,2CAA2C;YAC3C,iDAAiD;YACjD,+CAA+C;YAC/C,gDAAgD;YAChD,gCAAgC;YAChC,+CAA+C;YAC/C,gBAAgB;YAChB,cAAc;YACd,QAAQ;YACR,cAAc;YAEd,IAAI;QAER,CAAC,CAAC,CAAC;IACP,CAAC;CAEJ;AAvGD,4BAuGC","sourcesContent":["import mongoose from \"mongoose\";\r\nimport { app } from \"../app\";\r\nimport { Sigleton } from \"../core/Sigleton\";\r\n\r\n\r\nexport class DataBase extends Sigleton {\r\n\r\n    // 是否已初始化数据库\r\n    public initDataBase: boolean = false;\r\n    public static get Instance(): DataBase {\r\n        return this.getInstance();\r\n    }\r\n\r\n    public initInstance() {\r\n    }\r\n\r\n    public destoryInstance() {\r\n    }\r\n\r\n    public db: mongoose.Mongoose;\r\n\r\n    public async init() {\r\n        //TODO请下方已英文字母来排序，不然会强迫症\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const options = {\r\n                autoIndex: true,\r\n                // autoReconnect: true,\r\n                maxPoolSize: 1000,\r\n                minPoolSize: 1,\r\n            }\r\n            //多个数据库连接的处理办法\r\n            // let connection2 = mongoose.createConnection(\"mongodb://127.0.0.1:27017/LordDB\", options);\r\n            // connection2.asPromise().then(async (db) => {\r\n            //     AssetTable.Instance.init(db as any);\r\n            // console.log(\"wwwww\");\r\n            //    let a = await AssetTable.Instance.findOne({roleUid:102905519198341,uid:102905602625669});\r\n            //    console.log(a);\r\n            // });\r\n\r\n            mongoose.connect(app.zoneConfig.mongodb_connectstring, options).then(async (db) => {\r\n                console.log(app.serverType, app.serverName, \"连接数据库成功\");\r\n                try {\r\n                    DataBase.Instance.db = db;\r\n                    //建立索引 \r\n\r\n\r\n                    // UnionWarTable.Instance.init(db);\r\n                    // UnionWarSeasonTable.Instance.init(db);\r\n                    // UnionWarRuntimeRankDataTable.Instance.init(db);\r\n                    // UnionWarRuntimeCapturedDataTable.Instance.init(db);\r\n                    // UnionWarRoleTable.Instance.init(db);\r\n                    // UnionWarReportDataTable.Instance.init(db);\r\n                    // UnionWarRankUnionDataTable.Instance.init(db);\r\n                    // UnionWarRankPersonalDataTable.Instance.init(db);\r\n\r\n                    // await ServerSettingTable.Instance.init(db);\r\n\r\n\r\n                    resolve(null)\r\n                    DataBase.Instance.initDataBase = true;\r\n\r\n                } catch (error) {\r\n                    console.error(\"init db\", error);\r\n                }\r\n            }).catch((err) => {\r\n                console.error(\"数据库链接失败\", err);\r\n                reject(null)\r\n            })\r\n\r\n            //ff代表assetAll  m代表mail e代表精灵 ，asset 和 m 是唯二达到1G以上的表\r\n            // ff 1056  m 1435 e 1478--50条\r\n            // ff 1005 m909 e831---100条\r\n            // ff 1063 m1458 e1500 --单线程\r\n            // ff 1073 m1434 e843  --100条\r\n            // 1075 1433 1061 ---100条\r\n            // 1094 e1485 m1331 --100条\r\n            // 1041 e1459 m1500--单线程\r\n            // 1181 1500 981--100条\r\n            // 1207 1500，1218-95条\r\n            // 1061 1500，1100 --\r\n            // 1034 1469 1500  单线程\r\n            // 1099 1390 1395  10线程\r\n            // 1217 1481 1474  50线程\r\n            // 1206 1500 826    96线程\r\n\r\n            //增加链接数，在正常游戏运行时应该会有较大的提升大概30%，但是对于单表的并发查询，提升较少，大概10%\r\n            // for (let i = 0; i < 98; i++) {\r\n            //     let func = async () => {\r\n            //         let con = mongoose.createConnection(app.zoneConfig.mongodb_connectstring, options);\r\n            //         con.asPromise().then(() => {\r\n            //             try {\r\n            //                 console.log(\"start\", i);\r\n            //                 AssetTable.Instance.init(con);\r\n            //                 ElfTable.Instance.init(con);\r\n            //                 MailTable.Instance.init(con);\r\n            //             } catch (error) {\r\n            //                 console.log(\"error\", error);\r\n            //             }\r\n            //         });\r\n            //     }\r\n            //     func();\r\n\r\n            // }\r\n\r\n        });\r\n    }\r\n\r\n}"]}
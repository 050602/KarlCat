{"version":3,"file":"UserTable.js","sourceRoot":"","sources":["../../src/database/UserTable.ts"],"names":[],"mappings":";;;;;;AAAA,0DAAiC;AACjC,wDAAgC;AAChC,2CAAwC;AAGxC,MAAa,QAAQ;CAGpB;AAHD,4BAGC;AAED,MAAa,SAAU,SAAQ,qBAAS;IAC7B,MAAM,KAAK,QAAQ;QACtB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9B,CAAC;IAIM,KAAK,CAAC,IAAI,CAAC,EAAqB;QACnC,IAAI,CAAC,MAAM,GAAG,IAAI,kBAAQ,CAAC,MAAM,CAAC;YAC9B,YAAY,EAAE,MAAM;YACpB,QAAQ,EAAE;gBACN,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,EAAE;gBACX,KAAK,EAAE,IAAI;gBACX,2BAA2B;gBAC3B,0BAA0B;gBAC1B,kFAAkF;gBAClF,MAAM,EAAE,IAAI,EAAE,wBAAwB;gBACtC,8CAA8C;gBAC9C,oCAAoC;gBACpC,mCAAmC;gBACnC,2BAA2B;gBAC3B,2BAA2B;gBAC3B,uBAAuB;gBACvB,8BAA8B;gBAC9B,gCAAgC;gBAChC,KAAK;gBACL,aAAa;gBACb,uBAAuB;gBACvB,KAAK;gBACL,aAAa;gBACb,wBAAwB;gBACxB,IAAI;aACP;SACJ,CAAC,CAAC;QAEH,SAAS,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACrE,CAAC;IAEM,KAAK,CAAC,YAAY;QACrB,KAAK,CAAC,YAAY,EAAE,CAAC,CAAA,YAAY;QACjC,IAAI,QAAQ,GAAG;YACX,yDAAyD;YACzD,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,GAAG;YACpB,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,KAAK;YACjB,cAAc,EAAE,IAAI;YACpB,cAAc,EAAE,KAAK;YACrB,gBAAgB,EAAE,IAAI,EAAC,YAAY;YACnC,4FAA4F;YAC5F,4DAA4D;YAC5D,sBAAsB;SACzB,CAAA;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,mBAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,eAAe;QACxB,KAAK,CAAC,eAAe,EAAE,CAAC,CAAA,YAAY;QACpC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,IAAc;QACjC,IAAI,OAAO,GAAa,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,OAAO,EAAE;YACT,OAAO,OAAO,CAAC;SAClB;QAED,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1C,IAAI,OAAO,EAAE;YACT,OAAO,OAAO,CAAC;SAClB;QAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAEtC,IAAI,UAAU,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,EAAE;YACb,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACtC;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,OAAO,CAAC,QAAgB;QACjC,IAAI,OAAO,GAAa,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE;YACT,OAAO,OAAO,CAAC;SAClB;QAED,IAAI,IAAI,GAAa,MAAM,KAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;QACjE,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;MAKE;IACK,KAAK,CAAC,eAAe,CAAC,IAAS;QAClC,OAAO,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,IAAS;QAC1B,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,QAAgB;QACnC,IAAI,OAAO,GAAa,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;SAChC;QACD,IAAI,GAAG,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;QACxD,OAAO,GAAG,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,QAAgB,EAAE,IAAS;QAC9C,IAAI,GAAG,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;QAC9D,IAAI,OAAO,GAAa,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE;YACT,KAAK,IAAI,OAAO,IAAI,IAAI,EAAE;gBACtB,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;oBAC9B,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;iBACpC;aACJ;SACJ;QACD,OAAO,GAAG,CAAC;IACf,CAAC;CAEJ;AAzID,8BAyIC","sourcesContent":["import LRUCache from \"lru-cache\";\r\nimport mongoose from \"mongoose\";\r\nimport { BaseTable } from \"./BaseTable\";\r\n\r\n\r\nexport class UserData {\r\n    userName: string;\r\n    roleUid:number;\r\n}\r\n\r\nexport class UserTable extends BaseTable {\r\n    public static get Instance(): UserTable {\r\n        return this.getInstance();\r\n    }\r\n\r\n    private userDic: LRUCache<string, UserData> // key:userName\r\n    private schema: mongoose.Schema;\r\n    public async init(db: mongoose.Mongoose) {\r\n        this.schema = new mongoose.Schema({\r\n            subChannelID: String,\r\n            userName: { //taptap下，此值为unionID\r\n                required: true, //表示这个数据是否是必须输入\r\n                type: String,//类型\r\n                default: \"\",//默认值\r\n                index: true,\r\n                // max: 10, //最大值, 用于Number\r\n                // min: 1, //最小值, 用于Number\r\n                // enum: ['connect', 'uncoonect'], //枚举类型，标识值只能是connect或者uncoonect,只能用于//String类型中\r\n                unique: true, //创建唯一索引，如果两个name值相同则会报错\r\n                // match: /^\\d{11}$/, //输入的数据必须符合正则规则，用于String\r\n                // maxlength: 20, //输入的最大长度,用于String\r\n                // minlength: 10, //输入的最小长度用于String\r\n                // lowercase: true, // 全部小写\r\n                // uppercase: true, // 全部大写\r\n                //自定义验证器，通过则可以增加数据，反之不能\r\n                // validate: function (desc) {\r\n                //     return desc.length >= 10;\r\n                // },\r\n                // set(val) {\r\n                //     return `${val}岁`\r\n                // },\r\n                // get(val) {\r\n                //     return `今年${val}`\r\n                // }\r\n            },\r\n        });\r\n\r\n        UserTable.Instance.table = db.model(this.tableName, this.schema);\r\n    }\r\n\r\n    public async initInstance() {\r\n        super.initInstance();//Warning 必须\r\n        let options2 = {\r\n            // max: 8000,//最大缓存条数,理论上按同时在线玩家的2倍处理即可？理论上单服3000人，那就6000\r\n            ttl: 1000 * 60 * 180,//存活多久 毫秒 如果启用了ttl ，Has判断过期Item时，总是会返回false\r\n            ttlAutopurge: true,\r\n            allowStale: false,//如果设置了ttl,当调用get时，是否返回过期的item\r\n            updateAgeOnGet: true,//如果设置了ttl,当调用get时，是否更新过期时间戳\r\n            updateAgeOnHas: false,//如果设置了ttl,当调用has时，是否更新过期时间戳\r\n            ignoreFetchAbort: true,//忽略淘汰时的异常中止\r\n            //如果缓存中没有指定值，调用cache.fetch时，会调用以下方法，并把方法的返回值，返回,,,就是说，如果缓存中存在，是不会调用该方法的; ps:该方法会自动把返回值设置进缓存内\r\n            // fetchMethod: this.fetchData,//该方法是异步的才对，理论上传进来的方法需要是async\r\n            // fetchContext: this,\r\n        }\r\n\r\n        this.userDic = new LRUCache(options2);\r\n    }\r\n\r\n    public async destoryInstance() {\r\n        super.destoryInstance();//Warning 必须\r\n        this.userDic.clear();\r\n    }\r\n\r\n    public async insertOne(data: UserData): Promise<UserData> {\r\n        let oldData: UserData = await this.findOne(data.userName);\r\n        if (oldData) {\r\n            return oldData;\r\n        }\r\n\r\n        oldData = this.userDic.get(data.userName);\r\n        if (oldData) {\r\n            return oldData;\r\n        }\r\n\r\n        this.userDic.set(data.userName, data);\r\n\r\n        let insertData = await super.insertOne(data);\r\n        if (!insertData) {\r\n            this.userDic.delete(data.userName);\r\n        }\r\n\r\n        return insertData;\r\n    }\r\n\r\n    /**\r\n     * @param userName string\r\n     * @returns UserData\r\n     */\r\n    public async findOne(userName: string): Promise<UserData> {\r\n        let oldData: UserData = this.userDic.get(userName);\r\n        if (oldData) {\r\n            return oldData;\r\n        }\r\n\r\n        let data: UserData = await super.findOne({ userName: userName });\r\n        if (data) {\r\n            this.userDic.set(userName, data);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n    * 该方法理论上跟findOne一毛一样，主要用来区分findOne ,让 findOne可以用单一key做Map缓存\r\n    * 该方法，不应处理缓存问题,同时，该方法无法保证取到最新的数据，因为数据需要落地\r\n    * @param cond \r\n    * @returns UserData\r\n    */\r\n    public async findOneByObject(cond: any): Promise<UserData> {\r\n        return super.findOneByObject(cond);\r\n    }\r\n\r\n    public async findAll(cond: any): Promise<UserData[]> {\r\n        return super.findAll(cond);\r\n    }\r\n\r\n    public async deleteOne(username: string): Promise<any> {\r\n        let oldData: UserData = this.userDic.get(username);\r\n        if (oldData) {\r\n            this.userDic.delete(username)\r\n        }\r\n        let ret = await super.deleteOne({ userName: username });\r\n        return ret;\r\n    }\r\n\r\n    public async updateOne(userName: string, data: any): Promise<boolean> {\r\n        let ret = await super.updateOne({ userName: userName }, data);\r\n        let oldData: UserData = this.userDic.get(userName);\r\n        if (oldData) {\r\n            for (let datakey in data) {\r\n                if (data.hasOwnProperty(datakey)) {\r\n                    oldData[datakey] = data[datakey];\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n} "]}
{"version":3,"file":"BaseTable.js","sourceRoot":"","sources":["../../src/database/BaseTable.ts"],"names":[],"mappings":"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","sourcesContent":["import mongoose from \"mongoose\";\r\nimport { app } from \"../app\";\r\nimport { Sigleton } from \"../core/Sigleton\";\r\nimport { DatabaseEvent } from \"../event/DatabaseEvent\";\r\nimport { ServerType } from \"../register/route\";\r\nimport { TSEventCenter } from \"../utils/TSEventCenter\";\r\n\r\n\r\nexport class BaseTable extends Sigleton {\r\n    public tableName: string;\r\n    //落地方法\r\n    public implementationData(isEnforce?: boolean): void { };\r\n\r\n    protected table: mongoose.Model<any, {}, {}>;\r\n    private implementationTimer: NodeJS.Timeout;\r\n\r\n    public initInstance() {\r\n        if (app.serverInfo.serverType != ServerType.database) {\r\n            throw this.tableName + \"  致命错误，不允许在非数据库服调用Table\" ;\r\n        }\r\n        if (!this.tableName) {\r\n            this.tableName = this.clsName;\r\n        }\r\n        if (!this.tableName) {\r\n            throw this.tableName + \"  致命错误，table name is null\";\r\n        }\r\n\r\n        TSEventCenter.Instance.bindDB(DatabaseEvent.OnFindOneData + this.tableName, this, this.findOne);\r\n        TSEventCenter.Instance.bindDB(DatabaseEvent.OnFindOneDataByObject + this.tableName, this, this.findOneByObject);\r\n        TSEventCenter.Instance.bindDB(DatabaseEvent.OnFindAllData + this.tableName, this, this.findAll);\r\n        TSEventCenter.Instance.bindDB(DatabaseEvent.OnInsertOneData + this.tableName, this, this.insertOne);\r\n        TSEventCenter.Instance.bindDB(DatabaseEvent.OnUpdateOneData + this.tableName, this, this.updateOne);\r\n        TSEventCenter.Instance.bindDB(DatabaseEvent.OnDeleteOneData + this.tableName, this, this.deleteOne);\r\n        TSEventCenter.Instance.bindDB(DatabaseEvent.OnDeleteManyData + this.tableName, this, this.deleteAll);\r\n        TSEventCenter.Instance.bindDB(DatabaseEvent.OnCount + this.tableName, this, this.countNum);\r\n        TSEventCenter.Instance.bindDB(DatabaseEvent.OnDistinct + this.tableName, this, this.distinctList);\r\n\r\n        this.implementationTimer = setInterval(this.implementationData.bind(this), 5 * 1000);\r\n    };\r\n\r\n    public destoryInstance() {\r\n        TSEventCenter.Instance.unbindDB(DatabaseEvent.OnFindOneData + this.tableName);\r\n        TSEventCenter.Instance.unbindDB(DatabaseEvent.OnFindOneDataByObject + this.tableName);\r\n        TSEventCenter.Instance.unbindDB(DatabaseEvent.OnFindAllData + this.tableName);\r\n        TSEventCenter.Instance.unbindDB(DatabaseEvent.OnInsertOneData + this.tableName);\r\n        TSEventCenter.Instance.unbindDB(DatabaseEvent.OnUpdateOneData + this.tableName);\r\n        TSEventCenter.Instance.unbindDB(DatabaseEvent.OnDeleteOneData + this.tableName);\r\n        TSEventCenter.Instance.unbindDB(DatabaseEvent.OnCount + this.tableName);\r\n        TSEventCenter.Instance.unbindDB(DatabaseEvent.OnDistinct + this.tableName);\r\n        clearInterval(this.implementationTimer);\r\n    };\r\n\r\n    protected async insertOne(data: any): Promise<any> {\r\n        let newValue: any;\r\n        await this.table.create(data).then((value) => {\r\n            if (value) {\r\n                newValue = value.toObject();\r\n            }\r\n        }).catch((err) => {\r\n            console.error(\"insert one 数据插入失败:\", err, data);\r\n        });\r\n        return newValue;\r\n    }\r\n\r\n    protected async findMongokeyOne(cond: any): Promise<any> {\r\n        let data: any = null;\r\n        await this.table.findOne(cond).then((value) => {\r\n            if (value) {\r\n                data = value.toObject();\r\n            }\r\n        }).catch((err) => {\r\n            console.error(\"find mongo key one 查询失败:\", err, cond);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n\r\n    protected async findOne(cond: any): Promise<any> {\r\n        let data: any = null;\r\n        await this.table.findOne(cond).then((value) => {\r\n            if (value) {\r\n                data = value.toObject();\r\n            }\r\n        }).catch((err) => {\r\n            console.error(\"find one 查询失败:\", err, cond);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 该方法理论上跟findOne一毛一样，主要用来区分findOne ,让 findOne可以用单一key做Map缓存\r\n     * 此处不能直接调用findOne  因为在子类时，会调用到子类的findOne\r\n     * @param cond\r\n     * @returns \r\n     */\r\n    protected async findOneByObject(cond: any): Promise<any> {\r\n        let data: any = null;\r\n        await this.table.findOne(cond).then((value) => {\r\n            if (value) {\r\n                data = value.toObject();\r\n            }\r\n        }).catch((err) => {\r\n            console.error(\"find one by object 查询失败:\", err, cond);\r\n        });\r\n        return data;\r\n    }\r\n\r\n    protected async findAll(cond: any): Promise<any[]> {\r\n        let data: any[] = [];\r\n        await this.table.find(cond).lean().then((value) => {\r\n            data = value;\r\n            if (!data) {\r\n                console.error(this.tableName, cond);\r\n            }\r\n        }).catch((err) => {\r\n            console.error(\"find all 查询失败:\", cond, err);\r\n        });\r\n        return data;\r\n    }\r\n\r\n    protected async updateOne(cond: any, data: any): Promise<boolean> {\r\n        await this.table.updateOne(cond, data).then((value) => {\r\n        }).catch((err) => {\r\n            console.error(\"update one 更新失败:\", err, data);\r\n            return false;\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    protected async deleteOne(cond: any): Promise<boolean> {\r\n        await this.table.deleteOne(cond).then(() => {\r\n            // errLog(\"删除成功\", username);\r\n        }).catch((err) => {\r\n            console.error(\"delete one 删除失败:\", err, cond);\r\n            return false;\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    //deleteAll\r\n    protected async deleteAll(cond: any): Promise<boolean> {\r\n        await this.table.deleteMany(cond).lean().then(() => {\r\n            // errLog(\"删除成功\", username);\r\n        }).catch((err) => {\r\n            console.error(\"delete all 删除失败:\", err, cond);\r\n            return false;\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    protected async countNum(cond: any): Promise<number>{\r\n        let data: number = 0;\r\n        await this.table.count(cond).then((value) => {\r\n            if (value) {\r\n                data = value;\r\n            }\r\n        }).catch((err) => {\r\n            console.error(\"count  查询失败:\", err, cond);\r\n        });\r\n        return data;\r\n    }\r\n\r\n    protected async distinctList(field: string, cond: any): Promise<any[]> {\r\n        let data: any[] = [];\r\n        await this.table.distinct(field, cond).then((value) => {\r\n            if (value) {\r\n                data = value;\r\n            }\r\n        }).catch((err) => {\r\n            console.error(\"distinctList  查询失败:\", err, cond);\r\n        });\r\n        return data;\r\n    }\r\n}"]}
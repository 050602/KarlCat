{"version":3,"file":"LoginTable.js","sourceRoot":"","sources":["../../src/database/LoginTable.ts"],"names":[],"mappings":";;;;;AAAA,wDAA8C;AAU9C,MAAqB,UAAU;IAIpB,MAAM,CAAC,IAAI,CAAC,EAAqB;QACpC,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,kBAAQ,CAAC,MAAM,CAAC;YAClE,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,CAAC,MAAM,CAAC;YAClB,GAAG,EAAE,MAAM;SACd,CAAC,CAAC,CAAC;IACR,CAAC;IACM,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAe;QACtC,MAAM,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YAC1C,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAY;QACjC,IAAI,IAAI,GAAc,IAAI,CAAC;QAC3B,MAAM,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;YAC9D,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAI,GAAG,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAgB,EAAE,IAAS;QAClD,MAAM,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;YAC1E,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAgB;QACvC,MAAM,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YAC/D,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC;;AArDL,6BAsDC;AApDkB,oBAAS,GAAG,YAAY,CAAC","sourcesContent":["import mongoose, { Mongoose } from \"mongoose\";\r\n\r\nexport interface LoginType {\r\n    userName: String,//用户名\r\n    password: String,//MD5密码\r\n    nickName: String,//昵称\r\n    roleList: [Number],//角色列表\r\n    _id: Number,//角色的ID\r\n}\r\n\r\nexport default class LoginTable {\r\n\r\n    private static tableName = \"LoginTable\";\r\n    private static table: mongoose.Model<any, {}, {}>;\r\n    public static init(db: mongoose.Mongoose) {\r\n        LoginTable.table = db.model(LoginTable.tableName, new mongoose.Schema({\r\n            userName: String,\r\n            password: String,\r\n            nickName: String,\r\n            roleList: [Number],\r\n            _id: Number\r\n        }));\r\n    }\r\n    public static async insert(data: LoginType) {\r\n        await LoginTable.table.create(data).then(() => {\r\n            console.log(\"数据插入成功\");\r\n        }).catch((err) => {\r\n            console.log(\"数据插入失败:\", err, data);\r\n        });\r\n    }\r\n\r\n    public static async find(myid: String): Promise<LoginType> {\r\n        let data: LoginType = null;\r\n        await LoginTable.table.findOne({ userName: myid }).then((value) => {\r\n            console.log(\"查找成功\", value);\r\n            data = value;\r\n        }).catch((err) => {\r\n            console.log(\"查询失败:\", err, myid);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param myid \r\n     * @param data 更新部分的数据\r\n     * @returns \r\n     */\r\n    public static async update(username: String, data: any) {\r\n        await LoginTable.table.updateOne({ userName: username }, data).then((value) => {\r\n            console.log(\"更新成功\", username);\r\n        }).catch((err) => {\r\n            console.log(\"更新失败:\", err, username);\r\n        });\r\n    }\r\n\r\n    public static async delete(username: String) {\r\n        await LoginTable.table.deleteOne({ userName: username }).then(() => {\r\n            console.log(\"删除成功\", username);\r\n        }).catch((err) => {\r\n            console.log(\"删除失败:\", err, username);\r\n        });\r\n    }\r\n} "]}
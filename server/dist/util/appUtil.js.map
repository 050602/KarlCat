{"version":3,"file":"appUtil.js","sourceRoot":"","sources":["../../src/util/appUtil.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n\r\nimport * as fs from \"fs\";\r\nimport { Application } from \"../application\";\r\nimport { BackendServer } from \"../components/backendServer\";\r\nimport { FrontendServer } from \"../components/frontendServer\";\r\nimport * as master from \"../components/master\";\r\nimport * as monitor from \"../components/monitor\";\r\nimport { msgCoderSetApp } from \"../components/msgCoder\";\r\nimport * as rpcServer from \"../components/rpcServer\";\r\nimport * as rpcService from \"../components/rpcService\";\r\nimport { ServerInfo } from \"./interfaceDefine\";\r\nimport { RouterServer } from \"../components/routerServer\";\r\nconst BSON = require('bson');\r\nconst Long = BSON.Long;\r\n\r\n\r\n\r\n/**\r\n * Load configuration\r\n * @param app \r\n */\r\nexport function defaultConfiguration(app: Application) {\r\n    let args = parseArgs(process.argv);\r\n    app.env = args.env || \"development\";\r\n    loadBaseConfig(app);\r\n    processArgs(app, args);\r\n}\r\n\r\n/**\r\n * Start the server\r\n * @param app \r\n */\r\nexport function startServer(app: Application) {\r\n    startPng(app);\r\n    msgCoderSetApp(app);\r\n    // gzaLog(\"启动服务器\", app.serverName);\r\n    if (app.serverType === \"master\") {\r\n        console.log(\"启动master服\", app.serverName);\r\n        master.start(app);\r\n    } else if (app.serverInfo.toGate) {\r\n        console.log(\"启动路由服\", app.serverName);\r\n        rpcService.init(app);\r\n        app.routerServer = new RouterServer(app);\r\n        rpcServer.start(app, function () {\r\n            app.routerServer.start(function () {\r\n                monitor.start(app);\r\n            });\r\n        });\r\n    } else if (app.frontend) {\r\n        console.log(\"启动前端服\", app.serverName);\r\n        rpcService.init(app);\r\n        app.frontendServer = new FrontendServer(app);\r\n        rpcServer.start(app, function () {\r\n            app.frontendServer.start(function () {\r\n                monitor.start(app);\r\n            });\r\n        });\r\n\r\n    } else {\r\n        console.log(\"启动后端服\", app.serverName);\r\n        rpcService.init(app);\r\n        app.backendServer = new BackendServer(app);\r\n        rpcServer.start(app, function () {\r\n            app.backendServer.init();\r\n            monitor.start(app);\r\n            // TSEventCenter.Instance.event(KalrEvent.OnServerStart);\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport function getNoRpcKey(t1: string, t2: string) {\r\n    if (t1 <= t2) {\r\n        return t1 + \"_\" + t2;\r\n    } else {\r\n        return t2 + \"_\" + t1;\r\n    }\r\n}\r\n\r\nlet parseArgs = function (args: any[]) {\r\n    let argsMap = {} as any;\r\n    let mainPos = 1;\r\n\r\n    while (args[mainPos].indexOf('--') > 0) {\r\n        mainPos++;\r\n    }\r\n    argsMap.main = args[mainPos];\r\n\r\n    for (let i = (mainPos + 1); i < args.length; i++) {\r\n        let arg = args[i];\r\n        let sep = arg.indexOf('=');\r\n        let key = arg.slice(0, sep);\r\n        let value = arg.slice(sep + 1);\r\n        if (!isNaN(Number(value)) && (value.indexOf('.') < 0)) {\r\n            value = Number(value);\r\n        } else if (value === \"true\") {\r\n            value = true;\r\n        } else if (value === \"false\") {\r\n            value = false;\r\n        }\r\n        argsMap[key] = value;\r\n    }\r\n\r\n    return argsMap;\r\n};\r\n\r\nlet CONFIG_ZONE_PATH = \"serverConfig/serverConfig.json\";\r\n\r\nlet loadBaseConfig = function (app: Application) {\r\n    let configData: string = fs.readFileSync(CONFIG_ZONE_PATH, \"utf-8\");\r\n    app.zoneConfig = JSON.parse(configData);\r\n    app.masterConfig = app.zoneConfig.masterConfig;\r\n    serverInfos2serverConfig(app);\r\n    parseServersConfig(app.serversConfig);\r\n};\r\n\r\n\r\nfunction serverInfos2serverConfig(app: Application) {\r\n    let serverConfigs: { [serverType: string]: ServerInfo[] } = {};\r\n    for (let svrT in app.zoneConfig.serverinfos) {\r\n        let arr = app.zoneConfig.serverinfos[svrT];\r\n        serverConfigs[arr.serverType] = arr.singleTypeServers;\r\n    }\r\n\r\n    app.serversConfig = serverConfigs;\r\n    // console.log(app.serversConfig);\r\n}\r\n\r\n/** Parse the servers configuration */\r\nfunction parseServersConfig(info: { [serverType: string]: ServerInfo[] }) {\r\n    for (let svrT in info) {\r\n        let arr = info[svrT];\r\n        for (let i = 0; i < arr.length;) {\r\n            if ((arr[i].port as any) instanceof Array) {\r\n                let one = arr[i];\r\n                let newArr: ServerInfo[] = [];\r\n                let idStart = one.idStart || 0;\r\n                let port = (one.port as any)[0];\r\n                let len = (one.port as any)[1] - (one.port as any)[0] + 1;\r\n                for (let j = 0; j < len; j++) {\r\n                    let tmpOne: any = BSON.deserialize(BSON.serialize(one));\r\n                    tmpOne.id = one.serverName + (idStart + j).toString();\r\n                    tmpOne.port = port + j;\r\n                    if (one.clientPort) {\r\n                        tmpOne.clientPort = one.clientPort + j;\r\n                    }\r\n                    newArr.push(tmpOne);\r\n                }\r\n                arr.splice(i, 1, ...newArr);\r\n                i += len;\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlet processArgs = function (app: Application, args: { main: string, serverName: string, isDaemon: string, startMode: string }) {\r\n    app.main = args.main;\r\n    let startAlone = !!args.serverName;\r\n    app.serverName = args.serverName || app.masterConfig.serverName;\r\n    app.isDaemon = !!args.isDaemon;\r\n    if (app.serverName === app.masterConfig.serverName) {\r\n        app.serverInfo = BSON.deserialize(BSON.serialize(app.masterConfig)) as ServerInfo;\r\n        (app.serverInfo as any).serverType = \"master\";\r\n        app.serverType = \"master\";\r\n        app.startMode = startAlone ? \"alone\" : \"all\";\r\n    } else {\r\n        app.startMode = args.startMode === \"all\" ? \"all\" : \"alone\";\r\n        let serverConfig: ServerInfo = null as any;\r\n        for (let serverType in app.serversConfig) {\r\n            for (let one of app.serversConfig[serverType]) {\r\n                if (one.serverName === app.serverName) {\r\n                    serverConfig = BSON.deserialize(BSON.serialize(one)) as ServerInfo;\r\n                    (serverConfig as any).serverType = serverType;\r\n                    app.serverType = serverType;\r\n                    break;\r\n                }\r\n            }\r\n            if (serverConfig) {\r\n                break;\r\n            }\r\n        }\r\n        if (!serverConfig) {\r\n            console.error(\"ERROR-- no such server: \" + app.serverName);\r\n            process.exit();\r\n        }\r\n        app.serverInfo = serverConfig;\r\n        app.frontend = !!serverConfig.frontend;\r\n\r\n        let servers: { [serverType: string]: ServerInfo[] } = {};\r\n        servers[app.serverType] = [];\r\n        servers[app.serverType].push(serverConfig);\r\n        app.servers = servers;\r\n        app.serversNameMap[serverConfig.serverName] = serverConfig;\r\n    }\r\n};\r\n\r\nfunction startPng(app: Application) {\r\n    if (app.serverType !== \"master\" && app.startMode === \"all\") {\r\n        return;\r\n    }\r\n    let lines = [\r\n        \"  ※----------------------※\",\r\n        \"  ※   ----------------   ※\",\r\n        \"  ※  ( karlcat   @aan )  ※\",\r\n        \"  ※   ----------------   ※\",\r\n        \"  ※                      ※\",\r\n        \"  ※                      ※\",\r\n        \"  ※----------------------※\",\r\n    ];\r\n    let version = require(\"../mydog\").version;\r\n    version = \"Ver: \" + version;\r\n    console.log(\"      \");\r\n    for (let i = 0; i < lines.length; i++) {\r\n        if (i === 5) {\r\n            let j;\r\n            let chars = lines[i].split('');\r\n            let len = chars.length - 2 - version.length;\r\n            len = Math.floor(len / 2);\r\n            let index = 2 + len;\r\n            for (j = 0; j < version.length; j++) {\r\n                chars[index + j] = version[j];\r\n            }\r\n            lines[i] = chars.join('');\r\n        }\r\n        console.log(lines[i]);\r\n    }\r\n    console.log(\"  \");\r\n}\r\n"]}
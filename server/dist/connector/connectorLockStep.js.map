{"version":3,"file":"connectorLockStep.js","sourceRoot":"","sources":["../../src/connector/connectorLockStep.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from \"crypto\";\r\nimport { EventEmitter } from \"events\";\r\nimport { Application } from \"../application\";\r\nimport { I_clientManager, I_connectorConfig, I_encodeDecodeConfig } from \"../util/interfaceDefine\";\r\nimport { kcpServer } from \"./connectorKcp\";\r\nimport { app } from \"../app\";\r\n\r\n/**\r\n * connector lockstep\r\n */\r\nexport class ConnectorLockStep {\r\n    public app: Application;\r\n    public clientManager: I_clientManager = null as any;\r\n    public handshakeBuf: Buffer;        // Handshake buffer\r\n    public handshakeBufAll: Buffer = null as any;        // Handshake buffer all\r\n    public heartbeatBuf: Buffer;        // Heartbeat response buffer\r\n    public heartbeatTime: number = 0;   // Heartbeat time\r\n    public beClosedBuf: Buffer;        // beClosed buffer\r\n    public maxConnectionNum: number = Number.POSITIVE_INFINITY;\r\n    public nowConnectionNum: number = 0;\r\n    public sendCache = false;\r\n    public interval: number = 0;\r\n    public md5 = \"\";    // route array md5\r\n    public maxLen = 0;\r\n\r\n    constructor(info: { app: Application, clientManager: I_clientManager, config: I_connectorConfig, startCb: () => void }) {\r\n        this.app = info.app;\r\n        this.clientManager = info.clientManager;\r\n\r\n        let connectorConfig = info.config || {};\r\n        this.maxLen = connectorConfig.maxLen || 10 * 1024 * 1024;\r\n        this.heartbeatTime = (connectorConfig.heartbeat || 0) * 1000;\r\n        if (connectorConfig.maxConnectionNum != null) {\r\n            this.maxConnectionNum = connectorConfig.maxConnectionNum;\r\n        }\r\n        let interval = Number(connectorConfig.interval) || 0;\r\n        if (interval >= 10) {\r\n            this.sendCache = true;\r\n            this.interval = interval;\r\n        }\r\n\r\n\r\n        // Handshake buffer\r\n        let cipher = crypto.createHash(\"md5\")\r\n        this.md5 = cipher.update(JSON.stringify(app.serversConfig)).digest(\"hex\");\r\n\r\n        let routeBuf = Buffer.from(JSON.stringify({ \"md5\": this.md5, \"heartbeat\": this.heartbeatTime * 0.001 }));\r\n        this.handshakeBuf = Buffer.alloc(routeBuf.length + 1);\r\n        this.handshakeBuf.writeUInt8(Server_To_Client.handshake, 0);\r\n        routeBuf.copy(this.handshakeBuf, 1);\r\n\r\n        let routeBufAll = Buffer.from(JSON.stringify({ \"md5\": this.md5, \"route\": \"\", \"heartbeat\": this.heartbeatTime * 0.001 }));\r\n        this.handshakeBufAll = Buffer.alloc(routeBufAll.length + 1);\r\n        this.handshakeBufAll.writeUInt8(Server_To_Client.handshake, 0);\r\n        routeBufAll.copy(this.handshakeBufAll, 1);\r\n\r\n        // Heartbeat response buffer\r\n        this.heartbeatBuf = Buffer.alloc(1);\r\n        this.heartbeatBuf.writeUInt8(Server_To_Client.heartbeatResponse, 0);\r\n\r\n        // be closed buffer\r\n        this.beClosedBuf = Buffer.alloc(1);\r\n        this.beClosedBuf.writeUInt8(Server_To_Client.beClosed, 0);\r\n\r\n\r\n        // wsServer(info.app.serverInfo.clientPort, connectorConfig, () => {\r\n        // kcpServer(info.app.serverInfo.clientPort, connectorConfig, this, () => {\r\n        //     info.startCb();\r\n        // });\r\n        // }, this.newClientCb);\r\n\r\n        kcpServer(info.app.serverInfo.clientPort, connectorConfig, this, () => {\r\n            info.startCb();\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * client to server, message type\r\n */\r\nexport const enum Client_To_Server {\r\n    msg = 1,\r\n    handshake = 2,\r\n    heartbeat = 3,\r\n    close = 4,\r\n}\r\n\r\n/**\r\n * server to client, message type\r\n */\r\nexport const enum Server_To_Client {\r\n    msg = 1,\r\n    handshake = 2,\r\n    heartbeatResponse = 3,\r\n    beClosed = 4,\r\n}\r\n\r\n/**\r\n * socket connection proxy\r\n */\r\nexport interface SocketProxy extends EventEmitter {\r\n    socket: any;\r\n    remoteAddress: string;\r\n    die: boolean;\r\n    maxLen: number;\r\n    len: number;\r\n    buffer: Buffer;\r\n    headLen: number;\r\n    headBuf: Buffer;\r\n    close(): void;\r\n    send(data: Buffer): void;\r\n}\r\n\r\n\r\n// export let lockstep_encodeDecode: I_encodeDecodeConfig = {\r\n    // \"protoDecode\": function (data: Buffer) {\r\n    //     return {\r\n    //         \"cmd\": data.readUInt8(1),\r\n    //         \"msg\": data.slice(2)\r\n    //     }\r\n    // },\r\n\r\n    // \"protoEncode\": function (cmd: number, msg: any) {\r\n    //     let msgBuf: Buffer = (app as any).msgEncode(cmd, msg);\r\n    //     let buf = Buffer.allocUnsafe(msgBuf.length + 2);\r\n    //     buf.writeUInt8(Server_To_Client.msg, 0);\r\n    //     buf.writeUInt8(cmd, 1);\r\n    //     msgBuf.copy(buf, 2);\r\n    //     return buf;\r\n    // },\r\n\r\n// }\r\n"]}
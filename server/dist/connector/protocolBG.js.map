{"version":3,"file":"protocolBG.js","sourceRoot":"","sources":["../../src/connector/protocolBG.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Application } from \"../application\";\r\nimport { gzaLog, logInfo } from \"../LogTS\";\r\nimport { lanlubg } from \"../proto/protobuf/bgproto.js\";\r\nimport * as define from \"../util/define\";\r\nimport { I_encodeDecodeConfig } from \"../util/interfaceDefine\";\r\n\r\nlet app: Application;\r\nexport function init(_app: Application) {\r\n    app = _app;\r\n}\r\n\r\n//该代码是正在使用的解码编码工具\r\nexport let newbg_encodeDecode = {\r\n    \"protoDecode\": function (data: Buffer) {\r\n        return {\r\n            \"cmd\": data.readUInt16BE(1),\r\n            \"msg\": data.subarray(3)\r\n        }\r\n    },\r\n    \"msgDecode\": function (cmd: number, msg: Buffer) {\r\n        return JSON.parse(msg.toString());\r\n    },\r\n    \"protoEncode\": function (cmd: number, msg: any) {\r\n        let msgBuf: Buffer = newbg_encodeDecode.msgEncode(cmd, msg);\r\n        let buf = Buffer.allocUnsafe(msgBuf.length + 7);\r\n        buf.writeUInt32BE(msgBuf.length + 3, 0);\r\n        buf.writeUInt8(define.Server_To_Client.msg, 4);\r\n        buf.writeUInt16BE(cmd, 5);\r\n        msgBuf.copy(buf, 7);\r\n        return buf;\r\n    },\r\n    \"msgEncode\": function (cmd: number, msg: any) {\r\n        return Buffer.from(JSON.stringify(msg));\r\n    }\r\n}\r\n\r\nexport let bg_encodeDecode: Required<I_encodeDecodeConfig> = {\r\n    \"protoDecode\": function (data: Buffer) {\r\n        // logInfo(\"protoDecode\", data.readUInt16BE(1), data.readUInt16BE(3));\r\n        return {\r\n            \"cmd\": data.readUInt16BE(1),\r\n            \"msg\": data.subarray(3),\r\n            \"toS\": true\r\n        }\r\n    },\r\n    \"msgDecode\": function (cmd: number, msg: Buffer): any {\r\n        // logInfo(\"msgDecode\", mainKey, sonKey, toS);\r\n        // gzaLog(\"解析长度\", msg.length);\r\n        let rlanlu = global[\"lanlubg\"];\r\n        let r = lanlubg;\r\n        // if (toS) {\r\n        let name = 'Pt' + cmd;\r\n        let obj = rlanlu[name];\r\n        if (!obj) {\r\n            logInfo(\"msgDecode 不存在协议：\", cmd);\r\n            return null;\r\n        }\r\n        let decodeData: any = obj.decode(msg);\r\n\r\n        return decodeData;\r\n        // } else {\r\n        //     let decodeData: any = rlanlu['Pt' + cmd + '_' + sonKey + '_toc'].decode(msg);\r\n        //     return decodeData;\r\n        // }\r\n\r\n    },\r\n    \"protoEncode\": function (cmd: number, msg: any): Buffer {\r\n        let msgUint8: Uint8Array = app.msgEncode(cmd, msg);\r\n        // let msgBuf = Buffer.from(msgUint8.buffer)\r\n        // logInfo(\"protoEncode===\", mainKey, sonKey, toS);\r\n        let buf = Buffer.allocUnsafe(msgUint8.length + 7);\r\n        buf.writeUInt32BE(msgUint8.length + 2, 0);              //头4位是 消息长度 加上 MainKey和Sonkey 4位，加上 defindServerToClient.msg 1位  总长度是msgBuf.length + 5 位，\r\n        buf.writeUInt8(define.Server_To_Client.msg, 4); //标记这条消息是自定义消息\r\n        buf.writeUInt16BE(cmd, 5);\r\n        // buf.writeUInt16BE(sonKey, 7);\r\n        Buffer.from(msgUint8).copy(buf, 7);  //buf总长度是 4 + 1 + 2 + 2 = 9位，偏移9\r\n        // logInfo(\"发送字节\", buf.length);\r\n        return buf;\r\n    },\r\n    \"msgEncode\": function (cmd: number, msg: any): Uint8Array {\r\n        // logInfo(\"msgEncode\", mainKey, sonKey, toS);\r\n        let rlanlu = global[\"lanlubg\"];\r\n        let r = lanlubg;\r\n        // if (toS) {\r\n        let obj = rlanlu['Pt' + cmd];\r\n        if (!obj) {\r\n            logInfo(\"msgDecode 不存在协议：\", cmd);\r\n            return null;\r\n        }\r\n        let encodeData: Uint8Array = obj.encode(msg).finish();\r\n        if (encodeData.buffer) {\r\n            return encodeData;\r\n        } else {\r\n            return null;\r\n        }\r\n        // } else {\r\n        //     let obj = rlanlu['Pt' + cmd + '_' + sonKey + '_toc'];\r\n        //     if (!obj) {\r\n        //         logInfo(\"msgDecode 不存在协议：\", cmd + \"_\" + sonKey + \"_toc\");\r\n        //         return null;\r\n        //     }\r\n        //     let encodeData: Uint8Array = obj.encode(msg).finish();\r\n\r\n        //     if (encodeData.buffer) {\r\n        //         return encodeData;\r\n        //     } else {\r\n        //         return null;\r\n        //     }\r\n        // }\r\n\r\n    }\r\n}\r\n"]}
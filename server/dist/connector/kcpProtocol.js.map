{"version":3,"file":"kcpProtocol.js","sourceRoot":"","sources":["../../src/connector/kcpProtocol.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,yDAAmD;AACnD,sDAAmD;AACnD,uDAAyC;AAIzC,iBAAiB;AACN,QAAA,gBAAgB,GAAmC;IAC1D,aAAa,EAAE,UAAU,IAAY;QACjC,sEAAsE;QACtE,OAAO;YACH,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YAC3B,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvB,KAAK,EAAE,IAAI;SACd,CAAA;IACL,CAAC;IACD,WAAW,EAAE,UAAU,GAAW,EAAE,GAAW;QAC3C,IAAI,MAAM,GAAG,yBAAW,CAAC,QAAQ,CAAC,KAAK,CAAC;QACxC,IAAI,CAAC,GAAG,gBAAK,CAAC;QACd,aAAa;QACb,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;QACtB,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,GAAG,EAAE;YACN,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC;SACf;QACD,IAAI,UAAU,GAAQ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAEtC,OAAO,UAAU,CAAC;QAClB,WAAW;QACX,oFAAoF;QACpF,yBAAyB;QACzB,IAAI;IAER,CAAC;IACD,aAAa,EAAE,UAAU,GAAW,EAAE,GAAQ;QAC1C,IAAI,QAAQ,GAAe,wBAAgB,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAChE,4CAA4C;QAC5C,mDAAmD;QACnD,IAAI,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAClD,iJAAiJ;QACjJ,GAAG,CAAC,UAAU,sCAA8B,CAAC,CAAC,CAAC,CAAC,cAAc;QAC9D,GAAG,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC1B,gCAAgC;QAChC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAE,gCAAgC;QACrE,+BAA+B;QAE/B,IAAI,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,kBAAkB,EAAE;YACpD,OAAO,CAAC,KAAK,CAAC,wBAAwB,GAAG,MAAM,CAAC,WAAW,CAAC,kBAAkB,GAAG,cAAc,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;SACjH;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IACD,WAAW,EAAE,UAAU,GAAW,EAAE,GAAQ;QACxC,8CAA8C;QAC9C,gCAAgC;QAChC,IAAI,MAAM,GAAG,yBAAW,CAAC,QAAQ,CAAC,KAAK,CAAC;QACxC,IAAI,CAAC,GAAG,gBAAK,CAAC;QACd,aAAa;QACb,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,GAAG,EAAE;YACN,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC;SACf;QACD,eAAe;QACf,sCAAsC;QACtC,IAAI,UAAU,GAAe,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;QACtD,IAAI,UAAU,CAAC,MAAM,EAAE;YACnB,OAAO,UAAU,CAAC;SACrB;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IAEL,CAAC;CACJ,CAAA","sourcesContent":["\r\nimport { isDebug } from \"../app\";\r\nimport { lanlu } from \"../proto/protobuf/proto.js\";\r\nimport { ProtoCenter } from \"../proto/ProtoCenter\";\r\nimport * as define from \"../util/define\";\r\nimport { I_encodeDecodeConfig } from \"../util/interfaceDefine\";\r\n\r\n\r\n//该代码是正在使用的解码编码工具\r\nexport let kcp_encodeDecode: Required<I_encodeDecodeConfig> = {\r\n    \"protoDecode\": function (data: Buffer) {\r\n        // logInfo(\"protoDecode\", data.readUInt16BE(1), data.readUInt16BE(3));\r\n        return {\r\n            \"cmd\": data.readUInt16BE(1),\r\n            \"msg\": data.subarray(3),\r\n            \"toS\": true\r\n        }\r\n    },\r\n    \"msgDecode\": function (cmd: number, msg: Buffer): any {\r\n        let rlanlu = ProtoCenter.Instance.lanlu;\r\n        let r = lanlu;\r\n        // if (toS) {\r\n        let name = 'Pt' + cmd;\r\n        let obj = rlanlu[name];\r\n        if (!obj) {\r\n            console.error(\"msgDecode 不存在协议：\", cmd);\r\n            return null;\r\n        }\r\n        let decodeData: any = obj.decode(msg);\r\n\r\n        return decodeData;\r\n        // } else {\r\n        //     let decodeData: any = rlanlu['Pt' + cmd + '_' + sonKey + '_toc'].decode(msg);\r\n        //     return decodeData;\r\n        // }\r\n\r\n    },\r\n    \"protoEncode\": function (cmd: number, msg: any): Buffer {\r\n        let msgUint8: Uint8Array = kcp_encodeDecode.msgEncode(cmd, msg);\r\n        // let msgBuf = Buffer.from(msgUint8.buffer)\r\n        // logInfo(\"protoEncode===\", mainKey, sonKey, toS);\r\n        let buf = Buffer.allocUnsafe(msgUint8.length + 3);\r\n        // buf.writeUInt8(msgUint8.length + 1, 0);              //头4位是 消息长度 加上 MainKey和Sonkey 4位，加上 defindServerToClient.msg 1位  总长度是msgBuf.length + 5 位，\r\n        buf.writeUInt8(define.Server_To_Client.msg, 0); //标记这条消息是自定义消息\r\n        buf.writeUInt16BE(cmd, 1);\r\n        // buf.writeUInt16BE(sonKey, 3);\r\n        Buffer.from(msgUint8).copy(buf, 3);  //buf总长度是 4 + 1 + 2 + 2 = 9位，偏移9\r\n        // logInfo(\"发送字节\", buf.length);\r\n\r\n        if (buf.length > define.some_config.SocketBufferMaxLen) {\r\n            console.error(\" protoEncode 超长度了啊啊啊啊 \" + define.some_config.SocketBufferMaxLen + \" , nowlen : \" + buf.length);\r\n        }\r\n        return buf;\r\n    },\r\n    \"msgEncode\": function (cmd: number, msg: any,): Uint8Array {\r\n        // logInfo(\"msgEncode\", mainKey, sonKey, toS);\r\n        // let rlanlu = global[\"lanlu\"];\r\n        let rlanlu = ProtoCenter.Instance.lanlu;\r\n        let r = lanlu;\r\n        // if (toS) {\r\n        let obj = rlanlu['Pt' + cmd];\r\n        if (!obj) {\r\n            console.error(\"msgEecode 不存在协议：\", cmd);\r\n            return null;\r\n        }\r\n        // if (isDebug)\r\n        //     checkPorto(obj.prototype, msg);\r\n        let encodeData: Uint8Array = obj.encode(msg).finish();\r\n        if (encodeData.buffer) {\r\n            return encodeData;\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n}\r\n"]}